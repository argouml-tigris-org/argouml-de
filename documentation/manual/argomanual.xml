<?xml version='1.0' encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
"../docbook-setup/docbookx/docbookx.dtd">
<!-- $Id: argomanual.xml 12020 2007-02-11 11:07:12Z mvw $ -->
	<!--
		Copyright (c) 1996-2007 The Regents of the University of California.
		All Rights Reserved. Permission to use, copy, modify, and distribute
		this software and its documentation without fee, and without a written
		agreement is hereby granted, provided that the above copyright notice
		and this paragraph appear in all copies. This software program and
		documentation are copyrighted by The Regents of the University of
		California. The software program and documentation are supplied "AS
		IS", without any accompanying services from The Regents. The Regents
		does not warrant that the operation of the program will be
		uninterrupted or error-free. The end-user understands that the program
		was developed for research purposes and is advised not to rely
		exclusively on the program for any reason. IN NO EVENT SHALL THE
		UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
		SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
		ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
		THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
		SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
		WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
		MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
		PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
		CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
		UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
	-->
<book lang="de">
	<bookinfo>
		<date>5/17/2002</date>
	    <mediaobject>
	      <imageobject>
	        <imagedata fileref="images/argologo200x190_on_ffffff.png" 
	                format="PNG"/>
	      </imageobject>
	    </mediaobject>
    
		<title>ArgoUML Anwenderhandbuch</title>
		<subtitle>Eine Lern- und Referenzbeschreibung</subtitle>
		<abstract>
			<para>Diese Version des Handbuches beschreibt die Version
				@VERSION@ von ArgoUML.</para>
		</abstract>
		<authorgroup>
			<author>
				<firstname>Alejandro</firstname>
				<surname>Ramirez</surname>
			</author>
			<author>
				<firstname>Philippe</firstname>
				<surname>Vanpeperstraete</surname>
			</author>
			<author>
				<firstname>Andreas</firstname>
				<surname>Rueckert</surname>
			</author>
			<author>
				<firstname>Kunle</firstname>
				<surname>Odutola</surname>
			</author>
			<author>
				<firstname>Jeremy</firstname>
				<surname>Bennett</surname>
			</author>
			<author>
				<firstname>Linus</firstname>
				<surname>Tolke</surname>
			</author>
			<author>
				<firstname>Michiel</firstname>
				<surname>van der Wulp</surname>
			</author>
			<author>
				<firstname>Übersetzung: Harald</firstname>
				<surname>Braun</surname>
			</author>
		</authorgroup>
		<copyright>
			<year>2004</year>
			<year>2005</year>
			<year>2006</year>
			<year>2007</year>
			<year>2008</year>
			<holder>Michiel van der Wulp</holder>
		</copyright>
		<copyright>
			<year>2003</year>
			<holder>Linus Tolke</holder>
		</copyright>
		<copyright>
			<year>2001</year>
			<year>2002</year>
			<holder>Jeremy Bennett</holder>
		</copyright>
		<copyright>
			<year>2001</year>
			<holder>Kunle Odutola</holder>
		</copyright>
		<copyright>
			<year>2000</year>
			<holder>Philippe Vanpeperstraete</holder>
		</copyright>
		<copyright>
			<year>2000</year>
			<holder>Alejandro Ramirez</holder>
		</copyright>
		<copyright>
			<year>2000</year>
			<holder>Andreas Rueckert</holder>
		</copyright>
		<legalnotice>
			<para>
				Dieses Material darf nur nach den in der Open Publication Lizenz,
				Version 1.0 oder höher beschriebenen Regeln und Bedingungen
				weitergegeben werden. Eine Kopie dieser Lizenz finden Sie im
				Abschnitt
				<link linkend="app.legal">Open Publication License</link>
				. Die letzte Version ist unter
				<ulink url="http://www.opencontent.org/openpub/"> http://www.opencontent.org/openpub/</ulink>
				verfügbar.
			</para>
		</legalnotice>
	</bookinfo>
	<toc />
	<preface>
		<title>Vorwort</title>
		<indexterm>
			<primary>Design</primary>
		</indexterm>
		<para> Softwaredesign ist eine kognitiv herausfordernde Tätigkeit.
			Designer müssen die Entwürfe manuell eingeben, aber die primäre
			Schwierigkeit ist Entscheidungen zu treffen weniger Daten einzugeben.
			Wenn Designer ihre Fähigkeiten Entscheidungen zu treffen
			verbesserten, würden bessere Entwürfe dabei herauskommen.</para>
		<para> Aktuelle CASE-Tools enthalten Automations- und grafische
			Anwender-Schnittstellen, welche die manuelle Arbeit der Designeingabe
			reduzieren und einen Entwurf in Programmcode transformieren. Sie
			unterstützen die Designer bei ihren Entscheidungen hauptsächlich
			durch die Visualisierung des Entwurfes und einfachen syntaktischen
			Überprüfungen. Darüber hinaus weisen viele CASE-Tools auch
			substantielle Vorteile im Bereich der Versionskontrolle und
			nebenläufiger Designmechanismen auf. Ein Bereich der
			Designunterstützung, der bisher noch nicht besonders gut unterstützt
			wurde, ist die Analyse von Designentscheidungen.</para>
		<para> Aktuelle CASE-Tools haben eine Anwenderschnittstelle (GUI), die
			es den Designern ermöglicht, auf alle, durch das Tool angebotenen
			Funktionen zuzugreifen. Und sie unterstützen den Entwurfsprozess,
			indem sie es dem Designer erlauben, Diagramme im Stil populärer
			Design-Methoden einzugeben. Üblicherweise enthalten sie aber keine
			Prozessunterstützung, die den Designer durch die Designschritte
			führt. Designer beginnen üblicherweise mit einer leeren Seite und
			müssen jeden Aspekt des Entwurfes aus dem Kopf ableiten.</para>
		<para>
			ArgoUML ist eine domänenorientierte Desginumgebung mit kognitiver
			Unterstützung des objektorientierten Entwurfes. ArgoUML enthält
			einige der gleichen Automatismen wie kommerzielle CASE-Tools. Sein
			Fokus liegt aber auf Funktionen, welche die kognitiven Bedürfnisse
			von Designern befriedigen. Diese kognitiven Bedürfnisse werden durch
			3 kognitive Theorien beschrieben:
			<orderedlist>
				<listitem>
					<para>Reflektion-während-Aktion;</para>
					<indexterm>
						<primary>Reflektion-während-Aktion
						</primary>
					</indexterm>
				</listitem>
				<listitem>
					<para>Opportunistisches Design; und</para>
					<indexterm>
						<primary>Opportunistisches Design</primary>
					</indexterm>
				</listitem>
				<listitem>
					<para>Verständnis und Problemlösung.</para>
					<indexterm>
						<primary>Verständnis</primary>
					</indexterm>
					<indexterm>
						<primary>Problemlösung</primary>
					</indexterm>
				</listitem>
			</orderedlist>
		</para>
		<para> ArgoUML basiert direkt auf der UML 1.4-Spezifikation. Das
			zentrale Modell-Repository ist eine Implementierung der Java
			Metadaten Schnittstelle (JMI=Java Metadata Interface), welche MOF
			direkt unterstützt und die maschinenlesbare Version der UML
			1.4-Spezifikation der OMG verwendet.</para>
		<para>
			Darüber hinaus ist es unser Ziel, eine verständliche Unterstützung
			<indexterm>
				<primary>XMI</primary>
			</indexterm>
			für OCL (die Object Constraint Language) und XMI (dem XML Model
			Interchange format) bereitzustellen.
		</para>
		<para> ArgoUML wurde ursprünglich durch eine kleine Gruppe als
			Forschungsprojekt entwickelt. ArgoUML hat viele Funktionen, die es
			sehr speziell machen. Aber es implementiert nicht all die Funktionen,
			die kommerzielle CASE-Tools enthalten.</para>
		<para>
			Die aktuelle Version (@VERSION@) von ArgoUML implementiert alle
			Diagrammtypen des
			<ulink url="http://www.omg.org/cgi-bin/doc?formal/01-09-67">UML&nbsp;1.4 
    Standard</ulink> (ArgoUML-Versionen vor 0.20 implementierten den
    <ulink url="http://www.omg.org/cgi-bin/doc?formal/00-03-01">UML&nbsp;1.3 
    Standard</ulink>). Sie ist in Java geschrieben und läuft auf jedem 
    Rechner, der die Java 2-Plattform von Java 1.4 oder eine neuere Version 
    aufweist. Es verwendet zum Speichern offene Dateiformate, wie  
    <indexterm><primary>XML</primary></indexterm>
    <ulink url="http://www.omg.org/cgi-bin/doc?formal/02-01-01">
    XMI</ulink> (XML Metadata Interchange Format) (für Modell- 
    Informationen) und <ulink url="http://www.w3.org/TR/1998/NOTE-PGML">
    PGML</ulink> (Precision Graphics Markup Language) (für grafische 
    Informationen). Wenn ArgoUML UML 2.0 implementiert wird, wird 
    PGML durch die UML Diagram Interchange Spezifikation ersetzt.</para>

    <para>
    Dieses Handbuch ist die gesammelte Arbeit mehrerer Personen und entwickelte 
    sich über mehrere Jahre. Im Zusammenhang mit der ArgoUML-Release 0.10   
    schrieb Jeremy Bennett eine Menge neues Material, was dem in früheren 
    Versionen von Alejandro Ramirez, Philippe Vanpeperstraete und Andreas 
    Rueckert geschriebenen hinzugefügt wurde. Er fügte auch einige Dinge aus 
    anderen Dokumenten ein, namentlich aus dem Entwickler-Cookbook von Markus 
    Klink und Linus Tolke, der Kurzanleitung von Kunle Odutola sowie der FAQ von 
    Denny Daniels.
    Im Zusammenhang mit der Version 0.14 wurden Änderungen durch Linus Tolke 
    und Michiel van der Wulp vorgenommen. Diese Änderungen passten das Handbuch 
    an die neuen Funktionen und das neue Erscheinungsbild von ArgoUML, 
    Version 1.4 an und führten einen Index ein. Es sind zu viele Anwender und 
    Entwickler, die diese Arbeit durch Ihre Mitarbeit, wie Review-Kommentare 
    oder Beobachtungen während des Lesens und der Anwendung des Handbuchs 
    unterstützten, um sie alle namentlich benennen zu können. 
    </para>

    <para>
    ArgoUML ist frei verfügbar und kann im kommerziellen Umfeld genutzt werden. 
    Wenn Sie ArgoUML herunterladen, entnehmen Sie bitte die Nutzungsbedingungen 
    den beigefügten Lizenzbedingungen. Wir bieten Ihnen den Sourcecode von 
    ArgoUML an, damit Sie sich diesen ansehen, an Ihre Bedürfnisse anpassen und 
    verbessern können. Wir hoffen, dass sich ArgoUML nach und nach zu einem 
    leistungsfähigen und nützlichen Tool für jedermann entwickelt.
    </para>

    <para>
    Dieses Anwenderhandbuch ist für den Designer gedacht, der seine Entwürfe 
    mit Hilfe von ArgoUML erstellen möchte. Das Handbuch setzt voraus, dass Sie 
    mit UML vertraut sind. Eventuell unterstützt es aber auch diejenigen, für 
    die UML neu ist.
	</para>

    <para>
      Das Handbuch ist in DocBook/XML geschrieben und sowohl als 
      <indexterm><primary>XML</primary></indexterm>
      HTML als auch als PDF verfügbar.
    </para>

    <para>
    	Das ArgoUML-Projekt heisst alle willkommen, die sich beteiligen wollen. 
    	Mehr finden Sie unter der
    	<ulink url="http://argouml.tigris.org/">Projekt-Webseite</ulink>.
    </para>

    <para>
    	Teilen Sie uns bitte mit, was Sie über das Anwenderhandbuch denken!
    	Ihre Kommentare helfen uns, Dinge zu verbessern. Siehe 
    	<xref linkend="s2.intro.user.feedback" />
    	.
    </para>

  </preface>

  <chapter>

    <title>Einleitung</title>

    <sect1>

      <title>Die Anfänge und der Überblick über ArgoUML</title>

      <sect2 id="s2.ooad">

        <title>Objektorientierte Analyse und Design</title>

        <indexterm><primary>Analyse</primary></indexterm> 
        <indexterm><primary>Design</primary></indexterm>
        <para>
        Im letzten Jahrzehnt wurde die objektorientierte Analyse und Design 
        (OOA&amp;D) zu <emphasis>dem</emphasis> dominanten Softwareparadigma. 
        Damit einhergehend fand ein Umdenken in allen, an dem 
        Softwarelebenzyklus beteiligten Prozessen statt. 
        </para>

        <para>
        Die Unterstützung für Objekte begann mit der Programmiersprache 
        Simula&nbsp;67&mdash; aber es war das Erscheinen der Hybridsprachen 
        wie C++, Ada und Objekt Pascal in den 1980&apos;ern, die das 
        durchstarten der OOA&amp;D ermöglichten. Diese Sprachen enthielten 
        eine Unterstützung für Beides, der OO- und der prozeduralen 
        Programmierung. Die objektorientierte 
        <emphasis>Programmierung</emphasis> wurde zur 
        Hauptentwicklungsrichtung.
        </para>

        <para>
        Ein OO-System wird als <emphasis>Simulation</emphasis> der realen Welt 
        mit Hilfe von Softwarebausteinen entworfen und implementiert. Diese 
        Prämisse ist so leistungsfähig wie einfach. Durch die Anwendung des 
        OO-<emphasis>Design</emphasis>-Ansatzes kann ein System entworfen und 
        getestet (oder korrekter: simuliert) werden, ohne dass es 
        vorher gebaut werden muss.
		</para>

        <para>
        Es ist die Entwicklung von Tools während der 1990&apos;er, welche die 
        objektorientierte <emphasis>Analyse</emphasis> und <emphasis>Design
        </emphasis> unterstützen, die diesen Ansatz 
        vorantrieben. Gekoppelt mit der Fähigkeit, Systeme auf einer sehr hohen 
        Abstraktionsebene zu entwerfen, ermöglichte der toolbasierte 
        OOA&amp;D-Ansatz die Implementierung sehr viel komplexerer Systeme als 
        sie früher möglich gewesen wären.
        </para>

        <para>
        Das letzte Element, das die OOA&amp;D vorantrieb, war seine Eignung, 
        grafische Anwenderschnittstellen zu modellieren. Die Popularität der 
        objektbasierten und objektorientierten grafischen Sprachen, wie Visual 
        Basic und Java reflektieren die Effizienz dieses Ansatzes.
        </para>

      </sect2>

      <sect2>

        <title>Die Entwicklung von ArgoUML</title>

        <para>
        Während der 1980&apos;er wurden eine Anzahl von OOA&amp;D-
        Vorgehensmethoden und -Notationen durch unterschiedliche Forscherteams 
        entwickelt. Es wurde klar, dass es viele gemeinsame Themenbereiche gibt 
        und so wurde während der 1990&apos;er ein vereinheitlichter Ansatz für 
        die OOA&amp;D-Notation unter der Schirmherrschaft der 
        <ulink url="http://www.omg.org">Object Management Group</ulink> 
        entwickelt. Dieser Standard wurde als Unified Modeling Language (UML) 
        bekannt, und ist heute die Standardsprache für die Kommunikation von 
        OO-Konzepten.</para>

        <para>
        ArgoUML war als Tool und Umgebung für Analyse und Design 
        objektorientierter Softwaresysteme gedacht. In diesem Sinne ist 
        es vergleichbar mit vielen kommerziellen CASE-Tools, die als 
        Tools für die Modellierung von Softwaresystemen verkauft werden.
        ArgoUML weist aber gegenüber diesen Tools sehr viele wichtige 
        Unterscheidungsmerkmale auf.
		</para>

        <orderedlist>

          <listitem>

            <para>
              Es ist frei.
            </para>

          </listitem>

          <listitem>

            <para>
            ArgoUML zeichnet sich durch die Erforschung kognitiver 
            Psychologie aus, um ungewöhnliche Funktionen anbieten zu 
            können. Diese erhöhen die Produktivität durch die Unterstützung 
            kognitiver Bedürfnisse von objektorientiert arbeitenden 
            Softwaredesignern und -Architekten.
			</para>

          </listitem>

          <listitem>

            <para>
            ArgoUML nutzt sehr stark offene Standards - UML, XMI, 
            SVG, OCL und andere.
            </para>

          </listitem>

          <listitem>

            <para>
            ArgoUML ist eine 100%ige Java-Anwendung. Dadurch kann ArgoUML auf 
            allen Plattformen laufen, auf denen die Laufzeitumgebung der 
            Java2-Plattform verfügbar ist.
			</para>

          </listitem>

          <listitem>

            <para>
            ArgoUML ist ein Open-Source-Projekt. Die Verfügbarkeit des 
            Quellcodes stellt sicher, dass eine neue Generation von 
            Softwaredesignern und -forschern jetzt ein bewährtes Framework 
            haben, von dem aus, sie die Entwicklung und Evolution von 
            CASE-Tooltechnologien vorantreiben können.
			</para>

          </listitem>

        </orderedlist>

        <para>
        	UML ist die am häufigsten bevorzugte OO-Modellierungssprache 
        	und Java eine der produktivsten OO-Entwicklungsplattformen. 
        	Jason Robbins und der Rest seines Forscherteams an der 
        	Universität Kalifornien vereinten diese Vorteile während der 
        	Entwicklung von ArgoUML. Das Ergebnis ist ein solides 
        	Entwicklungstool und eine Umgebung für das OO-Systemdesign. 
        	Darüber hinaus bildet es eine Testumgebung für die Evolution 
        	der objektorientierten CASE-Tool-Entwicklung und -Forschung.
        </para>

        <para>
        Eine erste Release von ArgoUML war 1998 verfügbar. Mehr als 100.000 
        Downloads bis Mitte 2001 zeigte, dass dieses Projektes in Bildungs- und 
        kommerziellen Bereichen populär wurde.
		</para>

      </sect2>

      <sect2>

        <title>Mehr über das ArgoUML-Projekt</title>

        <sect3>

          <title>Wie wurde ArgoUML entwickelt</title>

          <indexterm><primary>Jason Robbins</primary></indexterm>
          <indexterm><primary>Robbins, Jason</primary></indexterm>
          <indexterm><primary>Mailing lists</primary></indexterm>
          <para>
          Jason Elliot Robbins gründete das Argo-Projekt und erhielt früh die  
          Projektleitung. Solange Jason im Projekt aktiv war, hatte er alle 
          Hände voll mit der Projektleitung zu tun.Das Projekt entwickelte sich 
          kontinuierlich und sehr stark weiter. Es gab mehr als 300 Mitglieder 
          in der Entwickler-Mailliste (siehe  
          <ulink url="http://argouml.tigris.org/servlets/ProjectMailingListList">
          http://argouml.tigris.org/servlets/ProjectMailingListList</ulink>).
          Mehrere Dutzend von Ihnen bildeten die Kern-Entwicklergruppe. 
		  </para>

          <para>
            Die Entwickler-Mailliste ist der Ort, in dem alle Diskussionen über 
            die letzten Aktivitäten stattfinden und Entwickler die Richtung 
            diskutieren, die das Projektes nehmen sollte. Obwohl manchmal sehr 
            kontrovers, blieben diese Diskussionen immer nett und freundlich 
            (keine &quot;flammenden Kriege&quot; oder ähnliches), so dass neue 
            Entwickler nicht zögern und einfach daran teilnehmen sollten. Sie 
            werden immer willkommen sein.
          </para>

          <indexterm><primary>Einbringen</primary><secondary>in 
          ArgoUML</secondary></indexterm>
          <indexterm><primary>Kochbuch</primary></indexterm>
          <indexterm><primary>Entwickler Kochbuch, 
          Die</primary></indexterm>
          <indexterm><primary>Entwicklerzone</primary></indexterm>
          <para>
            Wenn Sie lernen wollen, wie das Projekt arbeitet und wie 
            Sie sich einbringen können, rufen Sie die 
          	<ulink url="http://argouml.tigris.org/dev.html">
          		ArgoUML Web Seite &quot;Developer Zone&quot;
          	</ulink>
          	auf und lesen sich die Dokumentation durch. Das Entwicklerkochbuch
          	wurde speziell für diesem Zweck geschrieben.
          </para>

        </sect3>

        <sect3>

          <title>Mehr über die Infrastruktur</title>

          <indexterm><primary>Maillisten</primary></indexterm>
          <para>
            Neben der Entwickler-Mailliste gibt es auch eine Mailliste 
            für Anwender (siehe
          	<ulink
          		url="http://argouml.tigris.org/servlets/ProjectMailingListList">
          		The ArgoUML Mailing List List
          	</ulink>
          	), in der wir Probleme aus der Anwendersicht diskutieren können.
          	Entwickler lesen diese Liste auch, so dass grundsätzlich hoch 
          	qualifizierte Hilfe verfügbar ist.
          </para>

          <indexterm><primary>FAQ</primary></indexterm>
          <para>
          Bevor Sie eine Frage in eine dieser Listen einstellen, sollten Sie 
          einen Blick auf die von Ewan R. Grantham verwaltete 
          <ulink url="http://argouml.tigris.org/faqs/users.html">
          Anwender-FAQ</ulink> werfen.</para>

          <para>
          Weitere Informationen über ArgoUML und andere UML-bezogene 
          Themen sind unter der von Linus Tolke verwalteten 
          <ulink url="http://argouml.tigris.org">ArgoUML 
          Webseite</ulink> verfügbar.</para>

        </sect3>

      </sect2>

    </sect1>

    <sect1>

      <title>Der Anwendungsbereich dieses Anwenderhandbuches</title>

      <sect2>

        <title>Der Leserkreis</title>

        <para>
        Die aktuelle Fassung dieses Dokumentes ist für erfahrende Anwender der 
        UML in OOA&amp;D (vielleicht auch mit anderen Tools) gedacht, die zu 
        ArgoUML wechseln möchten.
		</para>

        <para>
        Künftige Fassungen werden Designer unterstützen, welche die 
        OOA&amp;D kennen und die UML-Notation in Ihren Entwicklungsprozess
        einbinden möchten.
        </para>

        <para>
        Ein langfristiges Ziel ist es, diejenigen zu unterstützen, 
        </para>
        <orderedlist numeration="lowerroman">
        	<listitem>
        		<para>
        			die das Design erlernen und mit einem OOA&amp;D-Prozess 
        			beginnen wollen, der die UML-Notation unterstützt und 
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        			Personen, die an einem modularisiertem Design mit Hilfe 
        			einer GUI interessiert sind.
        		</para>
        	</listitem>
        </orderedlist>

      </sect2>

      <sect2>

        <title>Anwendungsbereich</title>

        <para>
        Die Absicht dieses Dokument ist es, eine verständliche Einführung zu
        geben, die Designer in Lage versetzt, ArgoUML vollständig zu nutzen. 
        Es ist in zwei Teile untergliedert.
        </para>

        <itemizedlist>

          <listitem>

            <para>
            Ein Übungshandbuch, das zeigt, wie man mit ArgoUML arbeitet. 
            </para>

          </listitem>

          <listitem>

            <para>
            Ein vollständiges Referenzhandbuch, das alles beschreibt, was Sie 
            mit ArgoUML tun können.
            </para>

          </listitem>

        </itemizedlist>

        <para>
        	Die Version 0.22 des Dokumentes bezieht sich auf den zweiten Teil.
        </para>

        <para>
        In dieser Anleitung gibt es einige Dinge, die Sie nicht finden werden, 
        weil sie an anderen Stellen beschrieben sind.
        </para>

        <itemizedlist>

          <listitem>

            <para>
            Beschreibungen, wie ArgoUML intern arbeitet. 
            </para>

          </listitem>

          <listitem>

            <para>
            Wie ArgoUML mit neuen Eigenschaften und Funktionen 
            erweitert wird.
            </para>

          </listitem>

          <listitem>

            <para>Eine Anleitung zur Fehlerbehebung.</para>

          </listitem>

          <listitem>

            <para>Eine zusammenfassende Kurzanleitung für ArgoUML.</para>

          </listitem>

        </itemizedlist>

        <para>
        Diese Themen werden in
        <ulink url="http://argouml-stats.tigris.org/documentation/defaulthtml/cookbook/">
        Das Entwicklerkochbuch</ulink>, 
        <ulink url="http://argouml.tigris.org/faqs/users.html">Die  
        FAQ</ulink>, und 
        <ulink url="http://argouml-stats.tigris.org/documentation/quick-guide-0.22/">
        Die Kurzanleitung</ulink> beschrieben.
        </para>

      </sect2>

    </sect1>

    <sect1>

      <title>Überblick über das Anwenderhandbuch</title>

      <sect2>

        <title>Die Struktur des Übungshandbuches</title>

        <para>
        Das <xref linkend="ch.tut.uml"/> enthält einen Überblick über 
        UML-basierte OOA&amp;D einschliesslich einer Anleitung, wie man ArgoUML 
        installiert und startet.
        </para>

        <para>
        <xref linkend="ch.tut.reqs"/> bis <xref linkend="ch.tut.build"/> geht 
        dann durch alle Teile des Designprozesses. Von der ersten Anforderung 
        bis zum abschliessenden Projekt-Build und der Verteilung.
        </para>

        <para>
        Für jedes auftretende UML-Konzept wird dessen Anwendung erläutert. 
        Anschliessend wird dessen Einsatz innerhalb von ArgoUML beschrieben. 
        Zum Schluss wird eine Fallstudie benutzt, um Beispiele für diese 
        Konzepte zu geben.
		</para>

      </sect2>

      <sect2>

        <title>Die Struktur des Referenzhandbuches</title>

        <para>
        <xref linkend="ch.ref.ui"/> ist ein Überblick über die 
        Anwenderschnittstelle und enthält eine Zusammenfassung der 
        verschiedenen UML-Diagrammtypen von ArgoUML.
        <xref linkend="ch.ref.menu"/> und <xref linkend="ch.ref.navpane"/>
        beschreiben die Menüzeile und jedes Fenster der Anwenderschnittstelle.
        </para>

        <para>
        <xref linkend="ch.ref.critics"/> beschreibt Details aller im 
        System vorhandenen kognitiven Kritiken. Unter Umständen wird ArgoUML 
        direkt auf dieses Handbuch verweisen, wenn es die Hilfestellung zu 
        einer Kritik gibt.
        </para>

        <para>
        <xref linkend="ch.ref.entities"/> ist ein Überblick über die 
        Modellelemente (z.B. die UML-Elemente, die in den Diagrammen verwendet 
        werden können) von ArgoUML. Die folgenden Kapitel (
        <xref linkend="ch.ref.entusecase"/> bis 
        <xref linkend="ch.ref.entbuiltin"/>) beschreiben die Modellelemente, 
        die in jedem ArgoUML-Diagramm erzeugt werden können, deren 
        Eigenschaften, sowie einige Standard-Modellelemente die im System 
        enthalten sind.
        </para>

        <para>
        Es ist ein vollständiges <xref linkend="glossary"/> vorhanden. 
        <xref linkend="app.casestudy"/> enthält Material, um die 
        im Dokument durchgehend benutzte Fallstudie zu unterstützen. 
        <xref linkend="app.umlres"/> und <xref linkend="app.umlcase"/> 
        verweisen auf Hintergrundinformationen über UML und UML-CASE-Tools. 
        <xref linkend="app.legal"/> ist eine Kopie der &quot;GNU Free 
        Documentation License&quot;.
        </para>

        <para>
        Eine der künftigen Ambitionen ist es, einen vollständigen Index 
        bereitzustellen.
        </para>

      </sect2>

      <sect2 id="s2.intro.user.feedback">

        <title>Anwender-Feedback</title>

        <indexterm><primary>Feedback</primary></indexterm>
        <indexterm><primary>Anwender-Feedback</primary></indexterm>
        <indexterm><primary>Überblick</primary><secondary>über das 
        Anwenderhandbuch</secondary></indexterm>
        <para>Bitte teilen Sie uns mit, was Sie über dieses Anwenderhandbuch 
        denken. Ihre Kommentare helfen uns, Verbesserungen vorzunehmen.
        Mailen Sie Ihre Gedanken an <ulink url="mailto:users@argouml.tigris.org">
        die &quot;ArgoUML Users Mailing List&quot;</ulink>.
        Sollten Sie ein fehlendes Kapitel hinzufügen wollen, kontaktieren Sie 
        bitte <ulink url="mailto:dev@argouml.tigris.org">
        ArgoUML Developer Mailing List</ulink>, damit Sie prüfen können, ob 
        bereits jemand anderes an diesem Teil arbeitet. Sie können sich zu 
        jeder dieser Maillisten über die <ulink url="http://argouml.tigris.org">
        ArgoUML Webseite</ulink> anmelden.</para>

      </sect2>

    </sect1>

    <sect1>

      <title>Annahmen</title>

      <para>
      Diese Version des Handbuches unterstellt, dass der Leser mit 
      UML sehr vertraut ist. Dies zeigt sich durch die sparsame Beschreibung 
      der UML-Konzepte in diesem Übungshandbuch.
      </para>

      <para>
      Die Fallstudie ist beschrieben, aber noch nicht vollständig realisiert.
      Dies wird erst in zukünftigen Versionen dieses Handbuches der Fall sein.
      </para>

    </sect1>

  </chapter>

  <part>

    <title>Übungshandbuch</title>

    <chapter id="ch.tut.uml">

      <title>Einleitung</title>

      <para>
        Dieses Übungshandbuch führt Sie in Modellierung eines Systems mit Hilfe 
        von ArgoUML ein.
      </para>

      <para>
        Zuerst werden Sie mit dem Erscheinungsbild des Produktes vertraut 
        gemacht und dann werden wir für einen Testfall durch den Analyse- und 
        Entwicklungsprozess gehen. Es wird aber nicht jeder Winkel und jede 
        Ritze des Produktes demonstriert. Dieser Detaillierungsgrad wird im 
        Referenzmaterial bereitgehalten, das Sie in den nachfolgenden Teilen 
        dieses Dokumentes finden
      </para>

      <para>
        Der Zustand des Modelles am Ende der Hauptabschnitte wird in  
        .zargo-Dateien verfügbar sein. Diese sind vorhanden, damit Sie 
        verschiedene, nicht in diesem Übungshandbuch speziell behandelte 
        Aspekte durchspielen und dann zum richtigen Zustand des Modelles  
        zurückkehren können. Diese .zargo-Dateien werden am Ende der Abschnitte, 
        deren Arbeit sie repräsentieren, ausgewiesen. 
      </para>

      <para>
        
        Ein ATM (automated teller machine) Geldautomaten-Projekt wurde 
        als Fallstudie ausgewählt, um die verschiedenen Aspekte der von ArgoUML 
        angebotenen Modellierungen zu demonstrieren. In den nachfolgenden 
        Abschnitten werden wir einen <quote>Geldautomaten</quote> vollständig 
		in UML beschreiben. Das Übungshandbuch wird Sie allerdings nur durch 
		bestimmte Teile davon führen.
      </para>

      <para>
        An diesem Punkt sollten Sie ein Verzeichnis erzeugen, welches Ihr 
        Projekt aufnimmt. Benennen Sie das Verzeichnis so, dass es zum Rest 
        Ihres Dateisystems passt. Die Inhalte und die Unterverzeichnisse 
        sollten Sie, wie nachfolgend beschrieben, bezeichnen.
      </para>

      <para>
        Die Fallstudie ist ein Geldautomat. Ihre Firma heißt 
        <quote>FlyByNight Industries</quote>. Sie werden zwei Rollen spielen. 
        Die des Projektmanagers und die des Analytikers.
      </para>

      <para>
        Wir werden natürlich keinen physikalisch existierende Geldautomaten 
        erstellen. Das Produkt, das wir als Fallstudie erzeugen 
        werden ist ein Geldautomatensimulator, der zum Testen und Entwerfen eines 
        physikalisch vorhandenen Geldautomaten verwendet wird.
      </para>

      <para>
        Wie Ihre Firma die Arbeit in Projekten organisiert, ist gewöhnlich mehr 
        durch politische als durch andere Einflüsse bestimmt. Aus diesem Grund 
        steht dies nicht im Mittelpunkt dieses Dokumentes. Wir werden zeigen, 
        wie Sie Ihr Projekt nach dessen Definition selbst strukturieren können.
      </para>

    </chapter>

    <chapter id="ch.tut.ooad">

      <title>UML basierte OOA&amp;D</title>

      <para>
        In diesem Kapitel sehen Sie, wie UML als Notation innerhalb 
        der OOA&amp;D verwendet wird.
      </para>

      <sect1>

        <title>Hintergrundinformationen zu UML</title>

        <para><emphasis>Objektorientierung</emphasis> als Konzept kam in den 
        1960&apos;ern auf und als Designkonzept ab 1972. Erst in den 
        1980&apos;ern entwickelte sie sich im Bereich Analyse und Design als 
        ernstzunehmende Alternative zum <emphasis>funktionalen Ansatz</emphasis>. 
        Wir können eine Anzahl von Treibern identifizieren.
        </para>

        <orderedlist>

          <listitem>

            <para>
            Das Erscheinen der OO-Programmiersprachen wie SmallTalk 
            und teilweise C++. C++ war eine pragmatische, von C abgeleitete 
            OO-Sprache, die wegen ihrer Verknüpfung mit UNIX sehr weit 
            verbreitet war.
			</para>

          </listitem>

          <listitem>

            <para>
            Die Entwicklung leistungsfähiger Workstations und das 
            Erscheinen von fensterbasierten Anwenderumgebungen. 
            Grafische Anwenderschnittstellen (GUI) haben eine 
            eingebaute Objektstruktur.
			</para>

          </listitem>

          <listitem>

            <para>
            Eine Vielzahl sehr bekannter Projektfehlschläge, die 
            nahelegten, dass der aktuelle Ansatz nicht mehr tragfähig
            war.
            </para>

          </listitem>

        </orderedlist>

        <para>
        Mehrere Forscher schlugen OOA&amp;D-Prozesse und Notationen vor. 
        Denjenigen, denen tatsächlich etwas Erfolg beschieden war, waren 
        Coad-Yourdon, Booch, Rumbaugh OMT, OOSE/Jacobson, Shlaer-Mellor, ROOM 
        (für Echtzeit-Design) und die hybride &quot;Strukturierte 
        Programmierung&quot; von Jackson.
        </para>

        <para>
        Während der frühen 1990&apos;er wurde klar, dass diese Ansätze viele 
        gute, oft sehr einfache Ideen enthielten. Ein Haupt-Stolperstein waren 
        jedoch die unterschiedlichen Notationen, was bedeutete, dass die 
        Ingenieure mehr mit einer bestimmten OOA&amp;D-Methode als mit dem 
        generellen Ansatz vertraut waren.
        </para>

        <para>
        UML wurde als gemeinsame Notation erdacht, welche die Interessen Aller 
        berücksichtigen sollte. Der Originalstandard wurde durch Rational Rose 
        vorangetrieben (<ulink url="http://www.rational.com">
        www.rational.com</ulink>, in der drei der wichtigsten Forscher 
        arbeiteten (Booch, Jacobson und Rumbaugh waren involviert)). Sie 
        produzierten im Laufe des Jahres 1996 Dokumente, welche die UML, 
        Version 0.9 und Version 0.91 beschrieben. Der Aufwand wurde 
        industrieweit durch die Object Management Group (OMG) fortgesetzt, die 
        bereits durch den CORBA-Standard sehr bekannt war. Ein erster Vorschlag, 
        Version 1.0 wurde im Frühjahr 1997 veröffentlicht. Eine verbesserte 
        Version 1.1 erschien im Herbst.</para>

        <para>
        ArgoUML basiert auf UML, Version 1.4, die durch die OMG im März 2000 
        herausgegeben wurde. Die aktuelle offizielle Version ist UML, 
        Version 1.5 vom März 2003, die in Kürze durch die Revision UML, 
        Version 2.0 ersetzt werden wird. Diese befindet sich in den 
        abschliessenden Standardisierungsschritten und wird wahrscheinlich in 
        2006 vollständig sein.
        </para>

      </sect1>

      <sect1>

        <title>UML basierter Prozess für OOA&amp;D</title>

        <para>
          Sie müssen verstehen, dass UML eine Notation für die OOA&amp;D ist. 
          Sie schreibt keinen bestimmten Prozess vor. Welcher Prozess auch immer 
          angewendet wird, ein System wird in mehreren Phasen konstruiert.
        </para>

        <orderedlist>

          <listitem>

            <para>
            Erfassen der Anforderungen. In dieser Phase identifizieren 
            wir die Anforderungen an das System. Dabei verwenden wir die 
            Sprache des <emphasis>Problembereiches</emphasis>. Mit anderen 
            Worten, wir beschreiben das Problem mit den Begrifflichkeiten 
            des <quote>Kunden</quote>.
            </para>

          </listitem>

          <listitem>
             

            <para>
            Analyse. 
            <indexterm><primary>Analyse</primary></indexterm>
            Wir nehmen die Anforderungen und beginnen diese 
            in die Sprache der vermeintlichen Lösung umzuformen, in den 
            <emphasis>Lösungsbereich</emphasis>. Zu diesem Zeitpunkt halten 
            wir die Dinge auf einer hohen Abstraktionsebene, obwohl wir 
            bereits in den Begrifflichkeiten der Lösung denken&mdash; entfernt 
            von den konkreten Details einer spezifischen Lösung. Dieser 
            Vorgang ist als <emphasis>Abstraktion</emphasis> bekannt.
            </para>

          </listitem>

          <listitem>
            

            <para>
            Design. 
            <indexterm><primary>Design</primary></indexterm>
            Wir nehmen die Spezifikation aus der Analysephase und konstruieren 
            die Lösung ganz detailliert. Wir bewegen uns von der 
            <emphasis>Abstraktion</emphasis> des Problemes hin zu seiner 
            <emphasis>Realisierung</emphasis> in konkreter Form.
            </para>

          </listitem>

          <listitem>

            <para>
            Build-Phase. Wir nehmen das aktuelle Design und setzen es in 
            eine reale Programmiersprache um. Das schliesst nicht nur die 
            Programmierung ein, sondern auch das Testen, ob das Programm den 
            Anforderungen (<emphasis>Verifikation</emphasis>) entspricht, 
            testen, ob das Programm das aktuelle Kundenproblem löst (<emphasis>
            Validierung</emphasis>) und das Schreiben der gesamten 
            Anwenderdokumentation.
            </para>

          </listitem>

        </orderedlist>

        <sect2 id="s2.proctypes">

          <title>Prozesstypen</title>

          <para>
          In diesem Abschnitt sehen wir uns die beiden Hauptprozesstypen 
          an, die im Software-Engineering verwendet werden. Es gibt noch 
          weitere, diese werden aber weniger häufig eingesetzt.
          </para>

          <para>
          In den letzten Jahren gab es auch eine Bewegung, den für die 
          Entwicklung von Software notwendigen Aufwand zu reduzieren. Dies 
          führte in der Entwicklung zu einer Anzahl von kleineren 
          Prozessvarianten (oft als <emphasis>agile computing</emphasis> oder 
          <emphasis>extreme programming</emphasis> bekannt), die auf sehr 
          kleine Ingenieurteams zugeschnitten waren.
          </para>

          <sect3>

            <title>Der Wasserfall-Prozess</title>

            <para>In diesem Prozess wird jeder Prozessschritt&mdash; Erfassen 
            der Anforderungen, Analyse, Design und Build (Code und Test) 
            abgeschlossen, bevor der nächste beginnt. Dies ist in 
            <xref linkend="fig.waterfallsteps"/> illustriert.</para>

            <figure id="fig.waterfallsteps">

              <title>Der Wasserfall-Prozess</title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/waterfallsteps.png"
              				format="PNG" />
              		</imageobject>
              	</mediaobject></screenshot>
            </figure>

            <para>
            Dies ist ein sehr zufriedenstellender Prozess, in dem Anforderungen 
            gut entworfen wurden und keine Änderungen erwartet werden&mdash; 
            zum Beispiel die Automatisierung eines bewährten, manuellen Systems.
            </para>

            <para>
            Der Schwachpunkt dieses Ansatzes zeigt sich bei weniger gut 
            definierten Problemen. Offene Punkte in den Anforderungen bleiben 
            bis zur Phase Analyse und Design, oder auch bis zur Codephase 
            ungeklärt. Dies erfordert dann ein Zurückgehen, um diese Arbeit 
            nachzuholen.
            </para>

            <para>
            Der schlechteste Aspekt davon ist, dass ausführbarer Code erst 
            zum Ende des Projektes verfügbar wird. Sehr häufig ist es so, dass 
            erst zu diesem Zeitpunkt Probleme mit den Originalanforderungen 
            (zum Beispiel mit der Anwenderschnittstelle) in Erscheinung treten.
            </para>

            <para>
            Dies ist besonders schlimm, weil jeder folgende Schritt mehr 
            Aufwand als der vorhergehende erfordert, so dass die Kosten spät 
            entdeckter Probleme extrem teuer sind. Dies wird durch die Pyramide 
            in <xref linkend="fig.waterfall"/> dargestellt.</para>

            <figure id="fig.waterfall">

              <title>Zu erwartender Aufwand je Schritt des 
              Wasserfallmodelles</title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/waterfall.png" format="PNG" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <para>
            Der Wasserfallprozess ist wahrscheinlich der dominante 
            Designprozess. Durch seine Beschränkungen wird er jedoch mehr und 
            mehr durch <emphasis>iterative</emphasis> Prozesse ersetzt. 
            Insbesondere bei Projekten, bei denen die Anforderungen schlecht  
            definiert sind.
            </para>

          </sect3>

          <sect3>

            <title>Iterative Entwicklungsprozesse</title>
            <indexterm><primary>Iterative Prozesse</primary></indexterm>

            <para>
            In den letzten Jahren wurde ein neuer Ansatz verwendet, dessen 
            Ziel es war, einen minimalen Teil Code fertigzustellen und 
            schnellstmöglichst ausführen zu können, um Probleme im 
            Entwicklungszyklus sehr schnell aufzudecken.
            </para>

            <para>
            Diese Prozesse verwenden eine Reihe von <quote>Mini-Wasserfällen
            </quote>, definieren einige Anforderungen (die wichtigsten zuerst, 
            bringen diese durch den Analyse- und Design- sowie den 
            Buildprozess, um eine frühe Version des Produktes mit 
            eingeschränkter Funktionalität zu erhalten. Die Rückmeldungen 
            können dann dazu verwendet werden, die Anforderungen zu 
            überarbeiten, punktuelle Probleme zu identifizieren usw. bevor 
            noch mehr Arbeit investiert wird.
            </para>

            <para>
            Dieser Prozess wird dann für alle weiteren Anforderungen wiederholt, 
            um ein Produkt mit wachsender Funktionalität zu konstruieren.
            Erneutes Feedback kann wieder in die Anforderungen einfliessen. 
            </para>

            <para>
              Dieser Prozess wird wiederholt, bis alle Anforderungen 
              implementiert wurden und das Produkt fertig ist.
              <indexterm><primary>Iteration</primary></indexterm>
              Es ist diese <emphasis>Iteration</emphasis>, die diesem 
              Prozess seinen Namen gab.
              <xref linkend="fig.iterative"/> zeigt, wie dieser Prozess 
              mit der Pyramidenstruktur des Wasserfallprozesses verglichen 
              werden kann.
            </para>

            <figure id="fig.iterative">

              <title>Zu erwartender Aufwand je Schritt des iterativen 
              Prozesses</title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/iterative.png" format="PNG" />
              		</imageobject>
              	</mediaobject></screenshot>
            </figure>

            <para>
            Das Wachsen der Popularität iterativer Prozesse ist mit dem Wachsen 
            der OOA&amp;D eng verknüpft. Es ist die saubere Kapselung von 
            Objekten, die es erlaubt, einen Teil des Systems mit klar 
            definierten Leerroutinen für den verbleibenden Code zu bauen. 
            </para>

            <sect4>

              <title>Der Rational Unified Process</title>

              <para>
              Der wahrscheinlich bekannteste iterative Prozess ist der 
              Rational Unified Process (RUP) von Rational Software (
              <ulink url="http://www.rational.com">www.rational.com</ulink>).
              </para>

              <para>
              Dieser Prozess berücksichtigt, dass unsere Pyramidensicht der 
              Wasserfallebenen nicht realistisch ist. In der Praxis neigen 
              frühe Iterationen dazu, zu gross zu werden (sie müssen zu Beginn 
              eine beträchtliche Menge definieren), während spätere Iterationen 
              sehr viel Aufwand in der Design- und Buildphase benötigen.
              </para>

              <para>
              RUP erkannte, dass Wiederholungen entsprechend Ihrer Lage im 
              Gesamtprojekt in <emphasis>Phasen</emphasis> aufgeteilt werden  
              können. Jede Phase kann eine oder mehrere Iterationen umfassen.
              </para>

              <itemizedlist>

                <listitem>

                  <para>In der <emphasis>Anfangsphase</emphasis> 
                  neigen Iterationen dazu, mit Blick auf die Gesamtanforderung/
                  Analyse zu gross zu werden, während jede Build-Aktivität 
                  bezüglich der Emulation des Desgins durch das CASE-Tool 
                  eingeschränkt sein kann.
                  </para>

                </listitem>

                <listitem>

                  <para>
                  In der <emphasis>Ausarbeitungsphase</emphasis> werden die 
                  Iterationen dazu benutzt, die Spezifikation der Anforderungen 
                  zu vervollständigen. Ihr Schwerpunkt liegt auf Analyse und 
                  Design und dem wahrscheinlich ersten real erzeugten Code.
				  </para>

                </listitem>

                <listitem>

                  <para>In der <emphasis>Konstruktionsphase</emphasis> sind 
                  die Anforderungen und Analyse mehr oder weniger vollständig, 
                  der Aufwand liegt häufig im Design und in der Buildphase. 
                  </para>

                </listitem>

                <listitem>

                  <para>
                  In der abschliessenden <emphasis>Deploymentphase</emphasis>
                  finden Iterationen weitestgehend in den Buildaktivitäten 
                  und teilweise beim Test der Software statt.
				  </para>

                </listitem>

              </itemizedlist>

              <note>

                <para>
                Es sollte klar sein, dass Testen ein integraler Bestandteil 
                aller Phasen ist. Gerade in den frühen Phasen sollten die 
                Anforderungen und das Design getestet werden. Und dies wird 
                durch ein gutes CASE-Tool unterstützt.
                </para>

              </note>

              <para>
              Wir wollen in diesem Handbuch einen iterativen Prozess verwenden, 
              der lose auf dem RUP basiert.
              </para>

            </sect4>

            <sect4>

              <title>Iterationsgröße</title>

              <para>
                Eine gute Regel ist es, dass eine Iteration in typischen 
                kommerziellen Projekten zwischen sechs und zehn Wochen umfassen 
                sollte. Bei längeren Zeiträumen haben Sie sich wahrscheinlich 
                mehr Anforderungen vorgenommen, als Sie in einem Schritt 
                verarbeiten können. Sie verlieren auch den Fokus auf den 
                nächsten vollständigen Iterationsschritt. Bei kürzeren Zeiten 
                haben Sie wahrscheinlich nicht genügend Anforderungen um einen 
                spürbaren Vorschritt zu erzielen. In diesem Fall wird der mit 
                einer Iteration verbundene zusätzliche Overhead zum Problem.
              </para>

              <para>
                Die Gesamtanzahl von Iterationen hängt von der Grösse des 
                Projektes ab. Nehmen Sie die voraussichtliche Gesamtdauer  
                (geschätzte Ausarbeitungzeit für das gesamte Subjekt) und 
                unterteilen diese in 8 Wochen grosse Abschnitte. Die Erfahrung 
                sagt, dass Iterationen im Verhältnis 1:2:3:3 bezüglich der 
                RUP-Phasen <quote>Anfangsphase</quote>, <quote>
                Ausarbeitungsphase</quote>, <quote>Konstruktionsphase</quote> 
                und <quote>Deploymentphase</quote> aufgeteilt werden sollten. Ein 
                Projekt, dass grosse Unsicherheiten in seiner Spezifikation 
                aufweist (einige Forschungsprojekte zum Beispiel) wird viel 
                grössere frühe Phasen aufweisen. 
                
              </para>

              <para>
	              Wenn Sie ein Produkt per Vertrag für einen Kunden erstellen, 
	              ist der Endpunkt wohl definiert. Jedoch, wenn Sie ein neues 
	              Produkt für den Markt entwickeln, kann es eine Strategie sein, 
	              die Produktveröffentlichung zu nehmen und den Zeitpunkt für 
	              das Ende des Engieering zu bestimmen (einige Zeit vorher). 
	              Dieser Zeitraum wird dann in Iterationen unterteilt. In 
	              dieser Zeit wird so viel von dem Produkt entwickelt wie 
	              möglich. Der iterative Prozess ist sehr effektiv, wenn der 
	              Zeitpunkt der Markteinführung wichtiger ist als die exakte 
	              Funktionalität.
              </para>

            </sect4>

          </sect3>

          <sect3>

            <title>Rekursive Entwicklungsprozesse</title>

            <para>
            Sehr wenige Softwaresysteme sind als monolitische Werkzeuge 
            geplant. Sie werden in Subsysteme, Module usw. unterteilt.
            </para>

            <para>
            Die Softwareprozesse sind die gleichen. Mit frühen Abschnitten  
            in denen der Prozess eine Top-Level-Struktur definiert und die 
            wiederholte Anwendung des Prozesses auf Teile der Struktur, um 
            jedes grössere Detail zu definieren.
            </para>

            <para>
	            Zum Beispiel könnte das grundlegende Design eines 
	            Telefonsystemes Objekte identifizieren um 
            </para>
            <orderedlist numeration="lowerroman">
            	<listitem>
            		<para>
            			Telefonleitungen zu belegen, 
            		</para>
            	</listitem>
            	<listitem>
            		<para>
            			Anrufe zu verarbeiten, 
            		</para>
            	</listitem>
            	<listitem>
            		<para>
            			Anrufe zu verarbeiten, 
            		</para>
            	</listitem>
            	<listitem>
            		<para>
            			den Kunden abzurechnen. 
            		</para>
            	</listitem>
            </orderedlist>
            <para>
	           	Der Softwareprozess kann dann auf jedes dieser vier Komponenten 
	           	erneut angewendet werden, um deren Design zu identifizieren.
            </para>

            <para>
            OOA&amp;D mit seinen klaren Objektgrenzen unterstützt natürlich 
            diesen Ansatz. Eine OOA&amp;D in einer rekursiven Entwicklung wird 
            manchmal als OOA&amp;D/RD abgekürzt.
            </para>

            <para>
            Die rekursive Entwicklung kann parallel zu Wasserfall- oder 
            iterativen Prozessen angewendet werden. Sie ist keine Alternative.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Ein Entwicklungsprozess für dieses Übungshandbuch</title>

          <para>
          In diesem Übungshandbuch wollen wir einen reduzierten iterativen 
          Prozess mit rekursiver Entwicklung, lose gekoppelt mit RUP verwenden. 
          Die Fallstudie bringt uns durch die erste Iteration, obwohl wir am 
          Ende des Übungshandbuch-Abschnittes sehen werden, wie das Projekt 
          vollständig entwickelt wird.
          </para>

          <para>
          Innerhalb der ersten Iteration werden wir jede Aktivität wie das 
          Erfassen der Anforderungen, die Analyse, das Design und den Build 
          angehen. Nicht alle Teile des Prozesses basieren auf UML oder ArgoUML. 
          Wir werden sehen, welches andere Material hierfür benötigt wird.
          </para>

          <para>
          Innerhalb dieses Prozesses werden wir die Möglichkeit haben, die 
          verschiedenen UML-Diagramme in ihre Anwendung zu sehen. Der 
          vollständige Umfang der UML-Diagramme und wie sie unterstützt 
          werden ist im Referenzhandbuch beschrieben
          (siehe <xref linkend="s1.ref.diagram_types"/>).
          </para>

          <sect3>

            <title>Erfassen der Anforderungen</title>

            <para>
            Unser &quot;Erfassen der Anforderungen&quot; wird das UML-Konzept 
            von <emphasis>Anwendungsfällen</emphasis> verwenden. Beginnend 
            mit einem <emphasis>Visions-Dokument</emphasis> werden wir sehen, 
            wie Anwendungsfälle entwickelt werden können, um alle Aspekte des 
            Systemverhaltens im Problembereich zu beschreiben.
            </para>

          </sect3>

          <sect3>

            <title>Analyse</title>

            <para>
            Während der Analyse werden wir in das UML-Konzept der <emphasis>
            Klassen</emphasis> einführen. Dieses erlaubt es uns, eine Top-Level-
            Sicht von Objekten zu erzeugen, welche die Lösung darstellt&mdash; 
            manchmal als <emphasis>Konzept-Diagramm</emphasis> bekannt.
            </para>

            <indexterm><primary>Analyse</primary></indexterm> 
            
            <para>
            Wir werden das UML <emphasis>Sequenzdiagramm</emphasis> und das 
            <emphasis>Zustandsdiagramm</emphasis> einführen, um die 
            Anforderungen für das Gesamtverhalten des Systems zu erfassen.
            </para>

            <para>
            Abschliessend nehmen wir die Anwendungsfälle aus dem Abschnitt 
            <quote>Erfassen der Anforderungen</quote> und wandeln diese in die 
            Sprache des Lösungsbereiches um. Dies wird die UML-Ideen von 
            <emphasis>Stereotypen</emphasis> und <emphasis>Realisierung
            </emphasis> illustrieren.
            </para>

          </sect3>

          <sect3>

            <title>Design</title>

            <para>
            Wir verwenden das UML <emphasis>Paketdiagramm</emphasis>, um die 
            Komponenten des Projektes zu organisieren. Wir besuchen dann 
            erneut das Klassendiagramm, das Sequenzdiagramm und das 
            Zustandsdiagramm, um zu zeigen, wie diese rekursiv verwendet 
            werden können, um die vollständige Lösung zu designen.
            </para>
            
            <indexterm><primary>Design</primary></indexterm>

            <para>
            Während dieses Prozessteils müssen wir unsere Systemarchitektur 
            entwickeln, um zu definieren, wie alle Komponenten zusammenpassen 
            und miteinander zusammenarbeiten.
            </para>

            <para>
            Obgleich es nicht zwingend Teil unseres Prozesses ist, werden wir 
            uns ansehen, wie das UML <emphasis>Kollaborationsdiagramm</emphasis> 
            als Alternative oder Ergänzung zum <emphasis>Sequenzdiagramm
            </emphasis> verwendet werden kann. Ähnlich dem vorhergehenden, 
            werden wir uns das UML <emphasis>Aktivitätsdiagramm</emphasis> als 
            Alternative oder Ergänzung zum Zustandsdiagramm ansehen.
            </para>

            <para>
            Abschliessend wollen wir das UML <emphasis>Deploymentdiagramm
            </emphasis> verwenden, um zu spezifizieren, wie das System aktuell 
            realisiert werden soll.
            </para>

          </sect3>

          <sect3>

            <title>Build</title>

            <para>
            UML ist nicht wirklich mit dem Schreiben von Code verknüpft. 
            Jedoch wollen wir an dieser Stelle zeigen, wie ArgoUML für 
            die Codegenerierung eingesetzt werden kann.
            </para>
            <indexterm><primary>Build</primary></indexterm>

            <para>
            Wir wollen uns auch ansehen, wie das UML Anwendungsfalldiagramm 
            und die Anwendungsfall-Spezifikation unschätzbare Werkzeuge für 
            ein Testprogramm sind.
            </para>

          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Warum ist ArgoUML anders</title>

        <para>
        In der Einleitung listeten wir vier Dinge auf, die ArgoUML anders 
        machen:
        </para>
        <orderedlist numeration="lowerroman">
        	<listitem>
        		<para>
        			es macht Gebrauch von den Ideen der kognitiven Psychologie, 
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        			es basiert auf offenen Standards; 
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        			es ist 100% reines Java; und 
        		</para>
        	</listitem>
        	<listitem>
        		<para>
        			es ist ein Open-Source-Projekt.
        		</para>
        	</listitem>
        </orderedlist>

        <sect2 id="tut.cog.psych">

          <title>Kognitive Psychologie</title>

          <sect3>

            <title>Theorie</title>

            <para>
            ArgoUML ist teilweise durch die drei Theorien der kognitiven 
            Psychologie inspiriert: 
            </para>
            <orderedlist>
            	<listitem>
            		<para>Reflektion-während-Aktion,</para>
            	</listitem>
            	<listitem>
            		<para>Opportunistisches Design und</para>
            	</listitem>
            	<listitem>
            		<para>Verständnis und Problemlösung.</para>
            	</listitem>
            </orderedlist>

            <itemizedlist>

              <listitem><para><emphasis>Reflektion-während-Aktion</emphasis>
                <indexterm><primary>Reflektion-während-Aktion</primary></indexterm>
                </para>
                
                <para>
                  Diese Theorie unterstellt, dass sich die Designer eines 
                  komplexen Systems das vollständig ausgeformte Design nicht 
                  vorstellen können. Stattdessen müssen Sie ein Teil-Design 
                  entwerfen, evaluieren, es reflektieren und überarbeiten, bis 
                  Sie soweit sind, dieses zu erweitern. 
                </para>

                <para>
                  Da sich die Entwickler sehr intensiv mit dem Design 
                  beschäftigen, verbessert sich auch ihr mentales Modell der 
                  Problemsituation. Und dies führt zur Verbesserung Ihres 
                  Designs.
                </para>
              </listitem>

              <listitem><para><emphasis>Opportunistisches Design</emphasis>
                <indexterm><primary>Opportunistisches Design</primary></indexterm>
                </para>

                <para>
                  Eine Theorie innerhalb der kognitiven Psychologie besagt, dass 
                  obwohl Designer ihre Arbeit in einer geordneten, 
                  hierarchischen Art und Weise beschreiben, sie in der Realität 
                  aufeinanderfolgende Aktivitäten auf der Basis kognitiver 
                  Kosten wählen.
                </para>

                <para>
                  Einfach ausgedrückt, Designer folgen nicht ihrer selbst 
                  geplanten Reihenfolge, sondern wählen Schritte, die mental 
                  weniger aufwändige Alternativen darstellen.
                </para>
              </listitem>

              <listitem>
              <para>
              	<emphasis>Verständlichkeit und Problemlösung</emphasis>
                <indexterm><primary>Verständlichkeit</primary></indexterm>
                <indexterm><primary>Problemlösung</primary></indexterm>
                </para>

                <para>
                  Eine Design-Visualisierungstheorie innerhalb der kognitiven 
                  Psychologie. Die Theorie beschreibt, dass Designer eine 
                  Brücke zwischen Ihrem mentalen Modell des Problemes oder der 
                  Situation und dem formalen Modell einer Lösung oder eines 
                  Systems überwinden müssen.
                </para>

                <para>
                  Diese Theorie besagt, dass Programmierer Vorteile haben von:
                </para>

                <orderedlist>

                  <listitem>

                    <para>
                      Mehreren Darstellungsweisen wie die syntaktische 
                      Programmzerlegung, Zustandsübergänge, Steuer- und 
                      Datenfluss. Diese erlauben es dem Programmierer die 
                      Elemente und Beziehungen innerhalb des Problemes und der 
                      Lösung besser zu identifizieren und daher die Abbildung 
                      zwischen deren Situationsmodellen und den funktionierenden 
                      Systemmodellen leichter herstellen zu können.
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                      Vertraute Aspekte eines Situationsmodelles, welche die 
                      Fähigkeiten des Designers verbessern, Lösungen zu 
                      formulieren.
                    </para>

                  </listitem>

                </orderedlist>

              </listitem>
            </itemizedlist>

          </sect3>

          <sect3>

            <title>Praktische Anwendung in ArgoUML</title>

            <para>
              ArgoUML implementiert diese Theorien durch eine bestimmte Anzahl 
              von Techniken.
             </para>


            <orderedlist>

              <listitem>

                <para>
                Das Design der Anwenderschnittstelle, die es dem Anwender 
                erlaubt, das Design aus unterschiedlichen Sichten zu betrachten 
                und es dem Anwender ermöglicht, Ziele über alternative Wege zu 
                erreichen.
                </para>

              </listitem>

              <listitem>

                <para>
                Die Verwendung von im Designtool parallel ablaufenden Prozessen, 
                die das aktuelle Design gegen Modelle wie <quote>best practice
                </quote>-Designs überprüfen. Diese Prozesse sind als 
                <emphasis>Design-Kritiken</emphasis> bekannt.
                </para>

              </listitem>

              <listitem>

                <para>
                Die Nutzung von <emphasis><quote>zu bearbeiten</quote> Listen
                </emphasis>, die dem Anwender Vorschläge aus den Designkritiken 
                unterbreiten und es ihm auch erlauben, künftige Aktionsbereiche 
                aufzuzeichnen.
                </para>

              </listitem>

              <listitem>

                <para>
                Die Verwendung von Checklisten, um den Anwender durch einen 
                komplexen Prozess zu führen.
                </para>

              </listitem>

            </orderedlist>

          </sect3>

        </sect2>

        <sect2>

          <title>Offene Standards</title>

          <para>
          Die UML selbst ist ein offener Standard. ArgoUML hat überall versucht, 
          offene Standards für alle seine Schnittstellen zu verwenden.
          </para>

          <para>
            Der Hauptvorteil am Festhalten an offenen Standards ist, dass es die 
            einfache Zusammenarbeit zwischen Anwendungen erlaubt und die 
            Möglichkeit eröffnet, von einer Anwendung zu einer anderen 
            überzugehen, sofern dies notwendig ist.
          </para>

          <sect3>

            <title>XML Metadata Interchange (XMI)</title>

            <para><emphasis>XML Metadata Interchange (XMI)</emphasis> 
            ist der Standard für das Speichern der Metadaten, die ein bestimmtes 
            UML-Modell bilden. Im Prinzip erlaubt er, das in ArgoUML erstellte 
            Modell in ein anderes Tool zu importieren.
            </para>
            <indexterm><primary>XMI</primary></indexterm>

            <para>
            Dies hat klare Vorteile, die es der UML erlaubt, ihr Ziel, der 
            Standard für die Kommunikation zwischen Designern zu sein, zu 
            erreichen.
            </para>

            <para>
              Die Realität ist nicht sehr gut.
              Vor UML 2.0 enthielten die XMI-Dateien keine Informationen über 
              die grafische Darstellung der Modelle, so dass das Diagramm-
              Layout verloren ging. ArgoUML umgeht dies, indem es die grafische 
              Information separat vom Modell speichert. 
              (siehes <xref linkend="s3.tut.loadsave"/>).
            </para>

          </sect3>

          <sect3>

            <title>Grafik-Formate - EPS, GIF, PGML, PNG, PS, SVG</title>

            <itemizedlist>

              <listitem>
              <para>
                Die <ulink url="http://en.wikipedia.org/wiki/Encapsulated_PostScript"><emphasis>Encapsulated
                PostScript (EPS)</emphasis></ulink>-Datei weist zusätzliche 
                Einschränkungen auf. Diese Einschränkungen sind dazu gedacht, 
                es der Software einfacher zu machen, eine EPS-Datei in ein 
                anderes PostScript-Dokument einzubetten.
              </para>
              <indexterm><primary>EPS</primary></indexterm>
              </listitem>

              <listitem>
              <para>
                Das <ulink url="http://en.wikipedia.org/wiki/GIF"><emphasis>Graphics
                Interchange Format (GIF)</emphasis></ulink> ist ein patentiertes 
                Format, obgleich die Patente im August 2006 ausliefen.
              </para>
              <indexterm><primary>GIF</primary></indexterm>
              </listitem>

              <listitem>
              <para>
                <ulink url="http://en.wikipedia.org/wiki/PGML">
                <emphasis>Precision Graphics Markup Language (PGML)</emphasis></ulink>
                ist eine XML-basierte Sprache zur Darstellung von Vektorgrafiken.
                Sie war ein W3C-Entwurf, der aber nicht als Empfehlung 
                übernommen wurde. PGML und VML, andere XML-basierte Vektor-
                Grafik-Sprachen wurden später miteinander verknüpft und 
                verbessert, um daraus SVG (siehe unten) zu erzeugen.
              </para>
              <indexterm><primary>PGML</primary></indexterm>
              </listitem>
                
              <listitem>
              <para>
                <ulink url="http://en.wikipedia.org/wiki/PNG">
                <emphasis>Portable Network Graphics (PNG)</emphasis></ulink> 
                ist ein ISO/IEC-Standard (15948:2004) und auch eine W3C-
                Empfehlung. PNG ist ein Bitmap-Bildformat, das eine verlustlose 
                Datenkompression verwendet. PNG wurde eingesetzt, um das GIF-
                Format durch ein Bildformat zu ersetzen, das bei seinem Einsatz 
                keine Patentlizenz erforderlich macht.
                PNG wird offiziell "ping" ausgesprochen, wird aber auch sehr oft 
                buchstabiert &mdash; wahrscheinlich, um eine Verwechslung mit 
                dem Netzwerktool ping zu vermeiden.
                PNG wird durch die libpng-Referenzbibliothek unterstützt, eine 
                plattformunabhängige Bibliothek, die C-Funktionen für die 
                Anwendung von PNG-Bildern enthält.
               </para>
               <indexterm><primary>PNG</primary></indexterm>
               </listitem>

              <listitem>
              <para>
                <ulink url="http://en.wikipedia.org/wiki/PostScript/">
                  <emphasis>PostScript (PS)</emphasis>
                </ulink> ist eine Seitenbeschreibungs- und Programmiersprache, 
                die primär im elektronischen und Desktop-Publisching-Bereichen 
                eingesetzt wird. 
              </para>
                <indexterm><primary>PS</primary></indexterm>
              </listitem>

              <listitem>
              <para>
                <ulink url="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">
                <emphasis>Scalable Vector Graphics (SVG)</emphasis></ulink>
                ist eine XML-Markup-Sprache für die Beschreibung 
                zweidimensionaler Vektorgrafiken, sowohl statisch als auch 
                animiert und entweder deklarativ oder in Schriftform.
                Sie ist ein offener Standard, der durch das World Wide Web 
                Konsortium erstellt wurde. Der Verwendung von SVG im Web 
				befindet sich in seinem Anfangsstadium.
                Es gibt eine grosse Trägheit hinsichtlich der langandauernden 
                Nutzung reiner Raster- und anderer Formate wie Macromedia Flash 
                oder Java-Applets. Aber auch die Browserunterstützung ist 
                uneinheitlich, mit  eingebauter Unterstützung im Opera und 
                Firefox, während Safari und der Internet Exlorer ein Plugin 
                benötigen.
                Siehe PGML weiter oben.
              </para>
              <indexterm><primary>SVG</primary></indexterm>
              </listitem>

            </itemizedlist>

          </sect3>

          <sect3>

            <title>Object Constraint Language (OCL)</title>
            <para>
              <ulink url="[http://en.wikipedia.org/wiki/Object_Constraint_Language">
              Die <emphasis>Object Constraint Language (OCL)</emphasis></ulink>
              ist eine deklarative Sprache zur Beschreibung von Regeln, die auf 
              UML-Modelle angewendet werden.
              Sie wurde durch IBM entwickelt und ist jetzt Teil des UML-Standard.
              Ursprünglich war OCL nur als formale Spezifikationssprachen-
              Erweiterung von UML gedacht.
              OCL kann jetzt mit jedem Meta-Object Facility (MOF) konformen 
              Metamodell einschliesslich UML angewendet werden.
              Die Object Constraint Language ist eine präzise Textsprache, die 
              Randbedingungen und Objekt-Abfrageausdrücke für jedes MOF- oder 
              Meta-Modell enthält, die nicht auf andere Art durch eine Diagramm-
              Notation ausgedrückt werden können.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>100% reines Java</title>

          <para>
          Java wurde als interpretierende Sprache erdacht. Sie hat keinen 
          Compiler, der Code für jede beliebige Zielmaschine erzeugt. Sie 
          übersetzt den Code für sein eigenes Ziel, der <emphasis>Java Virtual 
          Machine (JVM)</emphasis>.
          </para>

          <para>
          Das Schreiben eines Interpreters für eine JVM ist sehr viel leichter, 
          als das Schreiben eines Compilers und solche Maschinen sind jetzt in 
          fast jedem Web Browser eingebaut. Im Ergebnis können die meisten 
          Maschinen Java, ohne dass es weiterer Arbeiten bedarf.
          </para>

          <para>
          (Für den Fall, dass Sie sich wundern, warum nicht alle Sprachen so 
          sind wie diese. Dies ist so, weil interpretierende Sprachen langsamer 
          sind als übersetzende Sprachen. Mit der hohen Leistung moderner 
          PC&apos;s und dem Handlungszwang nach Portabilität ist diese 
          Einschränkung für viele Applikationen trotzdem lohnenswert.
          Darüber hinaus können moderne Multi-Cache-Systeme bei dichteren Code 
          produzierenden interpretierenden Sprachen bedeuten, dass Sie nicht 
          mehr viel langsamer sind.
          </para>

          <para>
          Durch die Wahl, ArgoUML in reinem Java zu schreiben, wird ArgoUML für 
          sehr viele Anwender mit einem minimalem Aufwand unmittelbar verfügbar.
          </para>

        </sect2>

        <sect2>

          <title>Open Source</title>

          <para>
          ArgoUML ist ein <emphasis>Open Source</emphasis>-Projekt. Das bedeutet, 
          jeder kann eine freie Kopie des Quellcodes haben, diesen ändern und 
          für neue Zwecke einsetzen usw.. Die einzige (Haupt-) Bedingung ist, 
          dass Sie Ihren Code auf die gleiche Weise anderen zur Verfügung 
          stellen. Die genaue Ausprägung, was Sie tun können und was nicht, 
          variiert von Projekt zu Projekt, aber das Prinzip ist das gleiche.
          </para>

          <para>
            Der Vorteil ist, dass ein kleines Projekt wie ArgoUML immer für 
            zusätzliche Unterstützung offen ist. Insbesondere für diejenigen, 
            die Ihre Ideen einbringen, wie das Programm verbessert werden kann.
            Jederzeit können 10, 15, 20 oder mehr Personen signifikante 
            Beiträge zu ArgoUML leisten. Dies kommerziell zu machen, würde mehr 
            als 1 Mio. $ pro Jahr kosten.
          </para>

          <para>
          Es ist aber nicht nur der Geist reiner Uneigennützigkeit. Mitzuarbeiten 
          ist ein Weg <quote>nebenbei</quote> mehr über führende Software zu 
          lernen. Es ist ein Weg, eine Menge Sichtbarkeit (über 1.125.000 
          Personen haben ArgoUML Ende 2005 heruntergeladen) zu erhalten. Als 
          Resüme ist das eine sehr gute Erfahrung und eine Menge Arbeitgeber 
          sehen Sie!
          </para>

          <para>Und es ist hervorragend für Ihr Ego!</para>

          <para>Open Source schliesst das Geld verdienen nicht aus.  
          Gentleware <ulink url="http://www.gentleware.com">
          www.gentleware.com</ulink> verkauft eine kommerzielle Version von 
          ArgoUML: Poseidon. Deren Angebot ist nicht ein Stück privaten Codes. 
          Es ist der kommerzielle Support, der das Risiko bei der Nutzung von 
          ArgoUML in einer kommerziellen Entwicklung reduziert und es dem 
          Kunden erlaubt, die Vorteile von ArgoUML&apos;s führender Technologie 
          zu nutzen.
          </para>

        </sect2>

      </sect1>

      <sect1 id="tut.basics">

        <title>ArgoUML Grundlagen</title>

        <para>
        Das Ziel dieses Abschnittes ist es, Sie in die Lage zu versetzen mit 
        ArgoUML zu starten. Er zeigt Ihnen, wie Sie den Code bekommen und 
        starten können.
        </para>

        <sect2>

          <title>Gestartet bekommen</title>

          <sect3 id="s3.tut.system.requirements">

            <title>Systemanforderungen</title>

            <para>
            Da ArgoUML in 100% reinem Java geschrieben ist, sollte es auf jeder 
            Maschine mit installiertem Java laufen. Es wird Java, Version 1.4 
            oder höher benötigt. Sie sollten es zu diesem Zeitpunkt bereits 
            haben, aber falls nicht, können Sie es von 
            <ulink url="http://www.java.com">www.java.com</ulink> frei 
            herunterladen.
            Beachten Sie, dass Sie nur die Java Runtime Umgebung (JRE) benötigen.
            Es gibt keine Notwendigkeit das gesamte Java Development Kit (JDK) 
            herunterzuladen.
            </para>

            <para>
            ArgoUML benötigt eine vernünftige Rechenleistung. Einen 
            PC mit einem 200 MHz-Prozessor, 64MB RAM und 10 MB verfügbaren 
            Speicherplatz auf der Festplatte sollten ausreichen. Laden Sie den 
            Code im Abschnitt Download der Projekt-Webseite 
            <ulink url="http://argouml.tigris.org">argouml.tigris.org</ulink> 
            herunter. Wie im nächsten Abschnitt beschrieben, wählen Sie die 
            Version aus, die Ihren Ansprüchen am Besten genügt.
            </para>

          </sect3>

          <sect3>

            <title>Download-Optionen</title>

            <para>Es gibt drei Optionen, wie Sie ArgoUML bekommen können.</para>

            <orderedlist>

              <listitem>

                <para>
                Sie starten ArgoUML direkt von der Web Seite mit Hilfe von Java 
                Web Start. Dies ist die einfachste Möglichkeit.
                </para>

              </listitem>

              <listitem>

                <para>
                Sie laden den binären, ausführbaren Code herunter. Dies ist die 
                richtige Option, wenn Sie beabsichtigen, ArgoUML regulär zu 
                benutzen.
                </para>

              </listitem>

              <listitem>

                <para>
                  Sie laden sich den Quellcode mit Hilfe von CVS herunter und 
                  erzeugen sich Ihre eigene Version. Wählen Sie diese Option, 
                  wenn Sie sich ansehen wollen wie ArgoUML intern arbeitet oder 
                  wenn Sie sich als Entwickler einbringen wollen. Diese Option 
                  erfordert das vollständige JDK 
                  (siehe <xref linkend="s3.tut.system.requirements"/>).
                </para>
                <indexterm><primary>Build</primary></indexterm>

              </listitem>

            </orderedlist>

            <para>
            Alle drei Optionen sind über die Projekt-Webseite 
            <ulink url="http://argouml.tigris.org">argouml.tigris.org</ulink> 
            frei verfügbar.
            </para>

          </sect3>

          <sect3>

            <title>ArgoUML mit Java Web Start aufrufen</title>

            <para>Hierfür sind zwei Schritte auszuführen.</para>

            <orderedlist>

              <listitem>

                <para>
                Sie installieren Java Web Start auf Ihrem Rechner. Java Web 
                Start ist unter
                <ulink url="http://java.sun.com/products/javawebstart">
                java.sun.com/products/javawebstart</ulink> , oder über den 
                <literal>Java Web Start</literal>-Link auf der ArgoUML 
                <ulink url="http://argouml.tigris.org">Home 
                page</ulink> verfügbar.
                </para>

              </listitem>

              <listitem>

                <para>
                Sie klicken auf den Link <literal>Launch latest stable 
                release</literal> auf der ArgoUML 
                <ulink url="http://argouml.tigris.org">Home 
                page</ulink>.
                </para>

              </listitem>

            </orderedlist>

            <para>
            Java Web Start wird ArgoUML herunterladen, zwischenspeichern und das 
            erste Mal starten. Bei darauf folgenden Starts prüft es, ob ArgoUML 
            aktualisiert wurde, lädt nur die aktualisierten Teile herunter und
            startet es. Die ArgoUML <ulink url="http://argouml.tigris.org">
            Home page</ulink> enthält weitere Details, wie man ArgoUML mit der 
            Java Web Start-Konsole startet.
            </para>

          </sect3>

          <sect3>

            <title>Die binäre, ausführbare Datei herunterladen</title>

            <para>
            Wenn Sie das Herunterladen der binären, ausführbaren Datei auswählen, 
            können sie wählen, ob Sie die letzte stabile Version (die 
            wahrscheinlich zuverlässiger ist, aber nicht alle Features aufweist) 
            oder die aktuelle Version (die weniger zuverlässig ist, aber mehr 
            Features aufweist) herunterladen wollen. Wählen Sie dies 
            entsprechend Ihrer Situation aus.
            </para>

            <para>
            ArgoUML steht als <literal>.zip</literal> oder <literal>tar.gz
            </literal> Variante bereit. Wählen Sie die erste Variante, wenn Sie 
            Microsoft Windows Anwender sind und die letzte, wenn Sie mit einer 
            UNIX-Variante arbeiten. Das Entpacken erfolgt wie nachfolgend 
            beschrieben.
            </para>

            <itemizedlist>

              <listitem>

                <para>
                Bei Windows. Entpacken Sie die <literal>.zip</literal>-Datei mit 
                WinZip oder einer späteren Version von Windows (ME, XP) in ein 
                Verzeichnis Ihrer Wahl.
                </para>

              </listitem>

              <listitem>

                <para>
                Bei Unix. Nutzen Sie GNU tar, um die Dateien in ein Verzeichnis 
                Ihrer Wahl zu entpacken. 
                </para>
                <para><literal>tar&nbsp;zxvf&nbsp;&lt;file&gt;.tar.gz</literal>. 
                </para>
                <para>
                Wenn Sie eine ältere Version von tar 
                haben, ist die <literal>z</literal>-Option nicht verfügbar. 
                Benutzen Sie in diesem Fall 
                </para>
                <para>
                <literal>gunzip&nbsp;&lt;&nbsp;file.tar.gz&nbsp;|&nbsp;tar&nbsp;
                xvf&nbsp;-</literal>.
                </para>

              </listitem>

            </itemizedlist>

            <para>
            Sie sollten jetzt in dem Verzeichnis eine Reihe von <literal>.jar
            </literal>-Dateien und die Datei <literal>README.txt</literal> 
            vorfinden.
            </para>

          </sect3>

          <sect3 id="s4.probsolving">

            <title>Probleme beim Herunterladen</title>

            <para>
            Wenn das Herunterladen vollständig abbricht und Sie keine lokale 
            Unterstützung haben, versuchen Sie es auf der Webseite 
            <ulink url="http://argouml.tigris.org/faqs/users.html">
            FAQ</ulink>. Wenn das Problem mit Hilfe dieser Unterstützung nicht 
            gelöst werden kann, versuchen Sie es über die ArgoUML Mailingliste 
            für Anwender. 
			</para>

            <para>
            Sie können sich in die Mailingliste auf der Projektseite 
            <ulink url="http://argouml.tigris.org">
            argouml.tigris.org</ulink> eintragen lassen, oder eine leere 
            Nachricht an <ulink url="mailto:users@argouml.org">
            users@argouml.org</ulink> mit dem Betreff <literal>subscribe
            </literal> senden.
            </para>

            <para>
            Sie können dann Ihr Problem an <ulink url="mailto:users@argouml.org">
            users@argouml.org</ulink> senden und darauf warten, dass Ihnen andere 
            Anwender helfen.
            </para>

            <para>
            Die Anwender-Mailingliste ist eine exzellente Einführung für eigene 
            Aktivitäten im Projekt. Wenn Sie noch mehr eingebunden werden 
            wollen, gibt es zusätzliche Mailinglisten, welche die Entwicklung des 
            Produktes sowie Erweiterungen in aktuellen und in künftigen 
            Releases betreffen.
            </para>

          </sect3>

          <sect3>

            <title>ArgoUML starten</title>

            <para>
            Wie Sie ArgoUML starten, hängt davon ab, ob Sie Microsoft Windows 
            oder eine Unix-Variante verwenden.
            </para>

            <itemizedlist>

              <listitem>

                <para>
                  Bei Windows. Rufen Sie die MSDOS-Eingabeaufforderung auf, z.B. 
                  durch Start/Ausführen mit <quote>command</quote>. In dem 
                  Fenster wechseln Sie in das Verzeichnis, in dem sich die 
                  ArgoUML-Dateien befinden und geben Sie 
                  </para>
                  <para>
                  <literal>java -jar argouml</literal> 
                  </para>
                  <para>
                  ein. Diese Methode hat den Vorteil, 
                  dass die Fortschritts- und Debug-Informationen im DOS-Fenster 
                  angezeigt werden. Als Alternative erstellen Sie eine Batch-
                  Datei (.bat), die das oben angeführte Kommando enthält und 
                  verlinken diese mit dem Desktop. Die Batchdatei sollte mit 
                  einer <quote>pause</quote>-Anweisung enden, für den Fall, dass 
                  Debug-Informationen während der Ausführung erzeugt werden. 
                  Auf einigen Systemen funktioniert auch ein einfacher (Doppel)-
                  Klick auf die <literal>argouml.jar</literal>-Datei. Auf 
                  anderen wird damit ein Zip-Tool aufgerufen. Sehen Sie in der 
                  Beschreibung zum Betriebssystem oder in der Hilfe nach, wie 
                  dies zu konfigurieren ist.
                  </para>

              </listitem>

              <listitem>

                <para>
                  Bei Unix. Öffnen Sie ein Shell-Fenster und geben Sie 
                </para>
                <para>
                  <literal>java -jar argouml</literal> 
                </para>
                <para>
                  ein.
                </para>

              </listitem>

            </itemizedlist>

          </sect3>

          <sect3>

            <title>Probleme beim Starten von ArgoUML</title>

            <para>
              Wenn Sie ArgoUML erfolgreich heruntergeladen haben, ist es 
              ungewöhnlich, wenn Probleme auftreten.
              Wenn Sie das Problem nicht lösen können, versuchen Sie es über die 
              Anwender-Mailingliste (siehe <xref linkend="s4.probsolving"/>).
            </para>

            <itemizedlist>

              <listitem>

            <para>
              Falsche JRE.
              Ein häufiger Grund ist eine veraltete Java Runtime Umgebung (es 
              muss die Version 1.4 oder höher sein).
            </para>

              </listitem>

              <listitem>

                <para>
                  Falsche Sprache.
                  Wenn das Produkt in einer Sprache startet, die sie nicht lesen 
                  können oder wollen, gehen Sie in das zweite Menü von links. 
                  Wählen Sie den untersten Menüeintrag aus.
                  <xref linkend="fig.prob.run.02"/> zeigt dies auf russisch.
                  Dann klicken Sie auf den Reiter <quote>Erscheinungsbild
                  </quote>.
                  Öffnen Sie die Drop-Down-Liste 
                  <xref linkend="fig.prob.run.02"/> und wählen Sie eine Sprache 
                  aus.
                  Beachten Sie, dass die Namen der Sprache in der jeweiligen 
                  Sprache angezeigt werden. Die dargestellte, ausgewählte 
                  Sprache ist Deutsch.
                  Damit die Änderungen wirksam werden, müssen Sie ArgoUML 
                  beenden und neu starten.
                  Verwenden Sie die Taste X oben rechts.
                </para>

              </listitem>

            </itemizedlist>

            <figure id="fig.prob.run.01">

              <title>Den Einstellungs-Assistenten finden</title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/langprob01.png" format="PNG" />
              		</imageobject>
              	</mediaobject></screenshot>
            </figure>

            <figure id="fig.prob.run.02">

              <title>Die Sprache im Erscheinungsbild-Fenster einstellen</title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/langprob02.png" format="PNG" />
              		</imageobject>
              	</mediaobject></screenshot>
            </figure>
          </sect3>

        </sect2>

        <sect2 id="tut.user.iface">

          <title>Die ArgoUML-Anwenderschnittstelle</title>

          <para>
            Bevor Sie mit der Fallstudie beginnen, müssen Sie sich noch mit der 
            Anwenderschnittstelle vertraut machen.
            Lesen Sie hierfür die Einleitung zur Anwenderschnittstellen-
            Referenz. Siehe <xref linkend="ch.ref.ui"/>.
            Sie sollten auch <xref linkend="s1.ref.mouse"/> lesen.
          </para>

          <para>
            Wenn Sie dieses Übungshandbuch durchgehen, wird Ihnen erläutert, was 
            Sie tun müssen. Wie Sie es tun müssen, steht oftmals in der Referenz 
            zur Anwenderschnittstelle.
            Zu diesem Zeitpunkt ist es nicht notwendig, dass Sie die gesamte 
            Referenz durchlesen. Aber Sie sollten tief genug eingestiegen sein, 
            damit Sie Dinge in der Referenz finden können.
            An den entsprechenden Punkten im Übungshandbuch wird der Versuch 
            unternommen, Sie direkt zu den entsprechenden Teilen der Referenz zu 
            führen.
          </para>

          <para>
            <xref linkend="fig.tut.startup"/>, zeigt das ArgoUML-Fenster, wie es 
            beim ersen Aufruf angezeigt wird.
          </para>

          <figure id="fig.tut.startup">

            <title>Erstmaliges ArgoUML-Fenster</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
             			fileref="images/tutorial/startup_de.png"
             			format="GIF"/>
             		</imageobject>
             	</mediaobject>
             </screenshot>

          </figure>

          <para>
            Ziehen Sie die vertikalen Fensterteiler vorwärts und rückwärts.
            Ziehen Sie die horizontalen Fensterteiler hoch und runter.
            Spielen Sie etwas mit den kleinen Pfeilen links oder oben in den 
            Fensterteilern.
            Siehe <xref linkend="s1.ref.panes"/>.
          </para>

          <sect3 id="tut.menu.toolbars">

            <title>Die Menü- und die Symbolleisten</title>

            <indexterm><primary>Menüleiste</primary></indexterm>
            <indexterm><primary>Symbolleiste</primary></indexterm>
            <para>
              Die Menüleiste und die Symbolleisten ermöglichen Ihnen den 
              Zugriff auf alle Features von ArgoUML.
              Menü- und Werkzeugoptionen sind per Konvention abgeblendet, wenn 
              sie nicht verfügbar (ausgeschaltet) sind und Menüelemente, die 
              eine Dialogbox aufrufen, weisen drei Punkte auf (...).
              Zum jetzigen Zeitpunkt sollten Sie <xref linkend="ch.ref.toolbar"/>
              und <xref linkend="ch.ref.menu"/> lesen.
            </para>

            <para>
              Menü: <emphasis>Datei</emphasis>.
                  <indexterm><primary>Menü: Datei</primary></indexterm>
                  Die Elemente des Standard-Datei-Menü&apos;s enthalten keine 
                  Überraschungen. Wenn sie benötigt werden, werden wir sie 
                  einfach verwenden, ohne vorher zu zeigen wie sie arbeiten.
                  Eine Vielzahl anderer, ArgoUML-spezifische Aktionen sind hier 
                  verfügbar. Jetzt werden wir sie allerdings überspringen.
            </para>

            <orderedlist>

              <listitem>

                    <para>
                      <emphasis>Datei=&gt;Projekt speichern rückgängig machen.
                      </emphasis>
                      Dies hat den gleichen Effekt wie Datei=&gt;Projekt öffnen... 
                      und dann das aktuelle Projekt auswählen.
                    </para>

              </listitem>

              <listitem>

                    <para>
                      <emphasis>Export/Import.</emphasis>
                      Markieren Sie die Projektzeile oben im Explorer. 
                      Wenn Sie diese nicht geändert haben, sollte sie 
                      "unbenanntes Modell" lauten.
                      Führen Sie <emphasis>Datei=&gt;Exportiere XMI</emphasis> 
                      aus und geben Sie als Dateiname "DeleteThis" im 
                      Dateiauswahl-Fenster ein.
                      Markieren Sie den Reiter "Eigenschaften" im Detail-Fenster 
                      und ändern Sie den Namen des Modelles.
                      Führen Sie die <emphasis>Datei=&gt;Import XMI</emphasis>-
                      Aktion aus. 
                      Sie wird sie fragen, ob Sie Ihre vorher gemachten 
                      Änderungen speichern möchten.
                      Klicken Sie auf "Nein" und markieren Sie dann die 
                      "DeleteThis.xmi"-Datei, die Sie gerade erzeugt haben.
                      Überprüfen Sie den Namen des importierten Modelles mit dem 
                      von Ihnen gespeicherten.
                    </para>

              </listitem>

              <listitem>

                    <para>
                      <emphasis>Datei=&gt;Dateien importieren... .</emphasis>
                      Wir werden dies später behandeln.
                      Sie können dies jetzt nicht testen, es sei denn, Sie haben 
                      Java-Quellcode zur Hand.
                    </para>

              </listitem>

              <listitem>

                    <para>
                      <emphasis>Datei=&gt;(Alle) Grafik(en) exportieren... .
                      </emphasis>
                      Markieren Sie im Explorer-Fenster eines der Diagramme.
                      Entweder das "Klassendiagramm 1" oder 
                      "Anwendungsfalldiagramm 1" (dabei wurde unterstellt, dass 
                      Sie diese nicht umbenannt oder gelöscht haben).
                      Führen Sie <emphasis>Datei=&gt;Grafik exportieren...
                      </emphasis> aus.
                      Wenn sich die Dateiauswahl öffnet, steht der letzte 
                      gespeicherte Name im Feld Dateiname (auch von einen 
                      Projekt, das nicht mehr geöffnet ist).
                      Die Dateiauswahl ermöglicht es Ihnen, eine Reihe von 
                      Formaten auszuwählen.
                      Öffnen Sie das Kombinationsfeld Dateityp und treffen Sie 
                      Ihre Wahl.
                      Brechen Sie ab, wenn nichts sinnvolles zum Speichern 
                      vorhanden ist.
                      Führen Sie <emphasis>Datei=&gt;Alle Grafiken 
                      exportieren...</emphasis> aus.
                      Beachten Sie, dass Sie zum jetzigen Zeitpunkt keinen 
                      Dateinamen und kein Dateiformat auswählen können. ArgoUML 
                      wird Ihnen nur die Eingabe eines Verzeichnisses erlauben.
                      ArgoUML wird dann eine Datei für jedes Ihrer Diagramme 
                      erzeugen. Der Diagrammname wird der Dateiname und die 
                      Dateierweiterung wird durch das Standard-Grafik-Format 
                      bestimmt. Obwohl Sie keine Dateinamen im Browserfenster 
                      auswählen können, können Sie einen Dateinamen in das 
                      Editierfeld eingeben.
                      Aber wenn Sie das tun, wird nichts passieren.
                      Sie werden mehr über das Standard-Grafik-Format erfahren, 
                      wenn wir zum <emphasis>Bearbeiten</emphasis>-Menü gehen.
                    </para>

              </listitem>

              <listitem>

                    <para>
                      <emphasis>Datei=&gt;Notation.</emphasis>
                      Wir gehen jetzt ein Stück weiter und erstellen ein kleines 
                      Klassendiagramm, so dass wir sehen können, was es mit der 
                      Notation auf sich hat.
                      Im Explorer markieren oder erzeugen Sie ein 
                      Klassendiagramm. Siehe 
                      <xref linkend="s1.ref.create.diagram.menu"/> 
                      und <xref linkend="s2.ref.edit_pane_drawing_tools"/>.
                      Erstellen Sie eine Klasse im Diagramm.
                      Gehen Sie in das Detailfenster und erstellen Sie ein 
                      Attribut in der Klasse.
                      Siehe <xref linkend="s2.ref.class_property_toolbar"/>.
                      Im Register Eigenschaften des Detailfensters ändern Sie 
                      die Kardinalität auf "1..*".
                      Jetzt gehen Sie in das <emphasis>Datei</emphasis>-Menü und 
                      wählen <emphasis>Notation</emphasis> aus. Wechseln Sie 
                      zwischen UML und Java und beobachten Sie die Änderungen 
                      im Editierfenster.
                    </para>

              </listitem>

              <listitem>

                    <para>
                      <emphasis>Datei=&gt;Projekt-Einstellungen.</emphasis>
                      Im Dialog Projekt-Einstellungen ist es möglich, die 
                      projektspezifischen Einstellungen zu konfigurieren. Er 
                      enthält Register für den Anwender, die Profile, die 
                      Notationen und die Darstellung der Diagramme. Um zum 
                      Beispiel die Sprach-Notation im Dialog Projekt-Einstellungen 
                      zu ändern klicken Sie auf
                      <emphasis>Datei=&gt;Projekt-Einstellungen...</emphasis> und 
                      wählen Sie den Register Notationen aus.
                      Stellen Sie die Notation auf UML1.4 ein.
                      Markieren Sie alle Optionen und klicken Sie auf Übernehmen 
                      und beobachten Sie die Änderungen im Diagramm.
                      Stellen Sie die Standard-Schattenbreite auf 8 ein und 
                      klicken Sie auf Übernehmen.
                      Beachten Sie, es passiert nichts.
                      Das ist so, weil Sie nicht die Schattenbreite veränderten, 
                      sondern den Standardwert.
                      Wenn Sie beim nächsten Mal eine Klasse in einem Diagramm 
                      erstellen, wird dieser neue Schatten erscheinen.
                    </para>

              </listitem>

            </orderedlist>

            <para>
              Menü: <emphasis>Bearbeiten</emphasis>.
                  <indexterm><primary>Menü: Bearbeiten</primary></indexterm>
                  Das Menü Bearbeiten sieht nicht so aus, wie Sie es von anderen 
                  Produkten gewohnt sind.
                  Es gibt keine Aktionen "Ausschneiden", "Kopieren" oder 
                  "Einfügen". Alle Aktionen sind ArgoUML-spezifisch, so dass wir 
                  Sie alle im Detail behandeln.
            </para>

            <orderedlist>

              <listitem>

                <para>
                  <emphasis>Bearbeiten=&gt;Markieren.</emphasis>
                </para>
                <itemizedlist>
                  <listitem>
                    <para>
                      Markieren Sie ein Klassendiagramm im Explorer. Ist keines 
                      vorhanden, erstellen Sie eines mit Hilfe von 
                      <emphasis>Neues Diagramm=&gt;Klassendiagramm</emphasis>.
                      Erstellen Sie mit Hilfe des Klassenwerkzeuges drei Klassen, 
                      wie in der Referenz zur Anwenderschnittstelle unter 
                      klassendiagrammspezifische Werkzeuge beschrieben.
                      Führen Sie einen Doppelklick aus und klicken Sie dann im 
                      Editierfenster für Klassendiagramme auf die drei 
                      unterschiedlichen Klassen.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Durch klicken auf das "Markieren"-Werkzeug machen Sie den 
                      aktuellen Modus rückgängig. Siehe "Durch klicken auf das 
                      "Markieren"-Werkzeug den aktuellen Modus rückgängig machen".
                      <xref linkend="s2.ref.edit_layout"/>.
                      Dies erlaubt es Ihnen auch andere Dinge, wie das Erstellen 
                      von Klassen im Editierfenster auszuführen.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Jede Klasse im Diagramm besteht aus drei vertikalen 
                      Abschnitten.
                      Führen Sie einen Doppelklick auf den obersten Abschnitt 
                      aus und geben Sie einen Namen für die Klasse ein. 
                      Anschliessend betätigen Sie die Enter-Taste.
                      Benennen Sie die Klassen jetzt mit "A", "B" und "C".
                      Markieren Sie die Klasse A, dann die Klasse B und dann die 
                      Klasse C, entweder im Editierfenster oder im Explorer.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Führen Sie den Befehl
                      <emphasis>Bearbeiten=&gt;Markieren=&gt;Zurück</emphasis> 
                      aus.
                      Jetzt sollte die Klasse B markiert sein.
                      Führen Sie erneut 
                      <emphasis>Bearbeiten=&gt;Markieren=&gt;Zurück</emphasis> 
                      aus.
                      Die Klasse A sollte jetzt markiert sein.
                      Abschliessend führen Sie den Befehl 
                      <emphasis>Bearbeiten=&gt;Markieren=&gt;Vorwärts</emphasis> 
                      aus.
                      Die Klasse B sollte erneut markiert sein. 
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Führen Sie jetzt den Befehl
                      <emphasis>Bearbeiten=&gt;Markieren=&gt;Umkehren</emphasis> 
                      aus.
                      Jetzt sollten die Klassen A und C markiert sein.
                      Führen Sie erneut den Befehl 
                      <emphasis>Bearbeiten=&gt;Markieren=&gt;Umkehren</emphasis> 
                      aus.
                      Die Klasse B sollte wieder markiert sein.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Führen Sie den Befehl
                      <emphasis>Bearbeiten=&gt;Markieren=&gt;Aus Diagramm 
                      entfernen</emphasis> aus.
                      Beachten Sie, dass die Klasse B aus dem Diagramm 
                      verschwunden ist, aber im Explorer immer noch existiert.
                    </para>
                  </listitem>
                  <listitem>
                    <para>
                      Markieren Sie die Klasse B im Explorer, klicken Sie mit 
                      der rechten Maustaste auf die Klasse und wählen Sie 
                      "Zum Diagramm hinzufügen" aus.
                      Bewegen Sie den Cursor in das Editierfenster und klicken 
                      mit der linken Maustaste auf den Teil des Diagrammes, wo 
                      Sie glauben, dass die Klasse am Besten hinpasst.
                      Sie sollten die Klasse an die Stelle zurückbringen, von 
                      der Sie sie vorher aus dem Diagramm entfernt haben.
                      Führen Sie den Befehl
                      <emphasis>Bearbeiten=&gt;Markieren=&gt;Aus Modell 
                      entfernen</emphasis> aus.
                      Jetzt sollte die Klasse B sowohl aus dem Diagramm als 
                      auch aus dem Explorer verschwinden.
                    </para>
                  </listitem>
                </itemizedlist>
              </listitem>
              <listitem>
                <para>
                  <emphasis>Bearbeiten=&gt;Konfiguriere Perspektiven...
                  </emphasis>.
                  Lesen Sie <xref linkend="s1.ref.configure_perspectives"/>.
                  Wir werden dies zum jetzigen Zeitpunkt nicht vertiefen, da es 
                  sehr viel grösserer darzustellender Projekte bedarf, als wir 
                  Sie jetzt zur Verfügung haben.
                </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>Bearbeiten=&gt;Einstellungen...=&gt;Voreinstellungen
                  </emphasis>.
                  Geben Sie Hilfe=&gt;Über ArgoUML ein.
                  Sehen Sie sich das Bild im Register Logo an.
                  Dies wird als Startfenster bezeichnet.
                  Gehen Sie in Bearbeiten=&gt;Einstellungen...=&gt;
                  Voreinstellungen.
                  Schalten Sie die Optionsschaltfelder "Startfenster anzeigen" 
                  und "Gemeinsame Klassen im Voraus laden" aus.
                  Beenden Sie ArgoUML und starten Sie es erneut.
                  Beachten Sie, dass das Startfenster währends des Hochfahrens 
                  nicht mehr erscheint.
                </para>
              </listitem>
              <listitem><para>
                <emphasis>
                	Bearbeiten=&gt;Einstellungen...=&gt;Umgebung
                </emphasis>. Führen Sie den Befehl
                <emphasis>Datei=&gt;Grafik exportieren...
                </emphasis> aus und beobachten Sie die Dateierweiterung im 
                Dialogfeld "Dateityp" des Dateiauswahl-Dialoges.
                Gehen Sie in <emphasis>Bearbeiten=&gt;Einstellungen...=&gt;
                Umgebung</emphasis> und wählen einen anderen Wert für das 
                Standard-Grafik-Format aus.
                Klicken Sie auf "Übernehmen" und dann auf "OK". Gehen Sie zurück 
                in den <emphasis>Datei=&gt;Grafik exportieren...</emphasis>-
                Dialog und beachten Sie, dass das neue Format jetzt der Standard 
                ist. 
              </para></listitem>
              <listitem>
              <para>
                <emphasis>Bearbeiten=&gt;Einstellungen...=&gt;Benutzer</emphasis>
                . Geben Sie Ihren Namen und Ihre E-Mailadresse ein.
              </para>
              </listitem>
              <listitem><para>
                <emphasis>Bearbeiten=&gt;Einstellungen...=&gt;Erscheinungsbild
                </emphasis>.
                Ändern Sie "Aussehen" in "Metall".
                Beachten Sie, dass das Dialogfeld "Metall-Thema" aktiviert wird.
                Ändern Sie das Thema in "Sehr grosse Schrift".
                Klicken Sie auf "Übernehmen" und dann auf "OK".
                Beachten Sie, dass nichts passiert ist.
                Beenden Sie ArgoUML und starten Sie es erneut.
                Die Darstellung sollte deutlich anders aussehen.
                Machen Sie Ihre Änderungen rückgängig. Nehmen Sie Werte, die Sie 
                bevorzugen.
              </para></listitem>
              <listitem><para>
                <emphasis>Bearbeiten=&gt;Einstellungen...=&gt;Notationen
                </emphasis>.
                Bei den Menüelementen <emphasis>Datei=&gt;Notation</emphasis> 
                und <emphasis>Datei=&gt;Eigenschaften...</emphasis> spielten wir 
                bereits damit herum.
                Starten Sie eine weitere Instanz von ArgoUML und stellen Sie die 
                Grösse jeder Instanz so ein, dass Sie sie gleichzeitig ansehen 
                können. In einer Instanz stellen Sie die Notation auf UML (die 
                aktuelle Einstellung zeigt auch noch die Versionsnummer an), in 
                der anderen stellen Sie die Notation auf Java ein.
              </para>
              <para>
                In beiden tun Sie bitte folgendes.
                Schalten Sie alle Optionsschaltfelder ein.
                Führen Sie den Befehl <emphasis>Datei=&gt;Neu</emphasis> aus und 
                erstellen Sie eine Klasse in einem Klassendiagramm. 
                Erstellen Sie ein Attribut mit Hilfe eines Doppelklicks auf den 
                Abschnitt Attribute.
                Erstellen Sie eine Operation mit Hilfe eines Doppelklicks auf 
                den Abschnitt Operationen.
                Beobachten Sie die Unterschiede in den Darstellungen.
              </para></listitem>
              <listitem><para>
                <emphasis>Bearbeiten=&gt;Einstellungen...=&gt;Module</emphasis>.
                Dies ist zukünftige Arbeit.
                Wir wollen dies nicht mit dieser Version des Tutorials 
                vermischen.
              </para></listitem>
            </orderedlist>

            <para>
              Menü: <emphasis>Ansicht</emphasis>.
              <indexterm><primary>Menü: Ansicht</primary></indexterm>
              Dieses Menü erlaubt Ihnen zwischen Diagrammen hin- und 
              herzuschalten, Modellelemente in einem Modell aufzufinden, in ein 
              Diagramm hineinzuzoomen, das Gitter einzustellen, die Darstellung 
              des Seitenumbruches zu ändern und die XML-Darstellung des 
              Projektes anzuzeigen.
              Um zu einem definierten Punkt zurückzukehren, führen Sie 
              <emphasis>Datei=&gt;Neu...</emphasis> aus.
              Erstellen Sie je Diagramm ein Beispiel und führen Sie noch keine 
              Tätigkeit im Explorer aus.
              Um die Baumknoten zu expandieren, klicken Sie auf die (+)-Zeichen 
              im Explorer.
              Markieren Sie das entsprechende Klassendiagramm und vergeben Sie 
              einen Namen.
            </para>

            <orderedlist>
              <listitem><para>
                <emphasis>Ansicht=&gt;Gehezu Diagramm...</emphasis> blendet ein 
                Gehezu-Diagramm-Dialogfester auf.
                Markieren Sie den Eintrag Klassendiagramm und klicken Sie auf 
                die Schaltfläche "Gehe zur Auswahl".
                In der Spalte am rechten Rand sollten 0 Knoten und 0 Kanten 
                angezeigt werden.
                Klicken Sie auf die Schaltfläche "Schliessen".
                Im Fenster Details (Register Eigenschaften) geben Sie den Namen 
                "Blort" ein.
                Erstellen Sie im Klassendiagramm zwei Klassen (Siehe ...) und 
                gehen Sie wieder in <emphasis>Ansicht=&gt;Gehezu Diagramm...
                </emphasis>.
                Sie sollten jetzt 2 Knoten und 0 Kanten angezeigt bekommen.
                Klicken Sie erneut auf die Schaltfläche "Schliessen" und 
                verbinden Sie die Klassen mit einem der "Linien"-Elemente wie 
                Assoziation oder Vererbung.
                Gehen Sie erneut in <emphasis>Ansicht=&gt;Gehezu Diagramm...
                </emphasis> und Sie sollten 2 Knoten und 1 Kante(n) sehen.
                Klicken Sie erneut auf die Schaltfläche "Schliessen" und 
                erstellen Sie eine dritte Klasse.
                Gehen Sie mit der Maus in die Werkzeugleiste zur Schaltfläche 
                "Neue Beziehungsklasse".
                Klicken Sie dieses Werkzeug an und verbinden Sie die neue Klasse 
                mit einer der anderen.
                Nachdem Sie auf "Neue Beziehungsklasse" geklickt haben, bewegen 
                Sie die Maus über die neue Klasse. Halten Sie die Taste&nbsp;1 
                gedrückt. Bewegen Sie die Maus zur anderen Klasse und lassen Sie 
                die Taste&nbsp;1 los.
				Gehen Sie erneut in <emphasis>Ansicht=&gt;Gehezu Diagramm...
				</emphasis> und Sie sollten 3 Knoten und 2 Kante(n) sehen.
				Obwohl es eine Klasse ist und eine zweidimensionale Darstellung 
				aufweist, zählt sie als Kante und nicht als Knoten.
				Markieren Sie andere Einträge in diesem Fenster und klicken Sie 
				auf die Schaltfläche "Gehe zur Auswahl" im "Gehezu Diagramm"-
				Fenster. Beobachten Sie die Änderungen im Explorer.
              </para>
              </listitem>
              <listitem><para>
                <emphasis>Ansicht=&gt;Suchen....</emphasis>
                Zu diesem Zeitpunkt sollten sich drei normale Klassen und eine 
                Beziehungsklasse im Explorer befinden.
                Benennen Sie diese "AA", "AB", "B" und "C".
                Führen Sie eine <emphasis>Ansicht=&gt;Suchen...</emphasis>-
                Operation aus.
                Klicken Sie auf die Schaltfläche "Suchen".
                Beachten Sie, dass ein Register "* in *" erzeugt wurde.
                Dieses Register sollte sehr viele neue Dinge zeigen.
                Ändern Sie im "Im Diagramm"-Editor "*" in "B*" und klicken Sie 
                auf die Schaltfläche "Suchen". Beobachten Sie den Inhalt des 
                neuen Registers "* in B*".
                Sie sollten drei Klassen, die Verbindung (eine Assoziation) und 
                die Assoziationsklasse sehen.
                Markieren Sie in der Kombinationsliste "Element-Typ" das Element  
                "Schnittstelle" und klicken Sie auf die Schaltfläche "Suchen".
                Im neuen Register "* in B* Inte..." sollten keine Einträge 
                vorhanden sein, da wir keine Schnittstellen definiert haben.
                Markieren Sie in der Kombinationsliste "Element-Typ" das Element 
                "Klasse" und klicken Sie auf die Schaltfläche "Suchen".
                Im neuen Register "* in B* Class" sollte ein Eintrag weniger 
                vorhanden sein als im Register "* in B*".
                Wechseln Sie zwischen diesen beiden Registern hin und her und 
                beobachten Sie die Unterschiede.
                Markieren Sie in einigen dieser Register ein Element und klicken 
                Sie auf die Schaltfläche "Gehe zur Auswahl". Beobachten Sie die 
                Änderungen im Diagramm und im Explorer.
              </para>
              </listitem>
              <listitem>
              <para>
                <emphasis>Ansicht=&gt;Zoom.</emphasis>
                Als Ausnahme zur generellen Regel arbeitet das Symbolleisten-
                Equivalent von <emphasis>Ansicht=&gt;Zoom</emphasis> nicht auf 
                die gleiche Art und Weise wie das entsprechende Menüelement.
                Durch das Hervorheben von <emphasis>Ansicht=&gt;Zoom </emphasis> 
                erscheint ein Untermenü, welches die Elemente "Vergrössern", 
                "Rückgängig" und "Verkleinern" enthält.
                Klicken Sie mehrmals auf diese Elemente und beobachten Sie die 
                Effekte im Diagramm. Anschliessend klicken Sie auf die Zoom-
                Schaltfläche in der Werkzeugleiste.
                Es erscheint ein Schieberegler, dessen Zeiger Sie bewegen können.
                Verschieben Sie den Zeiger und bewegen Sie ihn nach oben und 
                nach unten und beobachten Sie dabei den Effekt auf das Diagramm.
              </para>
              </listitem>
              <listitem>
              <para>
                <emphasis>Ansicht=&gt;Raster einstellen.</emphasis>
              </para>
              </listitem>
              <listitem>
              <para>
                <emphasis>Ansicht=&gt;Einrasten einstellen.</emphasis>
              </para>
              </listitem>
              <listitem>
              <para>
                <emphasis>Ansicht=&gt;Seitenumbrüche.</emphasis>
              </para>
              </listitem>
              <listitem>
              <para>
                <emphasis>Ansicht=&gt;XML Dump.</emphasis>
              </para>
              </listitem>
            </orderedlist>

                <para>
                Menü: <emphasis>Neues Diagramm</emphasis>. Das Menü 
                <indexterm><primary>Neues Diagramm</primary></indexterm> 
                erlaubt es Ihnen, jedes der sieben von ArgoUML unterstützten 
                UML-Diagrammtypen (Klasse, Anwendungsfall, Zustands-, 
                Aktivitäts-, Kollaborations-, Verteilungs- und Sequenzdiagramm) 
                zu erstellen.
                </para>

                <para>
                Zustands- und Aktivitätsdiagramme können nur erstellt werden, 
                wenn eine Klasse oder ein Akteur markiert ist und die 
                relevanten Menüeinträge <emphasis>nicht</emphasis> deaktiviert 
                sind (unter diesen Umständen passiert nichts).
                </para>

                <para>
                Menü: <emphasis>Anordnen</emphasis>. Das Menü <emphasis>Anordnen
                </emphasis> erlaubt es Ihnen, Modellelemente im Diagramm 
                auszurichten, zu verteilen und neu anzuordnen und die Layout-
                Strategie für das Diagramm einzustellen.
                </para>

                <para>
                Menü: <emphasis>Generieren</emphasis>. Das Menü <emphasis>
                Generieren</emphasis> erlaubt es Ihnen, Java Code für die 
                markierten oder alle Klassen zu generieren.
                </para>

                <para>
                Menü: <emphasis>Kriterien</emphasis>. Das Menü <emphasis>
                Kriterien</emphasis> erlaubt es Ihnen, die Prüfkriterien ein- 
                und auszuschalten, die Wichtung der Designvorgaben und 
                Designzile festzulegen und die verfügbaren Kriterien anzusehen.
				</para>

                <para>
                Menü: <emphasis>Werkzeuge</emphasis>. Diese Menü ist dauerhaft
                <indexterm><primary>Menü: Werkzeuge</primary></indexterm>
                deaktiviert, es sei denn es sind Werkzeuge in Ihrer Version von 
                ArgoUML verfügbar.
                </para>

                <para>
                Menü: <emphasis>Hilfe</emphasis>.
                <indexterm><primary>Menü: Hilfe</primary></indexterm>
                Dieses Menü gibt Zugriff auf die Details, wer das System 
                erdachte und wo zusätzliche Hilfe gefunden werden kann.</para>

                <para>
                Werkzeugleiste: Datei.
                <indexterm><primary>Werkzeugleiste: Datei</primary></indexterm>
                Diese Werkzeugleiste enthält einige Werkzeuge des 
                Datei-Menü&apos;s.</para>

                <para>
                Werkzeugeleiste: Bearbeiten.
                <indexterm><primary>Werkzeugeleiste: Bearbeiten</primary></indexterm>
                Diese Werkzeugleiste enthält einige Werkzeuge des Bearbeiten-
                Menü&apos;s.
                </para>

                <para>
                Werkzeugleiste: Ansicht
                <indexterm><primary>Werkzeugleiste: Ansicht</primary></indexterm>
                Diese Werkzeugleiste enthält einige Werkzeuge des Bearbeiten-
                Menü&apos;s.
                </para>


                <para>
                Werkzeugeleiste: Neues Diagramm.
                  <indexterm>
                    <primary>Werkzeugeleiste: Neues Diagramm</primary>
                  </indexterm>
                  Diese Werkzeugleiste enthält einige Werkzeuge des Menü&apos;s 
                  Neues Diagramm.
                </para>

          </sect3>
          <sect3>

            <title>Der Explorer</title>

            <para>
              Jetzt sollten Sie sich die Zeit nehmen  
              <xref linkend="ch.ref.navpane"/> zu lesen.
              Der Explorer ist fundamental für alles was Sie tun. Wir werden 
              im Folgenden immer wieder auf ihn zurückkommen. 
            </para>

            <para>
              Im Explorer gibt es vor dem Paketsymbol <quote>unbenanntes Modell
              </quote> ein Steuerelement zum Expandieren und Reduzieren und im 
              "zu bearbeiten"-Fenster vor dem Paketsymbol <quote>Mittel</quote>.
              Klicken Sie auf diese Steuerelemente und beachten Sie, dass diese 
              Fenster Baumstrukturen sind, die sich besser benehmen als Sie es 
              erwarten würden. Das Steuerelement zum Expandieren oder Reduzieren 
              ist entweder ein Plus-(+)/Minus-(-)Zeichen oder ein Knauf mit 
              einem rechten oder nach unten gerichteten Zeiger, je nach dem, 
              welches Aussehen (Look and Feel) von Ihnen eingestellt wurde.
            </para>

            <para>
              Markieren Sie entweder das Klassendiagramm 1 oder das 
              Anwendungsfalldiagramm 1 und beobachten Sie, wie sich der Inhalt 
              des Detailfensters sich je nach markiertem Element im Explorer 
              ändert.
              Das Detail-Fenster ist im Kapitel 12 beschrieben.
              Zum jetzigen Zeitpunkt ist es nicht erforderlich das Kapitel 12 
              zu lesen. Aber, es kann auch nichts schaden.
            </para>

          </sect3>

          <sect3>

            <title>Das Editierfenster</title>

            <para>
              Jetzt sollten Sie sich die Zeit nehmen, das   
              <xref linkend="ch.ref.editpane"/> zu lesen.
            </para>

            <para>
              Wenn wir durch das Editierfenster gehen, werden manchmal 
              Änderungen im Detail- und im "zu bearbeiten"-Fenster auftreten.
              Beachten Sie diese im Moment nicht. 
              Wir werden sie betrachten, wenn wir diese Fenster durchgehen.
            </para>
            <para>
              Markieren Sie im Explorer das "Klassendiagramm 1".
              Der Name ist unwichtig. Wenn Sie ihn geändert haben, markieren Sie 
              nun den neuen Namen.
              Wenn Sie es gelöscht haben, führen Sie zuerst eine 
              Neues Diagramm=&gt;Klassendiagramm-Aktion durch.
              Klicken Sie auf die Schaltfläche "Neues Paket" in der 
              Werkzeugleiste des Editierfensters.
              Klicken Sie im Editierfenster irgendwohin.
              Beachten Sie, dass im Explorer ein Paket mit dem Namen 
              (unbenannt Paket) erscheint.
            </para>
            <para>
              Führen Sie einen Doppelklick in der Werkzeugleiste des 
              Editierfensters auf der Schaltfläche "Neue Klasse" aus.
              Klicken Sie zuerst in das Paket und einmal ausserhalb des Paketes.
              Beachten Sie, dass im Explorer im Baum zwei Klassen beide mit dem 
              Namen (unbenannt Klasse) erscheinen. Eine direkt mit dem 
              Modellknoten und die andere mit dem Knoten (unbenannt Paket) 
              verknüpft.
            </para>
            <para>
              Klicken Sie auf die Schaltfläche Auswählen in der 
              Werkzeugleiste des Editierfensters und Sie können im Editierfenster 
              arbeiten ohne neue Klassen hinzuzufügen.
              Markieren Sie im Explorer die Klasse, die nicht dem Paket 
              zugeordnet ist.
              Dies markiert die entsprechende Klasse im Diagramm.
              Greifen Sie sich diese Klasse und verschieben Sie sie in das 
              Paket. Beachten Sie, dass diese Klasse jetzt im Explorer ebenfalls 
              dem Paketknoten untergeordnet wurde.
            </para>
            <para>
              Markieren Sie im Diagramm die andere Klasse.
              Beachten Sie, dass sich im Explorer der markierte Knoten 
              entsprechend verändert.
              Greifen Sie diese Klasse und verschieben Sie sie aus dem 
              Paket und beobachten Sie, was im Explorer passiert.
            </para>

          </sect3>

          <sect3>

            <title>Das Detail-Fenster</title>

            <para>
              Jetzt sollten Sie sich die Zeit nehmen  
              <xref linkend="ch.ref.detpane"/> zu lesen.
            </para>

            <note>

              <itemizedlist>

                <listitem>
                	<para>
                		Zu bearbeiten.
                		Diskutiert die Unterschiede zu den anderen Registern je 
                		markiertem Element.
                		Beinhaltet die Einzelheiten für die Diskussion im 
                		"Zu bearbeiten"-Fenster.
                  	</para>
                  	</listitem>

                <listitem>
                	<para>Eigenschaften,</para>
                </listitem>

                <listitem>
                	<para>Dokumentation,</para>
                </listitem>

                <listitem>
                	<para>Darstellung,</para>
                </listitem>

                <listitem>
                	<para>Quellcode,</para>
                </listitem>

                <listitem>
                	<para>Randbedingungen,</para>
                </listitem>

                <listitem>
                	<para>Stereotypen,</para>
                </listitem>

                <listitem>
                	<para>Eigenschaftswerte,</para>
                </listitem>

                <listitem>
                	<para>Checkliste.</para>
                </listitem>

                <listitem>
                	<para>
                  		Entfernen Sie "images/tutorial/detailsoverview.gif" 
                  		aus dem Dateisystem.
                	</para>
                </listitem>

              </itemizedlist>

            </note>

          </sect3>

          <sect3>

            <title>Das "zu bearbeiten"-Fenster</title>

            <para>
              Jetzt sollten Sie sich die Zeit nehmen  
              <xref linkend="ch.ref.todopane"/> zu lesen.
            </para>

            <note>

              <itemizedlist>

                <listitem>
                	<para>Beschreibt Prioritäten.</para>
                </listitem>

                <listitem>
                	<para>Löst Elemente auf.</para>
                </listitem>

                <listitem>
                	<para>Beziehung zum "zu bearbeiten"-Register im Detail-
                Fenster.
                	</para>
                </listitem>

                <listitem><para>
                  Entfernen Sie "images/tutorial/todooverview.gif" aus dem 
                  Dateisystem.
                </para></listitem>

              </itemizedlist>

            </note>

          </sect3>

          <!-- sect3 id="s3.tut.mouse" >

            <title>Die Maus</title>

            <para>The mouse and mouse buttons (or their equivalent with 
            alternative tracking devices) are used in a wide variety of 
            ways. In this section we look at the common modes of 
            use.</para>

            <para>ArgoUML assumes a two button mouse. We will refer to 
            the buttons as <quote>button&nbsp;1</quote> and <quote>button 
            2</quote>. Button&nbsp;1 is the leftmost button on a 
            right-handed mouse, and sometimes referred to as the 
            <quote>select</quote> button. Button&nbsp;2 is sometimes 
            referred to as the <quote>adjust</quote> button.</para>

            <orderedlist>

              <listitem>

                <para><emphasis>Button&nbsp;1 click</emphasis>. This action 
                is generally used to select an item for subsequent 
                operations. If the item is a model element in the explorer 
                or the editing pane it will be highlighted.</para>

                <para>In the case of the Edit Pane Toolbar, that 
                model element is selected as the next to be added to the 
                diagram (but only once&mdash;see double clicking for adding 
                multiple model elements). The adding to the diagram is 
                achieved by moving the mouse to the editing area and 
                clicking again.</para>

              </listitem>

              <listitem>

                <para><emphasis>Button&nbsp;1 double click</emphasis>. This 
                action is identical to a single click 
                <emphasis>except</emphasis>, when it is used with the 
                edit pane toolbar. Under these circumstances the 
                selected model element will be added multiple times to the 
                drawing area, once for each further button click, until 
                the tool is again selected or another tool 
                chosen.</para>

              </listitem>

              <listitem>

                <para><emphasis>Button&nbsp;2 click</emphasis>. When used 
                over text items in the the explorer or details panes, 
                or graphical model elements in the editing pane, this will 
                display a context dependent drop-down menu.</para>

                <para>If the item has not yet been selected it will 
                also be selected.</para>

              </listitem>

              <listitem>

                <para><emphasis>Button&nbsp;1 motion</emphasis>. Where 
                button&nbsp;1 click has been used to pull down a menu from 
                the menu bar, button&nbsp;1 motion is used to select items 
                on that menu.</para>

                <para>Button&nbsp;1 motion also has an effect in the editing 
                pane. Over graphical model elements it will move the 
                model element to a new position. Graphical model elements that 
                are selected show handles, and these can be used for 
                re-sizing.</para>

                <para>Where the model element is some form of connector 
                between other items, button&nbsp;1 motion other than at a 
                handle will cause a new handle to be created, allowing 
                the connector to be articulated at that point. Such new 
                handles can be removed by moving them to the end of the 
                connector.</para>

              </listitem>

              <listitem>

                <para><emphasis>Button&nbsp;2 motion</emphasis>. This is 
                used to select items in a context sensitive menu popped 
                up by use of button&nbsp;2 click.</para>

              </listitem>

            </orderedlist>

            <para>There are other more specific behaviors that will be 
            encountered under the specific cases where they are 
            used.</para>

          </sect3-->

          <sect3>

            <title>Diagramme zeichnen</title>

            <para>
            Grundsätzlich werden Diagramme mit Hilfe der Werkzeugleiste des 
            Editierfensters gezeichnet. Das gewünschte Modellelement wird 
            markiert und durch anklicken der gewünschten Position im Diagramm 
            positioniert.
            </para>

            <para>
            Modellelemente, die sich bereits im Modell, aber nicht in einem 
            Diagramm befinden, können dem Diagramm hinzugefügt werden, indem man 
            das Modellelement im Explorer markiert, aus dem Drop-Down-Menü 
            (Taste&nbsp;2) <literal>Zum Diagramm hinzufügen</literal> auswählt 
            und dann mit der Taste&nbsp;1 auf die gewünschte Position im 
            Diagramm klickt.
            </para>

            <para>
            Genauso wie für UML-Modellelemente liefert die Werkzeugleiste des 
            Editierfensters Zeichenobjekte (Rechtecke, Kreise, Linien, Polygone, 
            Kurven, Text), um ergänzende Informationen in Diagramme einbringen 
            zu können.
            </para>

            <sect4>

              <title>Diagrammelemente bewegen</title>

              <para>
              Es gibt verschieden Wege Diagrammelemente zu bewegen.
              </para>

              <sect5>

                <title>Mit Hilfe der Maustasten</title>

                <para>
                Markieren Sie die Elemente, die Sie bewegen wollen. Durch 
                drücken der Taste Strg können Sie mehrere Elemente markieren und 
                und zeitgleich bewegen.
                </para>

                <para>
                Nun betätigen Sie Ihre Pfeiltasten. Ihre Elemente bewegen sich 
                bei jedem Tastendruck ein wenig.
                </para>

                <para>
                Wenn Sie zusätzlich die Umschalttaste betätigen, bewegen Sie 
                sich ein wenig weiter.
                </para>

              </sect5>

              <sect5>

                <title>Mit Hilfe der Werkzeugleiste des Editierfensters</title>

                <para>
                Klicken Sie auf die Schaltfläche "Besen" in der Werkzeugleiste. 
                Bewegen Sie Ihre Maus in das Diagrammfenster, klicken rechts 
                und halten sie gedrückt. Nun wird das Bewegen der Maus die 
                Elemente ausrichten.
                </para>

              </sect5>

            </sect4>

            <sect4>

              <title>Elemente anordnen</title>

              <para>
              Das Menü <literal>Anordnen</literal> erlaubt es Ihnen, Elemente 
              auszurichten oder zu gruppieren.
              </para>

            </sect4>

          </sect3>

          <sect3>

            <title>Mit Projekten arbeiten</title>

            <sect4>

              <title>ArgoUML nach dem erstmaligen Start</title>

              <para>
              <xref linkend="fig.tut.startup"/> zeigt, wie ArgoUML 
              nach dem erstmaligen Start erscheint.
              </para>

              <!--figure id="fig.tut.startup">
              	
              	<title>ArgoUML nach dem erstmaligen Start</title>
              	
              	<screenshot><mediaobject><imageobject>
              	<imagedata align="center"
              	fileref="images/tutorial/startup.gif"
              	format="GIF"/></imageobject></mediaobject></screenshot>
              	</figure-->

              <para>
              Das Hauptfenster ist in vier Fenster unterteilt. Darüber befinden 
              sich das Menü und die Werkzeugleiste. Wenn wir mit dem Fenster 
              oben links beginnen und im Uhrzeigersinn weitergehen, können Sie 
              den Explorer, der eine Baumansicht Ihres UML-Modelles anzeigt, das 
              Editierfenster mit seiner Werkzeugleiste, zwei Scrollleisten und 
              einer grauen Zeichenfläche, das Detailfenster mit markiertem 
              "zu bearbeiten"-Register und das "zu bearbeiten"-Fenster mit einer 
              Baumansicht der zu bearbeitenden Elemente, auf verschiedene Art 
              und Weise sortiert, je nach Auswahl in der Drop-Down-Liste im 
              oberen Bereich des Fenster.
              </para>

              <para>
              Jedesmal wenn ArgoUML ohne Projektdatei als Argument gestartet 
              wird, wird ein neues leeres Projekt erzeugt. Dieses Projekt enthält 
              ein Modell mit dem Namen <literal>unbenanntesModell</literal>. 
              Diese Modell enthält ein leeres Klassendiagramm, <literal>
              Klassendiagramm 1</literal> genannt und ein leeres Anwendungsfall-
              Diagramm, <literal>Anwendungsfalldiagramm 1</literal> genannt.
              </para>

              <para>
              Das Modell und die beiden leeren Diagramme können Sie im Explorer 
              sehen, der für Sie das Hauptwerkzeug darstellt, um durch Ihr 
              Modell zu navigieren.
              </para>

              <para>
              Lassen Sie uns für einen Moment annehmen, dass dies jetzt der 
              Zeitpunkt ist, wo Sie mit der Modellierung eines neuen Einkaufs-
              systems beginnen wollen. Sie wollen ihm den Namen <literal>
              einkaufsmodell</literal> geben und Sie wollen es in einer Datei 
              mit dem Namen <literal>ErstesProjekt</literal> speichern.
              </para>

            </sect4>

            <sect4>

              <title>Ein Projekt speichern - Das Menü: Datei</title>

              <para>
                Im Moment speichert ArgoUML Diagramme in einem früh 
                veröffentlichtem Standard, der <emphasis>Precision Graphics 
                Markup Language (PGML)</emphasis>.
                Für diejenigen, die davon Gebrauch machen wollen, gibt es 
                allerdings die Option, die grafischen Daten als SVG zu 
                exportieren.
                Wenn ArgoUML UML 2.0 unterstützt, werden die Diagramme im UML 
                2.0 Diagramm Austausch Format gespeichert.
              </para>

              <para>
              Zuerst lassen Sie uns das Modell in seinem aktuellen (leeren und 
              unbenannten) Zustand speichern. Klicken Sie in der Menüzeile auf
              <literal>Datei</literal>, dann auf <literal>Projekt speichern  
              unter...</literal>. Sie auch <xref linkend="fig.tut.saveas"/>.
              </para>

              <figure id="fig.tut.saveas">

                <title>
                <literal>Projekt speichern unter...</literal> aufrufen
                </title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/tutorial/saveas.gif" format="GIF" />
                		</imageobject>
                	</mediaobject>
                </screenshot>
              </figure>

              <para>
              Bitte beachten Sie, dass das Menü Datei die üblichen Optionen für 
              das Erzeugen eines neuen Projektes, für das Öffnen eines 
              existierenden Projektes, für das Speichern eines Projektes unter 
              einem neuen Namen, für das Drucken des aktuell angezeigten 
              Diagrammes, für das Speichern des aktuell angezeigten Diagrammes 
              als Datei und für das Beenden des Programmes enthält.
              </para>

              <para>
              Einige diese Menü-Kommandos können auch mit Hilfe einer 
              Tastenkombination, wie im Drop-Down-Menü dargestellt, ausgelöst 
              werden. Das Festhalten der Taste <quote>Strg</quote> und das 
              Drücken der Taste <quote>N</quote> wird zum Beispiel ein neues 
              Projekt erzeugen.
              </para>

              <para>
              In der aktuellen Version kann ArgoUML nur ein aktives Projekt 
              gleichzeitig bearbeiten. Zusätzlich kann ein Projekt nur ein UML-
              Modell enthalten. Da ein UML-Modell eine unbegrenzte Anzahl von 
              Elementen und Diagrammen beinhalten kann, sollte es keine 
              schwerwiegenden Begrenzugen aufweisen, gerade für die Modellierung 
              sehr grosser und komplexer Systeme. 
              </para>

            </sect4>

            <sect4>

              <title>Der Dateiauswahl-Dialog</title>

              <para>
                Aber lassen Sie uns zum Speichern unseres Projektes zurückgehen. 
                Nachdem wir das Menü-Kommando <literal>Projekt speichern 
                unter...</literal> angeklickt haben, öffnet sich der 
                Dateiauswahl-Dialog, in dem wir den von uns gewünschten 
                Dateinamen eingeben können. Siehe auch 
              	<xref linkend="fig.tut.filechoose" />.
              </para>

              <figure id="fig.tut.filechoose">

                <title>Der Dateiauswahl-Dialog</title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/tutorial/filechoose.gif"
                				format="GIF" />
                		</imageobject>
                	</mediaobject></screenshot>
              </figure>

              <para>
                Dies ist eine Standard-Java-Dateiauswahl. Lassen Sie uns in 
                einige Details einsteigen.
              </para>

              <para>
                Die Hauptfunktion ist die scrollbare Verzeichnisliste in der 
                Mitte des Dialoges. Mit Hilfe der Scrollleiste auf der rechten 
                Seite können Sie sich in der Liste der im aktuell markierten 
                Verzeichnis befindlichen Verzeichnisse nach oben und nach unten 
                bewegen. Ob sie scrollbar oder nicht scrollbar ist, hängt von 
                Menge der angezeigten Dateien und Verzeichnisse und deren 
                Darstellung ab. Wenn alles in das Fenster passt, ist es 
                nicht scrollbar, wie im Bild dargestellt.
              </para>

              <para>
                Doppelklicken auf eine der angezeigten Verzeichnisse navigiert 
                Sie in dieses Verzeichnis und erlaubt es Ihnen, schnell in der 
                Verzeichnishierarchie Ihrer Festplatte hinunterzunavigieren.
              </para>

              <para>
                 Beachten Sie, dass nur Verzeichnisnamen und keine Dateinamen 
                 im Scrollbereich angezeigt werden. Tatsächlich ist der Dialog 
                 aktuell so eingestellt, dass er nur ArgoUML-Projektdateien mit 
                 der Erweiterung <literal>.zargo</literal> anzeigt. Dies können 
                 Sie im unteren Drop-Down-Steuerelement mit dem Namen <literal>
                 Dateityp:</literal> sehen.
              </para>

              <para>
                 Beachten Sie auch, dass der aktuell markierte Verzeichnisname 
                 im oberen Drop-Down-Steuerlement mit der Bezeichnung <literal>
                 Speichern in:</literal> angezeigt wird. Ein einziger Klick auf 
                 ein Verzeichnis innerhalb des Scrollbereiches markiert das 
                 Verzeichnis am Bildschirm, markiert das Verzeichnis allerdings 
                 nicht zum speichern.
              </para>

              <para>
                Im oberen Bereich des Dialoges, über dem scrollbaren Verzeichnis-
                Auswahlbereich, gibt es einige weitere Verzeichnis-Navigations-
                Werkzeuge.
              </para>

              <itemizedlist>

                <listitem>

                  <para>
                  <guiicon>
                  	<inlinegraphic
                  		fileref="images/tutorial/guifolderdropdown.gif"
                  		format="GIF" />
                  </guiicon>
                  </para>
                  <para>
                  Das Verzeichnis-Drop-Down-Steuerelement.
                  Klicken auf den Pfeil zeigt eine Baumansicht der Verzeichnis-
                  Hierarchie an, erlaubt es Ihnen schnell in der Hierarchie nach 
                  oben und unten zu navigieren und gleichzeitig schnell zu 
                  bestimmen, wo Sie sich aktuell in der Hierarchie befinden. 
                  </para>

                </listitem>

                <listitem>

                  <para>
                  <guiicon>
                  	<inlinegraphic
                  		fileref="images/tutorial/guifolderupicon.gif"
                  		format="GIF" />
                  </guiicon>
                  </para>
                  <para>
                  Das Symbol: Verzeichnis-nach-oben. Klicken auf dieses Symbol 
                  wird Sie in das übergeordnete Verzeichnis des aktuellen 
                  Verzeichnisses bringen.
                  </para>

                </listitem>

                <listitem>

                  <para>
                  <guiicon>
                  	<inlinegraphic
                  		fileref="images/tutorial/guihomefoldericon.gif"
                  		format="GIF" />
                  </guiicon>
                  </para>
                  <para>
                  Das Symbol: Home-Verzeichnis. Klicken auf dieses Symbol wird 
                  Sie in Ihr Home-Verzeichnis bringen.
                  </para>

                </listitem>

                <listitem>

                  <para>
                  <guiicon>
                  	<inlinegraphic
                  		fileref="images/tutorial/guinewfoldericon.gif"
                  		format="GIF" />
                  </guiicon>
                  </para>
                  <para>
                  Das Symbol: Neues Verzeichnis. Klicken auf dieses Symbol wird 
                  ein neues Verzeichnis, genannt <quote>Neues Verzeichnis</quote> 
                  unter dem aktuellen Verzeichnis erzeugen. Nachdem das 
                  Verzeichnis erzeugt wurde, markieren Sie es und klicken Sie 
                  auf den Namen. Dies erlaubt es uns, den Namen unserer Wahl 
                  zu vergeben.
                  </para>

                </listitem>

                <listitem>

                  <para>
                  <guiicon>
                  	<inlinegraphic
                  		fileref="images/tutorial/guifolderspresentationicon.gif"
                  		format="GIF" />
                  </guiicon>
                  </para>
                  <para>
                  Das Symbol: Darstellung der Verzeichnisse.
                  </para>

                </listitem>

              </itemizedlist>

              <para>
                 OK, jetzt navigieren wir in das Verzeichnis, in das wir unsere 
                 ArgoUML-Projektdatei speichern wollen. Füllen Sie <literal>
                 Dateiname:</literal> mit dem entsprechenden Namen aus, wie z.B. 
                 <literal>ErstesProjekt</literal> und klicken Sie auf die 
                 Schaltfläche <literal>Speichern</literal>.
	          </para>

              <para>
                 Sie haben nun ein aktives Projekt, <literal>ErstesProjekt
                 </literal> genannt, das mit der Datei <literal>
                 ErstesProjekt.zargo</literal> verbunden ist.
			  </para>

            </sect4>

          </sect3>

        </sect2>

        <sect2>

          <title>Ausgabe</title>

          <sect3 id="s3.tut.loadsave">

            <title>Laden und Speichern</title>

            <sect4>

              <title>XMI-Dateien in ArgoUML speichern</title>

              <indexterm><primary>XMI</primary></indexterm>
              <para>
              ArgoUML speichert die Diagramminformationen in einer PGML-Datei 
              (mit der Erweiterung <literal>.pgml</literal>, die 
              Modellinformation in einer XMI-Datei (mit der Erweiterung 
              <literal>.xmi</literal> und die Information über das Projekt in 
              einer Datei mit der Erweiterung <literal>.argo</literal>. Mehr 
              über PGML und XMI siehe unter 
              <xref linkend="s4.tut.pgml"/> und 
              <xref linkend="s3.tut.xmi"/>.
              </para>

              <para>
              All diese Dateien werden in eine Datei mit der Erweiterung 
              <literal>.zargo</literal> gepackt. Sie können die <literal>.xmi
              </literal>-Datei aus der <literal>.zargo</literal>-Datei mit Hilfe 
              einer generischen <application>ZIP</application>-Anwendung 
              extrahieren. Versuchen Sie es und blicken Sie in den Zauber von 
              Argo.
              </para>

              <warning>

                <para>
                Beachten Sie, sofern ein <literal>ZIP-Dienstprogramm</literal> 
                installiert ist, dass ein Doppelklick das <literal>
                ZIP-Dienstprogramm</literal> starten wird und NICHT Argo.
                </para>

              </warning>

            </sect4>

          </sect3>

          <sect3>

            <title>Grafiken und Drucken</title>

            <sect4>

              <title>Das Graph Editing Framework (GEF)</title>

              <para>
              GEF ist ein Softwarepaket, welches die Grundlage für die im 
              Editierfenster erscheinenden Diagramme bildet. GEF war ein 
              integraler Bestandteil von ArgoUML, der jetzt separiert wurde. Wie 
              ArgoUML ist es ein Open-Source-Projekt und via 
              <ulink url="http://www.tigris.org">Tigris</ulink> verfügbar.
              </para>

            </sect4>

            <sect4 id="s4.tut.pgml">

              <title>Precision Graphics Markup Language (PGML)</title>

              <para>
	              PGML ist das aktuelle Speicherformat für in ArgoUML verwendete 
	              Diagramminformationen. In Zukunft wird PGML durch das UML 2.0 
	              Diagramm-Austausch-Format ersetzt.
              </para>


            </sect4>

            <sect4>

              <title>Anwendungen, die PGML öffnen</title>

              <para>
				PGML ist ein Präprozessor von SVG (siehe 
              	<xref linkend="s4.tut.svg"/>. Er wurde durch das W3C-Konsortium 
              	verworfen.
              </para>

              <para>
              	Aktuell kennen wir keine anderen Tools, die mit 
              	PGML arbeiten.
              </para>

            </sect4>

            <sect4>

              <title>Diagramme drucken</title>

              <para>
              	Markieren Sie ein Diagramm und gehen Sie dann in 
 	            <literal>Datei</literal>=&gt;<literal>Grafik exportieren...
 	            </literal>.
 	            Sie können GIF-, PostScript-, Encapsulated PostScript- oder 
                SVG-Format generieren.
              </para>

            </sect4>

            <sect4 id="s4.tut.svg">

              <title>Scalable Vector Graphics (SVG)</title>

              <para>
                Ein weltweites Web-Konsortium (W3C) Standard-Vektor-Grafik-
                Format (
              	<ulink url="http://www.w3.org/TR/SVG/">
              	http://www.w3.org/TR/SVG/</ulink>).
              </para>

              <para>
              	In modernen Browsern ist die Unterstützung des Formates 
              	eingebaut, für ältere Browser können Sie aber auch ein Plugin 
              	von <ulink url="http://www.adobe.com">adobe.com</ulink>
              	erhalten.
              </para>

            </sect4>

            <sect4>

              <title>Diagramme als SVG speichern</title>

              <orderedlist>

                <listitem>

                  <para>
                  	Wählen Sie <literal>.svg</literal> als Dateityp aus.
                  </para>

                </listitem>

                <listitem>

                  <para>
                  	Geben Sie den gewünschten Namen der Datei mit der 
                  	<literal>.svg</literal>-Erweiterung am Ende ein. Beispiel:
	                <literal>meinumldiagramm.svg</literal>
                  </para>

                </listitem>

              </orderedlist>

              <para>
              	Et viola! SVG! Probieren Sie es aus und erforschen Sie es 
              	etwas... Sie sind nicht schön genug? Wenn Sie etwas über das 
              	Rendern schöner SVG-Formate wissen, lassen Sie es uns wissen.
              </para>

              <para>
              	Die meisten modernen Browser unterstützen SVG. Wenn Ihrer das 
              	nicht tut, versuchen Sie es unter 
				<ulink url="http://www.mozilla.com/firefox/">Firefox</ulink> 
				oder holen Sie sich ein Plugin für Ihren aktuellen Browser von 
				<ulink url="http://www.adobe.com">adobe.com</ulink>
	          </para>

              <note>

                <para>
                	Sie wollen keine Scrollleisten für Ihre SVG haben, es sei 
                	denn Sie sind in HTML eingebettet. Viel Glück und lassen Sie 
                	es uns wissen, was Sie finden!
                </para>

              </note>

            </sect4>

          </sect3>

          <sect3 id="s3.tut.xmi">

            <title>XMI</title>

            <indexterm><primary>XMI</primary></indexterm>
            <para>
            	ArgoUML unterstützt XMI 1.0, 1.1 und 1.2 Dateien, die UML 1.3 
            	und UML 1.4-Modelle enthalten. Um die beste Kompatibilität zu 
            	erhalten, exportieren Sie Ihre Modelle in UML 1.4 und XMI 1.1 
            	oder 1.2. Stellen Sie sicher, dass all proprietären 
            	Erweiterungen abgeschaltet sind (wie z.B. Poseidon&apos;s 
            	Diagrammdaten).
            </para>
            
            <para>
            	Mit UML-Versionen vor UML 2.0 ist es nicht möglich Diagramm-
            	Informationen zu speichern, sodass keine Diagramme transferriert 
            	werden.
            </para>

            <para>
            	Es gibt auch ein Werkzeug, das XMI nach HTML konvertiert. Für  
            	mehr Informationen , siehe
            	<ulink url="http://www.objectsbydesign.com/projects/xmi_to_html_2.html">
            	http://www.objectsbydesign.com/projects/xmi_to_html_2.html</ulink>.
            </para>

            <sect4>

              <title>XMI von Rational Rose benutzen</title>

              <para>...</para>

            </sect4>

            <sect4>

              <title>Von Poseidon erzeugte Modelle benutzen</title>

              <indexterm><primary>XMI</primary></indexterm>
              <para>
              	Im <literal>Exportiere als XMI...</literal>, aber stellen Sie 
              	sicher, das <literal>Speichere mit Diagrammdaten</literal> 
              	nicht markiert ist.
              </para>

            </sect4>

            <sect4>

              <title>Von MagicDraw erzeugte Modelle benutzen</title>

              <para>...</para>

            </sect4>
            
            <sect4>

              <title>XMI Kompatibilität mit anderen ArgoUML-Versionen</title>

              <para>
              	ArgoUML-Versionen vor 0.19.7 unterstützen UML 1.3/XMI 1.0. 
              	Danach ist das Speicherformat UML 1.4/XMI 1.2, das nicht 
              	rückwärtskompatibel ist. Neuere Versionen von ArgoUML werden 
              	Projekte älterer Versionen lesen, aber nicht umgekehrt. Wenn 
              	Sie glauben, zu einer älteren Version von ArgoUML zurückkehren 
              	zu müssen, sollten Sie vorsichtig sein und ein Backup Ihres 
              	alten Projektes abspeichern.
              </para>
              
              <para>
              	Wenn Sie zusätzlich XMI-Dateien speichern, die durch andere 
              	Werkzeuge gelesen werden sollen, sollten Sie die 
              	unterschiedlichen Versionen unterscheiden. Die meisten modernen 
              	UML-Modellierungs-Werkzeuge sollten UML 1.4 lesen, aber Sie 
              	haben vielleicht In-Haus-Codegeneratoren oder andere Werkzeuge, 
              	die UML 1.3 benötigen.
              </para>

            </sect4>

            <sect4>

              <title>Andere XMI-Formate in ArgoUML importieren</title>

              <para>
              	Die XMI-Kompatibilität zwischen den UML-Modellierungs-Werkzeugen 
              	wurde über die Jahre verbessert, aber Sie werden wahrscheinlich 
              	Probleme bekommen.
              </para>
              
              <para>
              	ArgoUML wird keine XMI-Dateien lesen, die UML 1.5 oder UML 2.0-
              	Modelle enthalten, aber es sollte möglich sein, die meisten 
              	UML 1.4 und UML 1.3-Modelle zu öffnen. Wenn Sie eines finden, 
              	dass Sie nicht öffnen können, erstellen Sie bitte einen Bug-
              	Bericht, so dass ein Entwickler dies erforschen kann.
              </para>

            </sect4>

            <sect4>

              <title>XMI Format generieren</title>

              <para>
              	Wählen Sie das Kommando <literal>Datei</literal>=&gt;<literal>
              	Exportiere als XMI...</literal> und wählen Sie einen Dateinamen.
              </para>

            </sect4>

          </sect3>

          <sect3>

            <title>Code-Generierung</title>

            <sect4>

              <title>Durch ArgoUML generierter Code</title>

              <para>
              	Es ist möglich Ihren generierten Code mit ArgoUML zu übersetzen, 
              	Sie müssen lediglich die Methodenrümpfe implementieren, um 
              	verwendbare Ergebnisse zu erzielen.
              </para>

            </sect4>

            <sect4>

              <title>Code für Methoden generieren</title>

              <para>
              	Im Moment können Sie keinen Code für Methoden (Operationen) 
              	in ArgoUML schreiben. Das Quellcode-Fenster ist editierbar, aber 
              	die Änderungen werden ignoriert. ArgoUML ist aktuell ein 
              	reines Design-Werkzeug, es ist keine IDE-Funktionalität 
              	vorhanden, aber der Wunsch ist da. Sie können Forte und ArgoUML 
              	zusammenarbeiten lassen; dies ist ein guter Workaround.
              </para>

              <para>Sie können uns hier heraushelfen, wenn Sie wollen!</para>

            </sect4>

          </sect3>

        </sect2>

        <sect2>

          <title>Mit Design-Kritiken arbeiten</title>

          <para>
          	Designkritiken sind Teil der praktischen Anwendung der Theorie der 
          	Kognitiven Psychologie, die in ArgoUML implementiert ist. Siehe 
            <xref linkend="tut.cog.psych"/>
          </para>

          <sect3>

            <title>Nachrichten von den Designkritiken</title>

            <para>
            	Wo stehen wir aktuell? Ein neues Projekt wurde erstellt und 
            	wurde in der Datei <literal>ErstesProjekt.zargo</literal> 
            	gespeichert. <xref linkend="fig.tut.critstart"/> zeigt, wie 
            	Ihr ArgoUML-Fenster zu diesem Zeitpunkt aussehen sollte.
            </para>

            <figure id="fig.tut.critstart">

              <title>
                ArgoUML-Fenster mit gespeichertem Projekt 
                <literal>ErstesProjekt.zargo</literal>
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/critstart.gif" format="GIF" />
              		</imageobject>
              	</mediaobject></screenshot>
            </figure>

            <para>
            	Das Projekt enthält ein Paket auf oberster Ebene, genannt 
            	<literal>unbenanntesModell</literal>, welches ein 
            	Klassendiagramm und ein Anwendungsfalldiagramm enthält.
            </para>

            <para>
            	Wenn wir auf den Bildschirm blicken, sehen wir, dass das 
            	Verzeichnis <quote>Mittel</quote> im "zu bearbeiten"-Fenster 
            	(das linke untere Fenster) einige Elemente enthalten muss, da 
            	sein Aktivierungs-Symbol
				<guiicon>
					<inlinegraphic
						fileref="images/tutorial/guitreefoldercloseicon.gif" format="GIF" />
				</guiicon>
				angezeigt wird.
            </para>

            <para>
            	Klicken auf dieses Symbol öffnet das Verzeichnis <quote>Mittel
            	</quote>. Ein geöffnetes Verzeichnis wird durch das Symbol
				<guiicon>
					<inlinegraphic
						fileref="images/tutorial/guitreefolderopenicon.gif" format="GIF" />
				</guiicon>
				dargestellt.
            </para>

            <para>
            	Aber, was ist dieses <quote>zu bearbeiten</quote>-Fenster 
            	überhaupt? Sie haben bis jetzt noch nichts aufgezeichnet, was 
            	zu tun wäre. Wo kommen diese "zu bearbeiten"-Elemente jetzt her?
            </para>

            <para>
            	Die Antwort ist simpel und ist gleichzeitig eines der wichtigsten 
            	Punkte von ArgoUML. Während Sie mit Ihrem UML-Modell arbeiten, 
            	wird Ihre Arbeit kontinuierlich durch ein Stück Code, <emphasis>
            	Design-Kritik</emphasis> genannt, gemonitort. Das ist ähnlich 
            	einem persönlichen Mentor, der Ihnen über die Schulter sieht und 
            	Sie jedesmal darauf hinweist, wenn er irgendetwas fragwürdiges 
            	in Ihrem Design sieht. 
            </para>

            <para>
            	Kritiken sind etwas völlig unaufdringliches. Sie geben Ihnen eine 
            	freundliche Warnung, aber Sie zwingen Sie nicht in Design-
            	Prinzipien, denen Sie nicht folgen wollen. Lassen Sie uns einen 
            	Blick darauf werfen, was die Kritiken uns mitteilen.
            	Klicken Sie auf das 
				<guiicon>
					<inlinegraphic
						fileref="images/tutorial/guitreefoldercloseicon.gif" format="GIF" />
				</guiicon>
				Symbol in der Nähe des Verzeichnisses <literal>Mittel</literal> 
				und klicken Sie auf das Element <literal>Überprüfen Sie den 
				Paketnamen unbenanntesModell</literal>.
            </para>

            <para>
	            <xref linkend="fig.tut.critrevname"/> zeigt, wie Ihr Bildschirm 
	            nun aussieht.
            </para>

            <figure id="fig.tut.critrevname">

              <title>
				ArgoUML-Fenster zeigt das Kritik-Element
				<literal>Überprüfen Sie den Paketnamen unbenanntesModell</literal>
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/critrevname.gif"
              				format="GIF" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <para>
            	Beachten Sie, dass Ihre Markierung im "zu bearbeiten"-Fenster in 
            	rot markiert ist und dass jetzt eine vollständige Erläuterung 
            	im Detail-Fenster (das untere rechte Fenster) erscheint. Sie 
            	müssen vielleicht Ihr Detail-Fenster in der Grösse anpassen oder 
            	herunterscrollen, um die angezeigten Nachricht in Ihrem Beispiel 
            	vollständig sehen zu können.
            </para>

            <para>
            	Was Ihnen ArgoUML wahrscheinlich mitteilen will, Paketnamen 
            	werden in Kleinbuchstaben geschrieben. Das oberste, von ArgoUML 
            	erzeugte Standard-Paket wird <literal>unbenanntesModell</literal>
            	genannt und verletzt daher ein Designprinzip. (Aktuell kann dies 
            	als Bug von ArgoUML betrachtet werden, aber es kommt gerade 
            	gelegen, um die arbeitsweise von Kritiken zu demonstrieren).
            </para>

            <para>
            	An diesem Punkt können Sie wählen, ob Sie den Paketnamen manuell 
            	ändern oder durch die Design-Kritik stillschweigend dieses eine 
            	Mal oder immer ändern wollen.
            </para>

            <para>
            	Wir werden nichts davon tun (wir kommen darauf zurück, wenn wir 
            	über die Design-Kritiken detaillierter sprechen), aber wir 
            	werden eine andere einfache Funktion von ArgoUML nutzen&mdash; 
            	die Autokorrektur-Funktion.
            </para>

            <para>
            	Um dies zu tun, klicken Sie auf die Schaltfläche <literal>
	            Weiter</literal> im Detailfenster. Dadurch wird ein Umbenennungs-
	            Assistent innerhalb des Eigenschaftsfensters angezeigt, der 
	            vorschlägt, den Namen <literal>unbenanntesmodell</literal> 
	            (alles in Kleinbuchstaben) zu verwenden.
            </para>

          </sect3>

          <sect3>

            <title>Design-Kritiken bei der Arbeit: Der Paket-Umbenennungs- 
            Assistent</title>

            <para>
            	Ersetzen Sie den Namen <literal>unbenanntesmodell</literal> 
            	durch <literal>einkaufsmodell</literal> und klicken Sie auf die 
            	Schaltfläche <literal>Fertig stellen</literal>.
	            <xref linkend="fig.tut.critwiz"/> zeigt, wie das ArgoUML-
	            Fenster nun aussehen sollte. 
	        </para>

            <figure id="fig.tut.critwiz">

              <title>
              	Das ArgoUML-Fenster zeigt den Kritik-Assistenten, zur 
              	Umbenennung des Paketes
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/critwiz.gif" format="GIF" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <para>
            	Beobachten Sie nun, wie die Design-Kritik im "zu bearbeiten"-
            	Fenster verschwindet und es verbleibt nur der Hinweis <literal>
            	Fügen Sie dem Paket einkaufsmodell Elemente hinzu</literal> in 
            	der "zu bearbeiten"-Liste.
            </para>

            <para>
            	Wenn dies nicht sofort passiert, warten Sie einige Sekunden. 
            	ArgoUML macht ausgiebigen Gebrauch von mehreren, parallel 
            	ausgeführten Ausführungsthreads. Dies kann einige Sekunden 
            	Verzögerung verursachen bevor die Information auf dem Bildschirm 
            	auf den neusten Stand gebracht wird.
            </para>

            <para>
            	Die Änderung des Paketnamens sollte sich auch im Explorer, in 
            	der linken oberen Ecke Ihres ArgoUML-Fensters,  
            	wiederspiegeln.
            </para>

            <para>
            	Wir sind jetzt so weit, unser erstes UML-Diagramm, ein 
            	Anwendungsfalldiagramm, zu erstellen. Aber lassen Sie uns zuerst  
            	speichern, was wir bis jetzt getan haben.
            </para>

            <para>
            	Klicken Sie auf das Menüelement <literal>Datei</literal> und 
            	wählen Sie <literal>Projekt speichern...</literal> aus. Sie 
            	können jetzt ArgoUML sicher beenden, ohne Ihre bisherige Arbeit 
            	zu verlieren, oder mit dem Erstellen Ihres ersten Diagrammes 
            	fortfahren.
            </para>

          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Die Fallstudie (Noch zu schreiben)</title>

        <para>
        	Hier wollen wir mit der Fallstudie beginnen.
        	Es ist der Zeitpunkt, wo Sie Ihr Projekt definieren; nicht Ihr 
        	Produkt, aber Ihr Projekt.
        	Es kann argumentiert werden, dass die Modellierungskonzepte hier 
        	auch erscheinen sollten, aber das wurde so nicht aufgebaut.
        	Wenn Sie sich die Zeit nehmen, sich das ArgoUML-Projekt anzusehen, 
        	werden Sie eine grosse Anzahl von "Code-" und Dokumentationszeilen, 
        	die Teil des Projektes sind, finden. Sie sind aber nicht Teil des 
        	Produktes.
        	Beispiel: Dieses Dokument ist Teil des Produktes während das 
        	Kochbuch und die build.xml-Dateien nur Teil des Projektes sind.
        	Mindestens die Dateistruktur des Projektes könnte in einem 
        	Paketdiagramm dargestellt werden.
        </para>
        <para>
          ...
        </para>
      </sect1>

    </chapter>

    <chapter id="ch.tut.reqs">

      <title>Erfassen der Anforderungen</title>

      <sect1>

        <title>Einleitung</title>

        <indexterm>
        <primary>Anforderung</primary><secondary>Erfassung</secondary></indexterm>
        <para>
        	Das Erfassen der Anforderungen ist der Identifizierungsprozess, was 
        	der <quote>Kunde</quote> von dem vorgeschlagenen System will.
        </para>

        <para>
        	Der Schlüssel zu diesem Zeitpunkt ist, dass wir uns im 
        	Problembereich befinden. Zu diesem Zeitpunkt müssen wir alles 
        	aus der Perspektive des <quote>Kunden</quote> und in der Sprache 
        	des <quote>Kunden</quote> beschreiben.
        </para>

        <para>
        	Das grösste Risiko, dass wir beim Erfassen der Anforderungen haben 
        	ist, dass wir in Begriffen der möglichen Lösung anfangen zu denken.
        	Dies muss bis zur <emphasis>Analyse-Phase</emphasis> warten (siehe
	        <xref linkend="ch.tut.analysis"/>). Einer der Schritte der Analyse-
	        Phase nimmt das Ergebnis der Anforderungsphase und übersetzt es in 
	        die Sprache einer gedachten Lösung. 
        </para>

        <para>
        	Erinnern Sie sich, dass wir beides einsetzen, einen <emphasis>
        	inkrementalen</emphasis> und einen <emphasis>iterativen</emphasis> 
        	Prozess.
        </para>

        <para>
        	Wir kommen im Anforderungsprozess darauf zurück, wenn wir das 
        	Problem in kleinere Teile unterteilen. Für jedes davon müssen seine 
        	Anforderungen erfasst sein.
        </para>

        <para>
        	Wir werden wahrscheinlich während der Anforderungsphase bei jeder 
        	Iteration darauf zurückkommen, wenn wir versuchen, die Anforderungen 
        	des Systems immer weiter zu definieren.
        </para>

        <note>

          <para>
          	Der einzige Teil der vom UML-Standard spezifizierten 
          	Anforderungsnotation ist das Anwendungsfalldiagramm.  Der Rest ist 
          	prozessspezifisch. Der in diesem Kapitel beschriebene Prozess ist 
          	sehr stark an den Rational Unified Prozess angelehnt.
          </para>

        </note>

      </sect1>

      <sect1>

        <title>Der Anforderungs-Erfassungs-Prozess</title>

        <indexterm><primary>Das Visions-Dokument</primary></indexterm>
        <para>
        	Wir beginnen mit einer Top-Level-Sicht auf das von uns zu lösende 
        	Problem und die Schlüsselbereiche der Funktionalität, die wir für 
        	die Lösung adressieren müssen. Dies ist unser <emphasis>Visions- 
        	Dokument</emphasis> und es sollte nur einige Seiten lang sein.
        </para>

        <para>
        	Die Top-Level-Sicht eines Geldautomaten (automated teller 
        	machine (ATM)) zum Beispiel, sollte folgendes unterstützen.
        </para>

        <orderedlist>

          <listitem>

            <para>
            	Bargeld lagern, Bargeld abheben und Kontoabfragen durch Kunden.
            </para>

          </listitem>

          <listitem>

            <para>
            	Warten des Equipments durch Bank-Ingenieure und leeren der 
            	Kassen und Bargeld nachfüllen durch die lokale Bankfiliale.
            </para>

          </listitem>

          <listitem>

            <para>
            	Nachvollziehbarkeit aller an den zentralen Bankcomputer 
            	gesendeten Aktivitäten.
            </para>

          </listitem>

        </orderedlist>

        <indexterm><primary>Akteur</primary></indexterm>
        <para>
        	Aus dieser Top-Level-Sicht können wir die prinzipiellen Aktivitäten 
        	des Systems und die extern Handelnden (Menschen, Equipment) die in 
        	diese Aktivitäten eingebunden sind extrahieren. Diese Aktivitäten 
        	sind als <emphasis>Anwendungsfälle</emphasis> und die extern 
        	Handelnden als <emphasis>Akteure</emphasis> bekannt.
        </para>

        <para>
        	Akteure können Menschen oder Maschinen sein. Vom praktischen 
        	Standpunkt aus gesehen besteht deren Wert darin, die Nutzer 
        	hinter einer Maschine zu kennen, da nur diese in der Lage sind, sich 
        	mit dem Anforderungs-Erfassungs-Prozess zu beschäftigen.
        </para>

        <indexterm><primary>Anwendungsfall</primary></indexterm>
        <para>
        	Anwendungsfälle sollte signifikante Aktivitäten für das System sein.
        	Der Nutzung des Geldautomaten durch den Kunden ist zum Beispiel ein 
        	Anwendungsfall. Die Eingabe einer PIN-Nummer ist es nicht.
        </para>

        <para>
        	Es gibt eine Grauzone zwischen diesen beiden Extremen. Wie wir 
        	sehen werden, ist es oft nützlich, sehr grosse Anwendungsfälle in 
        	kleinere Sub-Anwendungsfälle zu unterteilen. Wir können zum Beispiel 
        	Bargeld lagern, Bargeld auszahlen und Kontoabfragen als Sub-
        	Anwendungsfälle definieren.
        </para>

        <para>
        	Es gibt keine harte und schnelle Regel. Einige Architekten 
        	präferieren wenige relativ grosse Anwendungsfälle, andere 
        	präferieren eine grössere Anzahl kleinerer Anwendungsfälle. Eine 
        	nützliche Faustregel ist, dass jedes praktikable Projekt nicht mehr 
        	als 30 Anwendungsfälle erfordern sollte (wenn es mehr benötigt, 
        	sollte es in separate Projekte aufgeteilt werden).
        </para>

        <para>
        	Wir stellen dann die Beziehungen zwischen den Anwendungsfällen und 
        	Akteuren in einem oder mehreren Anwendungsfalldiagrammen dar. In 
        	grösseren Projekten wird mehr als ein Diagramm benötigt. 
        	Normalerweise werden Gruppen zusammengehöriger Anwendungsfälle in 
        	einem Diagramm dargestellt.
        </para>

        <para>
        	Wir müssen dann eine detailliertere Spezifikation für jeden 
        	Anwendungsfall erstellen. Dies beinhaltet sein normales Verhalten, 
        	alternatives Verhalten und alle Vor- und Nachbedingungen. Dies 
        	erfolgt in einem Dokument, dass häufig als <emphasis>
        	Anwendungsfalldokumentation</emphasis> oder <emphasis>
        	Anwendungsfallszenario</emphasis> bekannt ist.
        </para>

        <indexterm><primary>Ergänzende Anforderungsspezifikation</primary></indexterm>
        <para>
        	Da Anwendungsfälle natürlicherweise funktional sind, benötigen wir 
        	ein Dokument, um die nicht-funktionalen Anforderungen (Kapazitäts-, 
        	Leistungs-, Umgebungsanforderungen usw.) aufzunehmen. Diese 
        	Anforderungen werden in einem Dokument <emphasis>Ergänzende 
        	Anforderungsspezifikation</emphasis> festgehalten.
        </para>

        <sect2>

          <title>Prozess-Schritte</title>

          <para>
          	Die Schritte im Anforderungs-Erfassungs-Prozess können wie folgt 
          	zusammengefasst werden.
          </para>

          <orderedlist>

            <listitem>

              <para>
              Das <emphasis>Visions-Dokument</emphasis> beinhaltet eine 
              Gesamtsicht auf das Problem und die gewünschten Charakteristika 
              seiner Lösung.
              </para>
              <indexterm><primary>Visions-Dokument</primary></indexterm>

            </listitem>

            <listitem>

              <para>
              	Identifizieren Sie die <emphasis>Anwendungsfälle</emphasis> und 
              	<emphasis>Akteure</emphasis> aus dem Visions-Dokument und 
              	stellen deren Beziehungen zueinander in einem oder mehreren 
              	<emphasis>Anwendungsfalldiagrammen dar</emphasis>.
              </para>
              <indexterm><primary>Anwendungsfall</primary></indexterm>

            </listitem>

            <listitem>
              <para>
              	Erstellen Sie für jeden Anwendungsfall eine detaillierte 
              	<emphasis>Anwendungsfall-Spezifikation</emphasis>, die das 
              	normale und alternative Verhalten, die Vor- und Nachbedingungen 
              	beinhaltet.
	          </para>
              <indexterm><primary>Anwendungsfall-Spezifikation</primary>
              </indexterm>
              <indexterm><primary>Spezification</primary><secondary>von  
              Anwendungsfällen</secondary></indexterm>

            </listitem>

            <listitem>

              <para>
              	Fassen Sie alle nicht-funktionalen Anforderungen in einer 
              	<emphasis>Ergänzenden Anforderungs-Spezifikation</emphasis> 
              	zusammen.
              </para>
              <indexterm><primary>Nicht-funktionale Anforderungen</primary>
              </indexterm>
              <indexterm><primary>Ergänzende Anforderungs-Spezifikation 
              </primary></indexterm>

            </listitem>

          </orderedlist>

          <para>
          	In jedem iterativen Entwicklungsprozess werden wir priorisieren 
          	und frühe Iterationen werden sich darauf fokussieren, das 
          	hauptsächliche Verhalten der wichtigsten Anwendungsfälle aufzunehmen.
          </para>

          <para>
          	Die meisten modernen Anforderungs-Erfassungs-Prozesse unterstellen, 
          	dass es wichtig ist, dass der maßgebliche Repräsentant des Kunden
          	während dieses Prozesses vollständig involviert ist.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.tut.req_process_output">

        <title>Ergebnis des Anforderungs-Erfassungs-Prozesses</title>

        <para>
        	Fast alle Ergebnisse des Anforderungs-Erfassungs-Prozesses sind 
        	dokumentarisch. Das einzige Diagramm ist das Anwendungsfalldiagramm, 
        	das die Beziehungen zwischen den Anwendungsfällen und den Akteuren 
        	darstellt.
        </para>

        <sect2 id="s2.tut.vision_document">

          <title>Visions-Dokument</title>

          <para>
          	Typische Kapitel dieses Dokumentes könnten die folgenden sein.
          </para>
          <indexterm><primary>Visions-Dokument</primary></indexterm>

          <itemizedlist>

            <listitem>

              <para>
              	<emphasis>Zusammenfassung</emphasis>. Eine Aussage zum Umfeld, 
              	zum Problem und zu den Zielen der Lösung.
              </para>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Ziele</emphasis>. Was wir erreichen wollen (und wie 
              	wir es erreichen wollen).
              </para>
              <indexterm><primary>Ziele</primary><secondary>im  
              Visions-Dokument</secondary></indexterm>

            </listitem>

            <listitem>

              <para>
              <emphasis>Marktumfeld</emphasis> oder 
              <emphasis>vertragliche Vereinbarungen</emphasis>. Bei einer 
              Entwicklung zur Marktführerschaft, sollte es die Zielmärkte, die 
              Alleinstellungsmerkmale, die zwingenden Ereignisse und so weiter 
              aufzeigen. Bei einer vertraglich vereinbarten Entwicklung sollte 
              es die Hauptelemente der vertraglichen Vereinbarung erläutern.
              </para>
              <indexterm><primary>Marktumfeld</primary><secondary>im  
              Visions-Dokument</secondary></indexterm>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Nutzer</emphasis>. Die Nutzer (im weitesten 
              	Sinne) des Systems. Viele davon werden als Akteure, oder 
              	Steuer-Equipment das in Akteure umgewandelt wird, abgebildet. 
              </para>
              <indexterm><primary>Nutzer</primary><secondary>im 
              Visions-Dokument</secondary></indexterm>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Haupteigenschaften</emphasis>. Auf einer sehr hohen 
              	Abstraktionsebene: Was sind die hauptsächlichen Aspekte des 
              	Problems/der gewünschten Lösung. Es ist hilfreich, hier bereits 
              	zu priorisieren.
              </para>
              <indexterm><primary>Haupteigenschaften</primary><secondary>im 
              Visions-Dokument</secondary></indexterm>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Randbedingungen</emphasis>. Eine Sicht auf die 
              	nicht-funktionalen Parameter des Systems auf einer sehr hohen 
              	Abstraktionsebene. Diese werden in der ergänzenden 
              	Anforderungsspezifikation detailliert ausgearbeitet.
              </para>
              <indexterm><primary>Randbedingungen</primary><secondary>im 
              Visions-Dokument</secondary></indexterm>
              <indexterm><primary>Nicht-funktionale Parameter</primary>
              <secondary>im Visions-Dokument</secondary></indexterm>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Anhang</emphasis>. Eine Liste der Akteure und 
              	Anwendungsfälle die zur Erfüllung der Vision notwendig sind. Es
              	ist hilfreich, diese mit den vorher beschriebenen Abschnitten 
              	zu verlinken um eine in sich geschlossene Darstellung 
              	sicherzustellen. 
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Anwendungsfalldiagramm</title>

          <indexterm><primary>Anwendungsfalldiagramm</primary></indexterm>
          <indexterm><primary>Diagramm</primary><secondary>Anwendungsfall 
          </secondary></indexterm>
          <para>
          	 Das Visions-Dokument identifizierte die Anwendungsfälle und Akteure. 
          	 Das Anwendungsfalldiagramm stellt dar, wie sie interagieren. In 
          	 unserem ATM (Geldautomat) Beispiel haben wir <quote>Kunde nutzt den 
          	 Automaten</quote>, <quote>Wartung des Automaten</quote> und 
          	 <quote>Revision</quote> als die drei Hauptanwendungsfälle 
          	 identifiziert. Als Akteure haben wir <quote>Kunde</quote>, 
          	 <quote>Wartungsingenieur</quote>, <quote>lokaler Zweigstellenbeamter
          	 </quote> und <quote>Zentralcomputer</quote> identifiziert.
          </para>

          <para>
	          <xref linkend="fig.tut.atm_use_case_diagram_basic" /> zeigt, wie 
	          das in einem Anwendungsfalldiagramm dargestellt werden kann. Die 
	          Anwendungsfälle werden als Ovale dargestellt, die Akteure als 
	          Strichmännchen (auch wenn es Maschinen sind), mit Linien (als 
	          Assoziationen bekannt), die die Anwendungsfälle mit den damit 
	          involvierten Akteuren verbinden. Ein Rahmen um die Anwendungsfälle 
	          stellt die Abgrenzung zwischen dem System (durch die 
	          Anwendungsfälle definiert) und den Akteuren dar, die extern sind.
          </para>

          <note>

            <para>
            	Nicht alle Analytiker möchten einen Rahmen um die 
            	Anwendungsfälle verwenden. Dies ist ein Fall persönlicher 
            	Vorlieben.
            </para>

          </note>

          <figure id="fig.tut.atm_use_case_diagram_basic">

            <title>
            	Grundlegendes Anwendungsfalldiagramm für einen Geldautomaten
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/tutorial/atm_use_case_diagram_basic.gif"
            				format="GIF" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Die folgenden Abschnitte zeigen, wie das grundlegene 
          	Anwendungsfalldiagramm erweitert werden kann, um zusätzliche 
          	Informationen über das zu designende System darzustellen.
          </para>

          <sect3>

            <title>Aktive und passive Akteure</title>

            <indexterm><primary>Aktiver Akteur</primary></indexterm>
            <para>
            	<emphasis>Aktive</emphasis> Akteure initiieren eine Interaktion 
            	mit dem System. Dies kann durch einen Pfeil in der Assoziation 
            	vom Akteur zum Anwendungsfall dargestellt werden. Im 
            	Geldautomaten-Beispiel ist der Kunde ein aktiver Akteur.
            </para>

            <indexterm><primary>Passiver Akteur</primary></indexterm>
            <para>
            	Die Interaktion mit <emphasis>passiven</emphasis> Akteuren wird 
            	durch das System initiiert. Dies kann durch einen Pfeil in der 
            	Assoziation vom Anwendungsfall zum Akteur dargestellt werden.
            	Im Geldautomaten-Beispiel ist der Zentralcomputer ein passiver 
            	Akteur.
            </para>

            <para>
            	Dies ist ein gutes Beispiel, wo die Pfeile helfen, da es uns 
            	erlaubt, ein ereignisgetriebenes System (der Geldautomat 
            	initiiert die Interaktion mit dem Zentralcomputer) von einem 
            	zyklisch abfragenden System (der Zentralcomputer fragt den 
            	Geldautomaten von Zeit zu Zeit ab) zu unterscheiden.
            </para>

            <para>
            	Dort wo ein Akteur entweder aktiv oder passiv sein kann, je nach 
            	den Umständen, kann der Pfeil weggelassen werden. Im 
            	Geldautomaten-Beispiel fällt der Bankingenieur in diese 
            	Kategorie. Normalerweise ist er aktiv, indem er regelmässig 
            	auftaucht um die Maschine zu warten. Wenn jedoch der Geldautomat 
            	einen Fehler entdeckt, kann er den Ingenieur auffordern diesen 
            	zu beheben.
            </para>

            <para>
            	Die Verwendung von Pfeilen bei Assoziationen wird als 
            	<emphasis>Navigation</emphasis> der Assoziation bezeichnet.
            	Wir sollten dies später in der UML im Einsatz sehen.
            	Die Wahl der OMG eine bidirektionale Assoziation durch keine 
            	anstelle von zwei Pfeilspitzen darzustellen ist unvorteilhaft.
            	Mit dieser Konvention können Sie nicht zwischen einer 
            	Assoziation unterscheiden, deren Navigation noch zu bestimmen 
            	ist und einer die bidirektional ist.
            </para>

            <para>
	            <xref linkend="fig.tut.atm_use_case_diagram_navigation"/>
	            zeigt das Geldautomaten-Anwendungsfalldiagramm mit dargestellter 
	            Navigation. 
            </para>

            <figure id="fig.tut.atm_use_case_diagram_navigation">

              <title>
              	Anwendungsfalldiagramm für einen Geldautomaten mit Navigation.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/atm_use_case_diagram_navigation.gif"
              				format="GIF" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

          </sect3>

          <sect3>

            <title>Multiplizität</title>

            <indexterm><primary>Multiplizität</primary><secondary>in einem  
            Anwendungsfalldiagramm</secondary></indexterm>
            <para>
            	Es kann sehr nützlich sein, die <emphasis>Multiplizität
            	</emphasis> von Assoziationen zwischen Akteuren und 
            	Anwendungsfällen darzustellen. Damit meinen wir, wie viele 
            	Ausprägungen eines Akteurs mit wie vielen Ausprägungen eines 
            	Anwendungsfalles interagieren.
            </para>

            <para>
            	Standardmäßig nehmen wir an, dass eine Ausprägung eines Akteurs 
            	mit einer Ausprägung eines Anwendungsfalles interagiert. In den 
            	anderen Fällen können wird die Multiplizität an einem Ende der 
            	Assoziation kennzeichnen. Entweder mit einer Nummer, um 
            	darzustellen, wie viele Ausprägungen involviert sind, oder mit 
            	einem durch zwei Punkten separierten Bereich (<literal>..
            	</literal>). Ein Stern (<literal>*</literal>) wird verwendet, 
            	um eine beliebige Zahl darzustellen.
            </para>

            <para>
            	Im Geldautomaten-Beispiel gibt es nur einen Zentralcomputer, 
            	aber es können beliebig viele Nutzungen des Geldautomaten 
            	aufgezeichnet werden. Daher plazieren wir das Kennzeichen 
            	<literal>0..*</literal> am Ende des Anwendungsfalles. Es gibt 
            	keine Notwendigkeit für eine Kennzeichnung am anderen Ende, da 
            	der Standard 1 ist.
            </para>

            <para>
            	Eine lokale Bank kann bis zu drei Beamte haben, die autorisiert  
            	sind, die Geldautomaten zu leeren und zu befüllen. Daher 
            	plazieren wir bei der Beziehung zwischen dem Akteur und dem 
            	Anwendungsfall <literal>Wartung Geldautomat</literal> am Ende 
            	zum Akteur die Kennzeichnung <literal>1..3</literal>.
            	Sie können sich mit beliebig vielen Geldautomaten befassen, 
            	so dass wir auf dem anderen Ende das Kennzeichen <literal>0..*
            	</literal> plazieren.
            </para>

            <para>
            	Es gibt beliebig viele Kunden und beliebig viele Geldautomaten 
            	die diese nutzen dürfen. Daher plazieren wir an jedem Ende der 
            	Assoziation das Kennzeichen <literal>0..*</literal>.
            </para>

            <para>
	            <xref linkend="fig.tut.atm_use_case_diagram_multiplicity"/>
	            zeigt das Geldautomaten-Anwendungsfalldiagramm mit dargestellter 
	            Multiplizität. 
            </para>

            <figure id="fig.tut.atm_use_case_diagram_multiplicity">

              <title>
              	Anwendungsfalldiagramm für einen Geldautomaten und dargestellter
              	Multiplizität.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/atm_use_case_diagram_multiplicity.gif"
              				format="GIF" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <para>
            	Die Multiplizität kann ein Diagramm überladen und wird oft nicht 
            	angezeigt, ausser wo es für das Verständnis kritisch ist. Im 
            	Beispiel Geldautomat würde wir nur <literal>1..3</literal> zum 
            	lokalen Bankbeamten darstellen, da alle anderen aus dem Kontext 
            	heraus offensichtlich sind.
            </para>

          </sect3>

          <sect3>

            <title>Hierarchien von Anwendungsfällen</title>

            <indexterm><primary>Hierarchie von Anwendungsfällen</primary>
            </indexterm>
            <indexterm><primary>Anwendungsfall</primary><secondary>Hierarchie
            </secondary></indexterm>
            <para>
            	In unserem Geldautomatenbeispiel haben wir jetzt drei 
            	Anwendungsfälle, um das Verhalten des Systems zu beschreiben. 
            	Auch wenn Anwendungsfälle immer einen signifikanten Teil des 
            	Systemverhaltens beschreiben sollten, wenn diese zu generell 
            	sind, können sie schwer zu beschreiben sein.
            </para>

            <para>
            	Wir könnten zum Beispiel das Verhalten des Anwendungsfalles 
            	<quote>Geldautomat nutzen</quote> durch das Verhalten von drei 
            	einfacheren Anwendungsfällen, wie <quote>Bargeld lagern</quote>,
            	<quote>Bargeld ausgeben</quote> und <quote>Konto abfragen</quote> 
            	ausdrücken. Der Hauptanwendungsfall könnte durch <emphasis>
            	einbinden (include)</emphasis> des Verhaltens der benötigten 
            	Unteranwendungsfälle spezifiziert werden.
            </para>

            <para>
            	Der Anwendungsfall <quote>Geldautomat warten</quote> könnte 
            	ebenfalls durch zwei Anwendungsfälle <quote>Equipment warten
            	</quote> und <quote>Geldautomat neu starten</quote> definiert 
            	werden. In diesem Fall sind die zwei im Hauptanwendungsfall 
            	involvierten Akteure natürlich nur in einem oder dem anderen 
            	der beiden Unteranwendungsfälle involviert. Dies wird im 
            	nachfolgenden Diagramm dargestellt.
            </para>

            <indexterm><primary>Beziehung Include</primary></indexterm>
            <indexterm>
            <primary>Beziehung</primary><secondary>Include</secondary></indexterm>
            <para>
            	Die Aufteilung eines Anwendungsfalles in einfacherere 
            	Unteranwendungsfälle wird in UML durch eine <emphasis>include 
	            Beziehung</emphasis>, einem gestrichelten Pfeil vom 
	            Hauptanwendungsfall zum Unteranwendungsfall mit der Kennzeichnung 
	            <emphasis>&laquo;include&raquo;</emphasis> bezeichnet.
            </para>

            <figure id="fig.tut.atm_use_case_diagram_include">

              <title>
              	Anwendungsfalldiagramm für einen Geldautomaten mit 
              	include-Beziehungen.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/atm_use_case_diagram_include.gif"
              				format="GIF" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <para>
            	Include-Beziehungen sind ideal für das Herunterbrechen des 
            	Anwendungsfallverhaltens in Hierarchien. Wir wollen jedoch auch 
            	einen Anwendungsfall, der eine <emphasis>Erweiterung (extension)
            	</emphasis> eines existierenden Anwendungsfalles darstellt, in 
            	bestimmten Umständen darstellen.
            </para>

            <para>
            	Im Geldautomatenbeispiel haben wir einen Anwendungsfall <quote>
            	Equipment warten</quote>, der die Routinewartung des 
            	Geldautomaten beinhaltet. Wir wollen aber auch den Spezialfall 
            	einer ungeplanten Reparatur abdecken, die durch den vom 
            	Geldautomaten erkannten internen Fehlers ausgelöst wurde.
            </para>

            <indexterm><primary>Extend 
            Beziehung</primary></indexterm>
            <indexterm>
            <primary>Beziehung</primary><secondary>Extend</secondary></indexterm>
            <para>
            	Dies wird in UML durch die <emphasis>extend</emphasis>-Beziehung 
            	dargestellt. Im Hauptanwendungsfall spezifizieren wir einen 
            	Namen für einen Ort in der Beschreibung, an den die Erweiterung 
            	des Verhaltens hinzugefügt werden kann. Der Name und der Ort 
            	werden in einem separaten Abschnitt innerhalb des Anwendungsfall-
            	Ovales dargestellt. Die Darstellung der extend-Beziehung 
            	entspricht der include-Beziehung, aber mit dem Kennzeichen 
            	<emphasis>&laquo;extend&raquo;</emphasis>. An der extend-
            	Beziehung spezifizieren wird die Bedingung, unter der das 
            	Verhalten hinzugefügt wird.
            </para>

            <para>
            	<xref linkend="fig.tut.atm_use_case_diagram_extend" />
            	zeigt das Geldautomaten-Anwendungsfalldiagramm mit einer extend-
            	Beziehung auf einen Anwendungsfall für ungeplante Reparaturen. 
            	Das Diagramm ist jetzt sehr komplex so dass wir es in zwei 
            	aufteilen sollten. Eines für die hauptsächlichen Dinge, das 
            	andere für den Kundennutzen und Revision.
            </para>

            <para>
            	Der Anwendungsfall <quote>Equipment warten</quote> definiert 
            	den Namen <quote>Unshed</quote> am Anfang seiner Beschreibung. 
            	Der erweiterte Anwendungsfall <quote>ungeplante Reparatur</quote> 
                wird herangezogen, wenn der Geldautomat einen internen Fehler 
                entdeckt.
            </para>

            <figure id="fig.tut.atm_use_case_diagram_extend">

              <title>
              	Anwendungsfalldiagramm für einen Geldautomaten. Zeigt eine 
              	extend-Beziehung.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/tutorial/atm_use_case_diagram_extend.gif"
              				format="GIF" />
              		</imageobject>
              	</mediaobject></screenshot>
            </figure>

            <indexterm><primary>Anwendungsfall 
            Generalisierung</primary></indexterm>
            <indexterm><primary>Anwendungsfall 
            Spezialisierung</primary></indexterm>
            <indexterm><primary>Generalisiere einen Anwendungsfall 
            </primary></indexterm>
            <indexterm><primary>Spezialisierungen</primary><secondary>von 
            Anwendungsfällen</secondary></indexterm>
            <para>
            	Anwendungsfälle können auch auf andere Art und Weise miteinander 
            	verknüpft sein. Ein Anwendungsfall kann eine <emphasis>
            	Generalisierung</emphasis> eines Sub-Anwendungsfalles (oder 
            	alternativ: Der Sub-Anwendungsfall ist eine <emphasis>
            	Spezialisierung</emphasis> des Hauptanwendungsfalles).
            	Das ist der extend-Beziehung sehr ähnlich, aber ohne die 
            	Bedingung des spezifischen Erweiterungspunktes, unter welcher 
            	der Haupt-Anwendungsfall erweitert wird und ohne 
            	Bedingung unter welcher der Sub-Anwendungsfall verwendet wird.
			</para>

            <para>
            	Der Generalisierung wird in einem Anwendungsfalldiagramm durch 
            	einen Pfeil mit durchgehender Linie und einer weissen 
            	Pfeilspitze vom Sub-Anwendungsfall zum Hauptanwendungsfall 
            	dargestellt.
            	Das kann hilfreich sein, wenn ein Sub-Anwendungsfall das 
            	Verhalten des Hauptanwendungsfalles in einer Vielzahl von 
            	Positionen und in einem weiten Bereich von Sachverhalten 
            	spezialisiert.
            	Das Fehlen jeglicher Einschränkungen macht es sehr schwierig, 
            	die Generalisierung genau zu beschreiben.
            	Im Normalfall verwenden Sie besser eine extend-Beziehung.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Die Anwendungsfall-Spezifikation</title>

          <indexterm><primary>Anwendungsfall-Spezifikation</primary></indexterm>
          <indexterm><primary>Spezifikation</primary><secondary>eines  
          Anwendungsfalles</secondary></indexterm>
          <indexterm><primary>Anwendungsfall-Szenario</primary></indexterm>
          <para>
          	Jeder Anwendungsfall muss dokumentiert sein, um das das spezifizierte 
          	Verhalten im Detail zu erläutern.
          	ArgoUML unterstützt Sie in diesem Bereich durch das Generieren 
          	graphischer Dateien, die in diese Dokumentation eingebunden werden 
          	kann.
          	Dieses Dokument ist unter verschieden Namen in verschiedenen 
          	Prozessen bekannt:
            <emphasis>Anwendungsfall-Spezifikation</emphasis>,
            <emphasis>Anwendungsfall-Szenario</emphasis> oder auch (verwirrend) 
            nur <emphasis>Anwendungsfall</emphasis>.
          </para>

          <para>
          	Eine typische Anwendungsfall-Spezifikation wird folgende Kapitel 
          	enthalten.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<emphasis>Name</emphasis>. Der Name des Anwendungsfalles.
              </para>
              <indexterm><primary>Name</primary><secondary>des Anwendungsfalles
              </secondary></indexterm>
              <indexterm><primary>Anwendungsfallname</primary></indexterm>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Ziel</emphasis>. Eine ein oder zweizeilige 
              	Zusammenfassung darüber, was dieser Anwendungsfall <emphasis>
              	für seine Akteure</emphasis> ausführt. 
              </para>
              <indexterm><primary>Ziel</primary><secondary>des Anwendungsfalles
              </secondary></indexterm>
              <indexterm><primary>Anwendungsfallziel</primary></indexterm>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Akteure</emphasis>. Die in diesen Anwendungsfall 
              	involvierten Akteure und jeden Umstand bezüglich Ihrer 
              	Einbindung.
              </para>

              <note>

                <para>
                	Dies sollte keine Beschreibung des Akteurs sein. Die sollte 
                	mit dem Akteur im Anwendungsfalldiagramm verknüpft sein.
                </para>

              </note>

            </listitem>

            <listitem>

              <para>
	              <emphasis>Vorbedingung</emphasis>. Diese würden besser als 
	              <quote>Voraussetzungen</quote> bezeichnet, aber der überall 
	              verwendete Begriff ist Vorbedingungen. Dies ist eine 
	              Beschreibung jeder vereinfachenden Voraussetzung, die wir zum 
	              Start des Anwendungsfalles machen können. 
              </para>
              
              <indexterm><primary>Vorbedingung</primary><secondary>des 
              Anwendungsfalles</secondary></indexterm>
              <indexterm>
              <primary>Voraussetzungen</primary><secondary>des Anwendungsfalles
              </secondary></indexterm>
              <indexterm><primary>Anwendungsfall Vorbedingung 
              </primary></indexterm>

              <para>
           		Im Geldautomatenbeispiel könnten wir beim Anwendungsfall 
           		<quote>Equipment warten</quote> die Voraussetzung haben, das 
           		immer ein Ingenieur verfügbar ist und wir uns nicht vor dem Fall 
           		fürchten müssen, in dem ein Routinewartungs-Besuch ausgelassen 
           		wurde. 
              </para>

              <caution>

                <para>
                	Vermeiden Sie Vorbedingungen wo immer das möglich ist. Sie 
                	müssen sich absolut sicher sein, dass die Vorbedingung 
                	unter allen möglichen Umständen eingehalten wird. Wenn nicht, 
                	ist ihr System zu wenig spezifiziert und wird daher 
                	fehlschlagen, wenn die Vorbedingung nicht wahr ist. Wenn Sie 
                	nicht sicher sein können, dass die Vorbedingung 
                	immer wahr ist, müssen Sie einen zweiten Anwendungsfall 
                	spezifizieren, der den Fall handhabt, wenn die 
                	Vorbedingung falsch ist. Im ersten Fall sind die 
                	Vorbedingungen die Ursache der Probleme, im zweiten Fall die 
                	Ursache für mehr Arbeit.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <emphasis>Standardablauf</emphasis>. Die aufeinander 
	              folgenden Schritte, die das Verhalten des Anwendungsfalles 
	              im <quote>Normalfall</quote> beschreiben. Wo ein Anwendungsfall 
	              mehrere normale Szenarien aufweist, wird einer davon 
	              willkürlich ausgewählt. Die Spezifizierung des 
	              Standardablaufes wird nachfolgend detaillierter beschrieben 
	              <xref linkend="s3.tut.basic_flow"/>.
              </para>
              <indexterm><primary>Standardablauf</primary><secondary>eines 
              Anwendungsfalles</secondary></indexterm>
              <indexterm><primary>Anwendungsfall</primary><secondary>
              Standardablauf</secondary></indexterm>
              <indexterm><primary>Szenario</primary></indexterm>

            </listitem>

            <listitem>

              <para>
	              <emphasis>Alternative Abläufe</emphasis>. Eine Reihe von 
	              linearen Sequenzen beschreiben jede der alternativen, 
	              gegenüber dem Standardablauf abweichenden Verhaltensweisen. 
	              Die Spezifizierung alternativer Abläufe ist detaillierter in 
	              <xref linkend="s3.tut.alternate_flows"/> beschrieben.
              </para>
              <indexterm><primary>Alternative Abläufe 
              </primary><secondary>von Anwendungsfällen 
              </secondary></indexterm>
              <indexterm><primary>Anwendungsfall</primary><secondary>Alternative 
              Abläufe</secondary></indexterm>

            </listitem>

            <listitem>

              <para>
	              <emphasis>Nachbedingungen</emphasis>. Dies ist der Zustand 
	              jeder Nachbedingung, den wir am Ende des Anwendungsfalles 
	              feststellen können. Sehr hilfreich, wo der Anwendungsfall 
	              einer von einer Serie von in den Hauptanwendungsfall 
	              eingebundenen Unteranwendungsfällen ist, wo sie die 
	              Vorbedingung für den nächsten einzubindenden Anwendungsfall 
	              bilden. 
              </para>
              <indexterm>
              <primary>Nachbedingungen</primary><secondary>von Anwendungsfällen
              </secondary></indexterm>
              <indexterm>
              <primary>Post-assumptions</primary><secondary>of Use 
              Case</secondary></indexterm>
              <indexterm><primary>Anwendungsfall 
              Nachbedingungen</primary></indexterm>

              <caution>

                <para>
                	Nachbedingungen sind wie Vorbedingungen am Besten zu 
                	vermeiden. Sie bilden eine Belastung für die Spezifikation 
                	des Anwendungsfallablaufes, das sichergestellt sein muss, 
                	dass die Nachbedingung immer eingehalten wird. Daher sind 
                	sie auch eine Ursache von Problemen und zusätzlicher 
                	Arbeit.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Anforderungen</emphasis>. In einer idealen Welt würden 
              	das Visionsdokument, die Anwendungsfalldiagramme, die 
              	Anwendungsfallbeschreibungen und die Spezifikation der 
              	zusätzlichen Anforderungen die Anforderungen für ein Projekt 
              	bilden. 
              </para>

              <para>
              	Bei den meisten Marktführer-Entwicklungen, ist es gewöhnlich der 
              	Fall, dass sich die Eigentumsrechte der Anforderungen im 
              	gleichen Business befinden,	wie das Team, das die Entwicklung 
              	durchführen wird. Die Marketingabteilung kann das Erfassen und 
              	die Analyse der Anwendungsfallanforderungen erlernen, um ihre 
              	kundenspezifischen Aktivitäten damit zu verbinden.
              </para>

              <para>
              	Bei externen Vertragsentwicklungen jedoch, kann der Kunde auf 
              	einer traditionellen <quote>Liste von Features</quote> als Basis 
              	des Vertrages bestehen. Wo dies der Fall ist, sollte dieser 
              	Abschnitt der Anwendungsfallspezifikation mit den vertraglich 
              	festgelegten Features übereinstimmen, die durch den 
              	Anwendungsfall abgedeckt werden.
              </para>

              <para>
              	Das wird oft mit Hilfe eines Third-Party-Werkzeuges ausgeführt, 
              	das Dokumente verknüpfen kann und eine automatische Prüfung des 
              	Geltungsbereiches enthält. In diesem Fall wird dieser Abschnitt 
              	nicht benötigt oder kann automatisch generiert werden.
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Die abschliessende Grösse der Anwendungsfallspezifikation hängt von 
          	der Komplexität der Anwendungsfälle ab. Als Faustregel gilt, dass 
          	die meisten Anwendungsfälle ca. 10-15 Seiten für die Spezifikation 
          	benötigen, das meiste davon für die alternativen Abläufe. Wenn sie 
          	sehr viel grösser sind, sollten Sie die Anwendungsfälle aufteilen. 
          	Wenn sie sehr viel kleiner sind, betrachten Sie, ob der 
          	Anwendungsfall einen zu kleinen Bereich des Verhaltens beschreibt.
          </para>

          <sect3 id="s3.tut.basic_flow">

            <title>Den Standardablauf spezifizieren</title>

            <indexterm><primary>Standardablauf</primary><secondary>von  
            Anwendungsfällen</secondary></indexterm>
            <indexterm><primary>Anwendungsfall</primary><secondary>
            Standardablauf</secondary></indexterm>
            <para>
            	Alle Abläufe in einer Anwendungsfallspezifikation sind linear
            	&mdash; d.h. es gibt keine bedingte Verzweigung. Jede Auswahl 
            	im Ablauf wird durch einen anderen, nach dem Auswahlpunkt 
            	kommenden alternativen Ablauf behandelt. Es ist wichtig, sich 
            	daran zu erinnern, dass wir hier das Verhalten und nicht die 
            	Programmierung spezifizieren.
            </para>

            <para>
            	Ein Ablauf wird durch eine Reihe von numerierten Schritten 
            	spezifiziert. Jeder Schritt muss einige Interaktionen mit einem 
            	Akteur oder mindestens eine Änderung generieren, die durch 
            	einen Akteur extern überwacht wird. Das Anforderungen erfassen 
            	sollte nicht das versteckte interne Verhalten eines Systems 
            	spezifizieren.
            </para>

            <para>
            	In unserem Geldautomatenbeispiel könnten wir im Anwendungsfall 
            	<quote>Bargeld ausgeben</quote> die folgende Sequenz von 
            	Schritten im Standardablauf haben:
            </para>

            <orderedlist>

              <listitem>

                <para>
                	Der Kunde gibt an, dass eine Quittung erforderlich ist.
                </para>

              </listitem>

              <listitem>

                <para>Der Kunde gibt die gewünschte Bargeldmenge ein.</para>

              </listitem>

              <listitem>

                <para>Der Geldautomat überprüft mit dem Zentralcomputer, dass 
                der Kunde diese Auszahlung durchführen kann. </para>

              </listitem>

              <listitem>

                <para>Der Geldautomat gibt das Bargeld an den Kunden.</para>

              </listitem>

              <listitem>

                <para>Der Geldautomat gibt die Quittung an den Kunden aus.</para>

              </listitem>

            </orderedlist>

            <para>
            	Zur Erinnerung: Dies ist ein Sub-Anwendungsfall der im Haupt-
            	Anwendungsfall <quote>Geldautomat benutzen</quote> enthalten ist, 
            	der voraussichtlich das Prüfen von Karten und PINs handhaben 
            	wird, bevor dieser eingebundene Anwendungsfall aufgerufen wird.
            </para>

            <note>

              <para>
              	Der erste Schritt ist keine Bedingung. Wir nehmen als unseren 
              	Standardablauf den Fall, wo der Kunden eine Quittung haben 
              	möchte. Der Fall, wo der Kunde keine Quittung haben will, wird 
              	ein alternativer Ablauf sein.
              </para>

            </note>

          </sect3>

          <sect3 id="s3.tut.alternate_flows">

            <title>Alternative Abläufe spezifizieren</title>

            <indexterm><primary>Alternative Abläufe</primary><secondary>von 
            Anwendungsfällen</secondary></indexterm>
            <indexterm><primary>Anwendungsfall</primary><secondary>Alternative 
            Abläufe</secondary></indexterm>
            <indexterm><primary>Alternative Szenarios</primary></indexterm>
            <para>
            	Dies erfasst die alternativen Szenarien, wie lineare Abläufe, 
            	die durch den Standardablauf referenziert werden. Zu Beginn 
            	erzeugen wir eine Liste der alternativen Abläufe.
            </para>

            <orderedlist inheritnum="inherit" numeration="upperalpha">

              <listitem>

                <orderedlist inheritnum="inherit" numeration="arabic">

                  <listitem>

                    <para>Der Kunde benötigt keine Quittung.</para>

                  </listitem>

                  <listitem>

                    <para>Das Kundenkonto unterstützt keine Auszahlung.</para>

                  </listitem>

                  <listitem>

                    <para>Die Kommunikation mit dem Zentralcomputer ist 
                    unterbrochen.</para>

                  </listitem>

                  <listitem>

                    <para>Der Kunde unterbricht die Transaktion.</para>

                  </listitem>

                  <listitem>

                    <para>
                    	Der Kunde macht beim Annehmen des Bargeldes Fehler.
                    </para>

                  </listitem>

                </orderedlist>

              </listitem>

            </orderedlist>

            <para>
            	Nachfolgend arbeiten wir jeden alternativen Ablauf als 
            	Referenz zum Standardablauf aus. Der erste alternative Ablauf 
            	könnte zum Beispiel wie folgt aussehen:
            </para>

            <orderedlist inheritnum="inherit" numeration="upperalpha">

              <listitem>

                <orderedlist inheritnum="inherit" numeration="arabic">

                  <listitem>

                    <para>Der Kunde benötigt keine Quittung.</para>

                    <orderedlist inheritnum="inherit" numeration="arabic">

                      <listitem>

                        <para>
                        	In Schritt 1 des Standardablaufes sagen die Kunden, 
                        	dass Sie keine Quittung benötigen.
                        </para>

                      </listitem>

                      <listitem>

                        <para>
                        	Der Standardablauf geht von Schritt 2 in Schritt 4, 
                        	Schritt 5 wird nicht benötigt.
                        </para>

                      </listitem>

                    </orderedlist>

                  </listitem>

                </orderedlist>

              </listitem>

            </orderedlist>

            <para>
            	Die Konvention ist, dass die verschiedenen alternativen Abläufe 
            	numeriert werden, wie A.1, A.2, A.3, usw. Die Schritte innerhalb 
            	eines alternativen Ablaufes werden darauf aufbauend numeriert. 
            	So dass die Schritte der ersten Alternative wie folgt lauten 
            	würden: A.1.1, A.1.2, A.1.3, usw.
            </para>

          </sect3>

          <sect3>

            <title>
            	Iterative Entwicklung der Anwendungsfallspezifikationen
            </title>

            <para>
            	Die Iterative Entwicklung wird die die Anwendungsfälle 
            	priorisieren und die erste Iteration wird die wichtigsten 
            	adressieren.
            </para>

            <para>
            	Frühe Iterationen werden den Standardablauf der wichtigsten 
            	Anwendungsfälle nur mit den grundlegenden Details erfassen und 
            	die Überschriften der hauptsächlichen alternativen Abläufe 
            	auflisten.
            </para>

            <para>
            	Spätere Iterationen werden die verbleibenden Anwendungsfälle 
            	adressieren, die Schritte der individuellen alternativen Abläufe 
            	ausformulieren und wahrscheinlich mehr Details über die 
            	individuellen Schritte enthalten.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Ergänzende Anforderungsspezifikation</title>

          <indexterm><primary>Ergänzende Anforderungsspezifikation
          </primary></indexterm>
          <indexterm><primary>Nicht-funktionale Anforderungen
          </primary></indexterm>
          <indexterm><primary>Nicht-funktionale Randbedingungen
          </primary></indexterm>
          <para>
          	Dies erfasst die nicht-funktionalen Anforderungen oder 
          	Randbedingungen, die für das System gelten. Da Anwendungsfälle von 
          	Natur aus inhärent funktional sind, können sie diese Art von 
          	Information nicht aufnehmen.
          </para>

          <note>

            <para>
            	Einige Analytiker plazieren nicht-funktionale Anforderungen in 
            	einem Abschnitt am Ende einer jeden Anwendungsfallspezifikation, 
            	der die nicht-funktionalen, anwendungsfallbezogenen 
            	Anforderungen enthält.
            </para>

            <para>
            	Dies kann einige Probleme verursachen. Der erste Punkt ist, dass 
            	nicht-funktionale Anforderungen (zum Beispiel über die 
            	Performance) in vielen Anwendungsfällen erscheinen muß und es 
            	ist eine schlechte Praxis, Informationen zu replizieren.
            	Zweitens gibt es einige invariable systemweite nicht-funktionale 
            	Anforderungen, die ein systemweites Dokument erfordern.
            	Daher meine Präferenz für eine einzige ergänzende 
            	Anforderungsdokumentation.
            </para>

          </note>

          <para>
        	Es sollte ein Abschnitt für jeden Hauptbereich der nicht-funktionalen 
        	Anforderungen geben. Die Checkliste von Ian Sommerville in seinem 
        	Buch <emphasis>Software Engineering</emphasis>	(Third Edition, 
        	Addison-Wesley, 1989) ist eine hilfreiche Anleitung.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<emphasis>Geschwindigkeit</emphasis>. Prozessorleistung, 
              	Anwender-/Ereignis-Antwortzeiten, Bildauffrischungszeiten.
              </para>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Grösse</emphasis>. Hauptspeicher (und mögliche 
              	Zwischenspeicher), Plattenkapazität.
              </para>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Leichte Anwendbarkeit</emphasis>. Ausbildungszeit, 
              	Stil und Details des Hilfesystems. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Zuverlässigkeit</emphasis>. Durchschnittliche 
              	Fehlerauftrittszeit, die Nichtverfügbarkeitswahrscheinlichkeit, 
              	die Fehlerrate, die Verfügbarkeit.
              </para>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Widerstandsfähigkeit</emphasis>. Wiederanlaufzeit 
              	nach einem Fehler, Prozentsatz der Ereignisse, die Fehler 
              	verursachen, die Wahrscheinlichkeit von Datenverlust bei einem 
              	Fehler. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<emphasis>Portabilität</emphasis>. Prozentsatz von zielabhängigem 
              	Code/Klassen, Anzahl der Zielsysteme. 
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Dazu sollten wir Abschnitte über die Umgebung (Temperatur, 
          	Feuchtigkeit, Blitzschutz) und Übereinstimmung mit Standards 
          	hinzufügen.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.argo_use_cases">

        <title>Anwendungsfälle in ArgoUML verwenden</title>

        <para>
        	ArgoUML erlaubt es Ihnen Anwendungsfalldiagramme zu zeichnen. 
        	Wenn Sie ein neues Projekt erstellen, ist ein Anwendungsfalldiagramm 
        	standardmäßig mit dem Namen <literal>Anwendungsfalldiagramm 1
        	</literal> angelegt. Wählen Sie diesen Diagrammnamen im Explorer 
        	durch einen Klick mit der Taste&nbsp;1 aus (der obere linke 
        	Quadrant des ArgoUML-Fensters).
        </para>

        <para>
        	Neue Anwendungsfalldiagramme können, wenn benötigt, über <literal>
        	Erzeuge Diagramm</literal> in der Menüzeile oder über die 
        	Werkzeugleiste erstellt werden. Sie werden im Bearbeitungsfenster 
        	(der obere rechte Quadrant des ArgoUML-Fensters) bearbeitet.
        </para>

        <sect2>

          <title>Akteure</title>

          <indexterm><primary>Erstelle neuen</primary><secondary>Akteur
          </secondary></indexterm>
          <indexterm><primary>Akteur</primary></indexterm>
          <para>
          Um einen Akteur dem Diagramm hinzuzufügen, klicken Sie mit der 
          Taste&nbsp;1 auf das Akteur-Symbol in der Werkzeugleiste des 
          Bearbeitenfensters (
          <guiicon>
          	<inlinemediaobject>
          		<imageobject>
          			<imagedata align="center"
          				fileref="images/icons/actor.gif" format="GIF" />
          		</imageobject>
          	</inlinemediaobject>
          </guiicon>)
          und dann klicken Sie mit der Taste&nbsp;1 an die Stelle, wo Sie ihn 
          plazieren wollen. Der Akteur kann nachträglich durch eine Taste&nbsp;1-
          Bewegung bewegt werden (z.B. über dem Akteur die Taste&nbsp;1 
          herunterdrücken, um diesen zu markieren, ihn an die neue Position 
          bewegen und die Taste&nbsp;1 loslassen, um den Akteur an diese Stelle 
          zu bringen).	 
          </para>

          <para>
          Mehrere Akteure können in einem Schritt durch einen Doppelklick mit 
          der Taste&nbsp;1 auf das Akteursymbol hinzugefügt werden. Jeder 
          nachträgliche Taste&nbsp;1-Klick wird einen Akteur in das Diagramm 
          bringen. Ein Klick mit der Taste&nbsp;1 auf das Auswahlsymbol (
          <guiicon>
          	<inlinemediaobject>
          		<imageobject>
          			<imagedata align="center"
          				fileref="images/icons/select.gif" format="GIF" />
          		</imageobject>
          	</inlinemediaobject>
          </guiicon>
          ) wird das Hinzufügen der Akteure stoppen.
          </para>

          <para>
          	Der Name des Akteurs wird in seinem Eigenschaftsfenster vergeben. 
          	Zuerst markieren Sie den Akteur (wenn nicht bereits markiert) im 
          	Bearbeitungsfenster mit Hilfe des Taste&nbsp;1-Klick. Dann klicken 
          	Sie auf das <literal>Eigenschaften</literal>-Register im 
          	Detailfenster. Der Name wird im Feld Name eingegeben und wird am 
          	Bildschirm erscheinen.
          </para>

          <para>
          	Als eine Abkürzung, die Ihnen erlaubt, den Namen direkt einzugeben, 
          	führen Sie mit der Taste&nbsp;1 einen Doppelklick auf den Namen des 
          	Akteurs im Bearbeitenfenster aus (oder geben Sie ihn einfach über 
          	die Tastatur ein, wenn der Akteur markiert ist). Dies ist ein 
          	komfortabler Weg, einen Namen für einen neuen Akteur einzugeben.
          </para>

          <para>
          	Wenn sie einen Akteur erstellt haben, werden Sie sehen, dass er im 
          	Exlorer (der obere linke Quadrant des ArgoUML-Fensters) erscheint. 
          	Dieser zeigt alle im UML-Design erstellten Modellelemente. Eine 
          	Kombinationsfeldliste am oberen Ende des Explorers beeinflusst die 
          	Reihenfolge der Modellelemente im Explorer. Die nützlichsten sind 
			<literal>Nach Paketen</literal> (Standard) und <literal>
	        Nach Diagrammen</literal>. Das letztere gruppiert die Modellelemente 
	        nach Diagrammen. 
          </para>

        </sect2>

        <sect2>

          <title>Anwendungsfälle</title>

          <indexterm><primary>Erstelle Neue</primary><secondary>Anwendungsfälle
          </secondary></indexterm>
          <indexterm><primary>Anwendungsfall</primary></indexterm>
          <para>
          	Das Vorgehen, um Anwendungsfälle hinzuzufügen, ist das gleiche wie 
          	für das Hinzufügen von Akteuren, allerdings indem das Anwendungsfall-
          	Symbol im Bearbeitenfenster verwendet wird (
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/use_case.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	).
          </para>

          <para>
          	Standardmäßig zeigen Anwendungsfälle in ArgoUML nicht ihre 
          	Erweiterungspunkte an (wird verwendet, um Beziehungen anzulegen). 
          	Sie können die Erweiterungspunkte auf einen von zwei Wegen anzeigen.
          </para>

          <orderedlist>

            <listitem>

              <para>
              	Markieren Sie den Anwendungsfall im Bearbeitenfenster mit einem 
              	klick der Taste&nbsp;1 aus, dann markieren Sie das Register 
              	<literal>Darstellung</literal> und klicken auf die Checkbox 
              	<literal>Erweiterungspunkte</literal>.
              </para>

            </listitem>

            <listitem>

              <para>
              	Durch klicken mit der Taste&nbsp;2 auf dem Anwendungsfall im 
              	Bearbeitenfenster erscheint ein kontext-sensitives Popup-Menü 
              	und aus diesem wählen Sie <literal>Darstellung/
              	Erweiterungspunkte anzeigen</literal> aus.
              </para>

            </listitem>

          </orderedlist>

          <para>
          	Der gleiche Ansatz kann für das verstecken des 
          	Erweiterungspunktbereiches verwendet werden.
          </para>

          <sect3>

            <title>
            	Einem Anwendungsfall einen Erweiterungspunkt hinzufügen
            </title>

            <indexterm><primary>Erstelle neuen</primary><secondary>
            Erweiterungspunkt</secondary></indexterm>
            <indexterm><primary>Erweiterungspunkt</primary></indexterm>
            <para>
            	Es gibt zwei Wege, einem Anwendungsfall einen Erweiterungspunkt 
            	hinzuzufügen.
            </para>

            <orderedlist>

              <listitem>

                <para>
                	Markieren Sie mit der Taste&nbsp;1 den Anwendungsfall im 
                	Bearbeitenfenster. Dann klicken Sie in der Werkzeugleiste 
                	auf das Symbol <literal>Neue Erweiterung</literal> (
			 		<guiicon>
			 			<inlinemediaobject>
			 				<imageobject>
			 					<imagedata align="center"
			 						fileref="images/icons/extension_point.gif" format="GIF" />
		 					</imageobject>
						 	</inlinemediaobject>
		 				</guiicon>
	 				und ein neuer Erweiterungspunkt mit Standardnamen und -ort 
	 				wird im Anschluss an die exisiterenden 
	 				Erweiterungspunkte hinzugefügt.
                </para>

                <note>

                  <para>
                  	Das Symbol <literal>Erweiterungspunkt hinzufügen</literal> 
                  	ist inaktiv, bis ein Anwendungsfall markiert ist.
				  </para>

                </note>

              </listitem>

              <listitem>

                <para>
                	Markieren Sie den Anwendungsfall im Bearbeitenfenster mit 
                	dem Taste&nbsp;1-Klick und dann wählen Sie das Register 
                	Eigenschaften im Detailfenster aus. Ein Taste&nbsp;2-Klick 
                	über dem Feld <literal>Erweiterungspunkt:</literal> wird 
                	ein kontext-sensitives Popup-Menü öffnen. Markieren Sie 
                	<literal>Hinzufügen</literal> aus, um einen neuen 
                	Erweiterungspunkt hinzuzufügen.
                </para>

                <para>
                	Wenn bereits ein Erweiterungspunkt existiert, werden Sie in 
                	diesem Feld im Register Eigenschaften angezeigt. Der neue 
                	Erweiterungspunkt wird unmittelbar vor dem Eintrag über dem 
                	das Popup-Menü aufgerufen wurde eingefügt. Diese Reihenfolge 
                	kann später durch die <literal>Nach oben</literal> und 
                	<literal>Nach unten</literal>-Einträge im Popup-Menü 
                	verändert werden.
                </para>

              </listitem>

            </orderedlist>

            <para>
            	Welche Methode auch immer verwendet wird, der neue 
            	Erweiterungspunkt wird markiert und sein Register Eigenschaften 
            	kann im Detailfenster angezeigt werden. Der Name und der Ort 
            	des Erweiterungspunktes sind Freitext, der die entsprechenden 
            	Felder des Registers Eigenschaften setzt.
            </para>

            <para>
            	Ein exisiterender Erweiterungspunkt kann in seinem Register 
            	Eigenschaften bearbeitet werden. Das Register Eigenschaften 
            	kann auf zwei Wegen erreicht werden.
            </para>

            <orderedlist>

              <listitem>

                <para>
                	Wenn für den Anwendungsfall der Erweiterungspunkt-Bereich 
                	im Diagramm angezeigt wird, markieren Sie den Anwendungsfall 
                	mit dem Taste&nbsp;1-Klick und dann markieren Sie den 
                	Erweiterungspunkt mit einem weiteren Taste&nbsp;1-Klick. 
                	Das Register Eigenschaften kann dann im Detailfenster 
                	ausgewählt werden.
                </para>

              </listitem>

              <listitem>

                <para>
                	Im anderen Fall markieren Sie den Anwendungsfall und sein 
                	Register Eigenschaften im Detailfenster. Ein Taste&nbsp;1-
                	Klick auf den gewünschten Eintrag im Feld <literal>
                	Erweiterungspunkte</literal> wird das Register Eigenschaften 
                	für den Erweiterungspunkt im Detailfenster zur Anzeige 
                	bringen.
                </para>

              </listitem>

            </orderedlist>

            <para>
            	Die Felder Name und Ort des Erweiterungspunktes können 
            	bearbeitet werden.
            </para>

            <para>
            	Wenn der Erweiterungspunktbereich angezeigt wird, ist der 
            	Doppelklick auf den Erweiterungspunkt eine Abkürzung und erlaubt 
            	es Ihnen den Text direkt einzugeben. Dies wird analysiert, um 
            	den Namen und den Ort für den Erweiterungspunkt zu setzen.
            </para>

            <para>
            	Erweiterungspunkte dürfen gelöscht oder deren Reihenfolge 
            	mit Hilfe des Taste&nbsp;2-Popup-Menüs über dem Feld <literal>
            	Erweiterungspunkte</literal> im Register Eigenschaften des 
            	Anwendungsfalles geändert werden.
            </para>

            <para>
            	Nachdem Sie einen Erweiterungspunkt erstellt haben, wird er im 
            	Explorer (oberer linker Quadrant des ArgoUML-Fensters) 
            	erscheinen. Erweiterungspunkte werden immer als Sub-Baum ihres 
            	eigenen Anwendungsfalles dargestellt. 
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Assoziationen</title>

          <indexterm><primary>Erzeuge neue</primary>
          <secondary>Assoziation in einem Anwendungsfalldiagramm 
          </secondary></indexterm>
          <indexterm><primary>Assoziation</primary><secondary>in einem 
          Anwendungsfalldiagramm</secondary></indexterm>
          <para>
          	 Um im Diagramm einen Anwendungsfall mit einem Akteur zu verbinden, 
          	 klicken Sie der Taste&nbsp;1 auf das Assoziationssymbol in der 
          	 Editierwerkzeugleiste (
	         <guiicon>
	          <inlinemediaobject>
	          	<imageobject>
	          		<imagedata align="center"
	          			fileref="images/icons/association.gif" format="GIF" />
	          	</imageobject>
	          </inlinemediaobject>
	         </guiicon>).
	         Auf dem Anwendungsfall halten Sie die Taste&nbsp;1 gedrückt, gehen 
	         zum Akteur und lassen die Taste&nbsp;1 los (oder beginnen Sie beim 
	         Akteur und enden am Anwendungsfall). 
          </para>

          <para>
          	Dadurch wird eine gerade Linie zwischen dem Akteur und dem 
          	Anwendungsfall erzeugt. Sie können die Linie segmentieren, indem 
          	Sie die Taste&nbsp;1 auf der Linie gedrückt halten und vor dem 
          	loslassen bewegen. Der Linie wird ein Schnittpunkt hinzugefügt, den 
          	Sie mit der Taste&nbsp;1 bewegen können. Durch Aufnehmen und durch 
          	verschieben zu einem Ende der Linie kann der Schnittpunkt entfernt 
          	werden.
          </para>

          <para>
          Es können mehrere Assoziationen gleichzeitig hinzugefügt werden, indem 
          Sie auf das Assoziationssymbol einen Taste&nbsp;1-Doppelklick 
          ausführen. Jede darauf folgende Taste&nbsp;1-drücken/bewegen/loslassen-
          Sequenz wird einen Akteur mit einem Anwendungsfall verbinden. Das 
          Anklicken des Auswahlsymbols (
          <guiicon>
          	<inlinemediaobject>
          		<imageobject>
          			<imagedata align="center"
          				fileref="images/icons/select.gif" format="GIF" />
          		</imageobject>
          	</inlinemediaobject></guiicon>) 
          mit der Taste&nbsp;1 stoppt das Hinzufügen von Assoziationen.
          </para>

          <para>
          Es ist auch möglich, Assoziationen mit Hilfe der kleinen <quote>Griffe
          </quote> hinzuzufügen, die links und rechts eines Anwendungsfalles 
          oder eines Akteurs erscheinen, wenn dieser markiert ist und sich die 
          Maus darüber befindet. Das Ziehen des Griffes von einem Anwendungsfall 
          zu einem Akteur wird eine Assoziation zu diesem Akteur erzeugen (und 
          umgekehrt beim Ziehen eines Griffes von einem Akteur zu einem 
          Anwendungsfall).
          </para>

          <para>
          	Das Ziehen eines Griffes von einem Anwendungsfall in den leeren 
          	Raum wird einen neuen Akteur am anderen Ende erzeugen. Umgekehrt 
          	wird das Ziehen eines Griffes von einem Akteur in den leeren Raum 
          	einen neuen Anwendungsfall erzeugen.
          </para>

          <para>
          	Es ist möglich, der Assoziation einen Namen zu geben, der die 
          	Beziehung des Akteurs zum Anwendungsfall beschreibt. Obgleich das 
          	gewöhnlich nicht notwendig ist. Dies wird über das 
          	Eigenschaftsregister der Assoziation getan. Solch ein Name erscheint 
          	entlang der Assoziation in der Nähe der Mitte.
          </para>

          <sect3 id="s3.tut.req_argo_navigation">

            <title>Navigation einstellen</title>

            <indexterm><primary>Navigation einstellen</primary><secondary>auf 
            eine Assoziation in einem Anwendungsfalldiagramm</secondary>
            </indexterm><indexterm>
            <primary>Navigation</primary><secondary>Einstellen</secondary></indexterm>
            <para>
            	Es gibt zwei Wege, die Navigation einer Assoziation einzustellen.
            </para>

            <orderedlist>

              <listitem>

                <para>
                	Das Anklicken der Assoziation mit der Taste&nbsp;2 bringt 
                	ein kontextsensitives Popup-Menü nach oben. Das Untermenü 
                	<literal>Navigierbarkeit</literal> enthält Optionen für die 
                	bidirektionale Navigation (der Standard, ohne Pfeile) und 
                	für die Navigierbarkeit Akteur-&gt;Anwendungsfall und 
                	Anwendungsfall-&gt;Akteur.
                </para>

              </listitem>

              <listitem>

                <para>
                	Verwenden Sie die Taste&nbsp;1, um die Assoziation zu 
                	markieren und markieren Sie sein Eigenschaftsregister im 
                	Detailfenster. Dieses enthält ein Feld mit der Bezeichnung 
                	<literal>Verbindungen:</literal> mit Einträgen für 
                	jedes mit einem Akteur oder Anwendungsfall verbundenen Ende 
                	und seiner Kardinalität. Markieren Sie das Ende welches das 
                	Ende des Pfeiles darstellt mit einem Taste&nbsp;1-
                	Doppelklick. Dies bringt das Eigenschaftsregister für das 
                	Assoziationsende nach oben. Verwenden Sie den Taste&nbsp;1-
                	Klick, um die Markierung des Kästchens <literal>navigierbar
                	</literal> zu entfernen.
	            </para>

                <note>

                  <para>
                  	Dies erscheint anti-intuitiv, aber tatsächlich sind 
                  	Assoziationen standardmäßig in beide Richtungen navigierbar 
                  	(wenn keine Pfeile angezeigt werden). Dieser Prozess ist 
                  	eher das <emphasis>Ausschalten</emphasis> der Navigation 
                  	an einem Ende, als das Einschalten am anderen Ende.
                  </para>

                </note>

              </listitem>

            </orderedlist>

            <para>
            	Sie werden sehen, dass es möglich ist, einem Assoziationsende 
            	im Eigenschaftsregister einen Namen zu geben. Dieser Name wird 
            	an dem Ende der Assoziation erscheinen und kann dazu verwendet 
            	werden die <emphasis>Rolle</emphasis> zu beschreiben, die ein 
            	Akteur oder ein Anwendungsfall in dieser Assoziation spielt.
            </para>

            <para>
           		Ein Zeitmanagmentsystem für ein Geschäft kann zum Beispiel 
           		Anwendungsfälle für die Vervollständigung der Zeittabellen und 
           		für das Abzeichnen der Zeittabellen aufweisen. Ein Akteur 
           		Mitarbeiter kann in beides involviert sein. Einmal als 
           		Mitarbeiter und zum anderen in der Rolle als Manager.
            </para>

          </sect3>

          <sect3>

            <title>Die Kardinalität einstellen</title>

            <indexterm><primary>Kardinalität einstellen</primary><secondary>für 
            eine Assoziation in einem Anwendungsfalldiagramm</secondary></indexterm>
            <indexterm>
            <primary>Kardinalität</primary><secondary>Einstellen</secondary></indexterm>
            <para>
            	Es gibt zwei Wege, die Kardinalität am Ende einer Assoziation 
            	einzustellen.
            </para>

            <orderedlist>

              <listitem>

                <para>
                	Der Taste&nbsp;2-Klick über dem Ende einer Assoziation 
                	verursacht das Erscheinen eines kontextsensitiven Popup-
                	Menüs mit einem Untermenü <literal>Kardinalität</literal>.
                	Dieses erlaubt es Ihnen, auszuwählen aus <literal>1</literal> 
                	(dem Standard), <literal>0..1</literal>, <literal>0..*
                	</literal> und <literal>1..*</literal>.
                </para>

              </listitem>

              <listitem>

                <para>
                	Bringen Sie das Eigenschaftsregister für das Assoziationsende 
                	wie in "Navigation einstellen" nach oben (siehe zweite 
                	Option in <xref linkend="s3.tut.req_argo_navigation"/>). 
                	Ein Dropdown-Menü gibt Ihnen die Kardinaltitätsoptionen aus, 
                	die ausgewählt werden können.
	            </para>

              </listitem>

            </orderedlist>

            <para>
            	Der zweite dieser beiden Ansätze hat mehr Optionen, obgleich 
            	ArgoUML es dem Anwender aktuell nicht erlaubt eine beliebige 
            	Kardinaltität einzustellen.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Hierarchische Anwendungsfälle</title>

          <indexterm><primary>Hierarchische Anwendungsfälle</primary></indexterm>
          <indexterm><primary>Anwendungsfall, 
          hierarchisch</primary></indexterm>

          <para>
          	Der Originalentwurf der UML erlaubt es, dass Anwendungsfälle in 
          	Paketen gruppiert, sowie Beziehungen zwischen ihnen spezifiziert 
          	werden können.
          	In ArgoUML werden nur die Beziehungsmechanismen unterstützt.
          	Alle drei Beziehungen, die auf Anwendungsfälle angewendet werden 
          	können werden unterstützt. Dieses sind <emphasis>include</emphasis>, 
          	<emphasis>extend</emphasis> und <emphasis>generalization</emphasis>.
          </para>

          <sect3>

            <title>Include</title>

            <indexterm><primary>Erzeuge neue</primary><secondary>Include 
            Beziehung in einem Anwendungsfalldiagramm</secondary></indexterm>
            <indexterm><primary>Include 
            Beziehung</primary><secondary>in einem 
            Anwendungsfalldiagramm</secondary></indexterm>
            <indexterm>
            <primary>Beziehung</primary><secondary>Include</secondary></indexterm>
            <para>
            	Die Prozedur zum Hinzufügen einer Include-Beziehung ist die 
            	gleiche, wie für das Hinzufügen einer Assoziation. Allerdings 
            	verwenden Sie das Include-Symbol aus der Editier-Werkzeugleiste
				 (
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/include.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject></guiicon>) 
	            um die beiden Anwendungsfälle zu verbinden.
            </para>

            <para>
            	Seit Include-Beziehungen richtungsgebunden sind, ist die 
            	Reihenfolge mit der die beiden Enden markiert werden wichtig. 
            	Der <emphasis>einbindende</emphasis> (Haupt) Anwendungsfall 
            	sollte zuerst (Taste&nbsp;1 drücken) und der 
            	<emphasis>eingebundene</emphasis> (sekundäre) Anwendungsfall 
            	als zweiter (Taste&nbsp;1 loslassen) markiert werden.
            </para>

            <para>
            	Es ist möglich die Include-Beziehungen mit Hilfe des 
            	Eigenschaftsregisters zu benennen. Dies wird aber selten getan 
            	und wird im Anwendungsfalldiagramm nicht dargestellt.
            </para>

          </sect3>

          <sect3>

            <title>Extend</title>

            <indexterm><primary>Erzeuge neue</primary><secondary>Extend- 
            Beziehung in einem Anwendungsfalldiagramm</secondary></indexterm>
            <indexterm><primary>Extend- 
            Beziehung</primary><secondary>in einem  
            Anwendungsfalldiagramm</secondary></indexterm>
            <indexterm>
            <primary>Beziehung</primary><secondary>Extend</secondary></indexterm>
            <para>
            	Die Prozedur zum Hinzufügen einer Extend-Beziehung ist die 
            	gleiche, wie für das Hinzufügen einer Include-Beziehung. 
            	Allerdings verwenden Sie das Extend-Symbol aus der Editier-
            	Werkzeugleiste
				 (
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/extend.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject></guiicon>) 
	            um die beiden Anwendungsfälle zu verbinden.
            </para>

            <para>
            	Wie bei den Include-Beziehungen ist die Reihenfolge des 
            	Markierens wichtig. In diesem Fall sollte der 
            	<emphasis>erweiternde</emphasis> 
	            (sekundäre) Anwendungsfall zuerst (Taste&nbsp;1 drücken) und 
	            dann der <emphasis>erweiterte</emphasis> (Haupt-) zweite 
	            Anwendungsfall markiert werden (Taste&nbsp;1 loslassen).
            </para>

            <note>

              <para>
              	Dies ist gegenüber der Include-Beziehung genau umgekehrt, 
              	reflektiert aber die Art und Weise, wie Designer denken. Die 
              	Tatsache, dass der Pfeil des Extend-Symboles nach oben zeigt (
              	im Gegensatz zum Include-Symbol) sollte Ihnen helfen, sich daran 
              	zu erinnern.
              </para>

            </note>

            <para>
            	Um eine Bedingung für die Extend-Beziehung einzugeben, markieren 
            	Sie die Extend-Beziehung im Editierfenster (Taste&nbsp;1-Klick) 
            	und öffenen Sie das Eigenschaftsregister im Detailfenster (
            	Taste&nbsp;1-Klick auf das Register). Der Text der Bedingung 
            	kann in das <literal>Bedingung</literal>s-Feld eingegeben werden. 
            	Lange Bedingungen sollten - sofern gewünscht - über mehrere 
            	Zeilen aufgeteilt werden. Die Bedingung wird unterhalb der 
            	<literal>&laquo;extend&raquo;</literal>-Kennzeichnung im 
            	Diagramm dargestellt.
            </para>

            <para>
            	Es ist möglich die Extend-Beziehungen mit Hilfe des 
            	Eigenschaftsregisters zu benennen. Dies wird aber selten getan 
            	und wird im Anwendungsfalldiagramm nicht dargestellt.
            </para>

          </sect3>

          <sect3>

            <title>Generalisierung</title>

            <indexterm><primary>Erzeuge neue 
            </primary><secondary>Generalisierungs-Beziehung in einem  
            Anwendungsfalldiagramm</secondary></indexterm>
            <indexterm><primary>Generalisierungs- 
            Beziehung</primary><secondary>in einem  
            Anwendungsfalldiagramm</secondary></indexterm>
            <indexterm>
            <primary>Beziehung</primary><secondary>Generalisierung</secondary></indexterm>
            <para>
            	Die Prozedur zum Hinzufügen einer Generalisierung ist die 
            	gleiche, wie für das Hinzufügen einer Extend-Beziehung. 
            	Allerdings verwenden Sie das Generalisierungs-Symbol aus der 
            	Editier-Werkzeugleiste (
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/generalization.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            ).
	        </para>
	
	        <para>
	        	Seit die Generalisierung eine gerichtete Beziehung ist, ist die 
	        	Reihenfolge des Markierens wichtig. Der spezialisierte 
	        	Anwendungsfall sollte zuerst (Taste&nbsp;1 drücken) und der 
	        	generalisierte als zweites markiert werden (Taste&nbsp;1 
	        	loslassen).
	        </para>

            <para>
            	Es ist auch möglich, die Generalisierung mit Hilfe der kleinen 
            	Griffe, die oben und unten am Anwendungsfall erscheinen, wenn 
            	er markiert ist, hinzuzufügen. Das Ziehen des oberen Griffes auf 
            	einen anderen Anwendungsfall erzeugt eine Generalisierung. Der 
            	Original-Anwendungsfall ist das spezialisierte Ende und der 
            	Anwendungsfall auf den der Griff gezogen wurde wird das 
            	generalisierte Ende. Das ziehen in den leeren Raum wird einen 
            	neuen Anwendungsfall mit einem generalisierten Ende erzeugen.
            </para>

            <para>
            	Ähnlich ist es beim Ziehen des unteren Griffes. Dies erzeugt 
            	eine Generalisierung bei der der Original-Anwendungsfall das 
            	<emphasis>generalisierte</emphasis>Ende darstellt.
            </para>

            <para>
            	Die Generalisierung ist auch zwischen Akteuren erlaubt, obwohl 
            	dieser Gebrauch ausserhalb des Bezugsbereiches dieses Tutorials 
            	liegt. Im Gegensatz zu den Anwendungsfällen gibt es keine 
            	Generalisierungs-Griffe bei Akteuren, so dass Generalisierungen 
            	mit Hilfe der Symbole in der Werkzeugleiste erzeugt werden 
            	müssen.
            </para>

            <para>
            	Es ist möglich die Generalisierungs-Beziehungen mit Hilfe des 
            	Eigenschaftsregisters zu benennen. Wird ein Name eingegeben, 
            	wird dieser im Anwendungsfalldiagramm dargestellt.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Stereotypen</title>

          <indexterm><primary>Stereotypen</primary><secondary>in  
          Anwendungsfalldiagrammen</secondary></indexterm>
          <para>
          	Die UML enthält das Konzept der <emphasis>Schablonen</emphasis>, um 
          	die Basisnotation zu erweitern.
          	Es mag zum Beispiel nützlich erscheinen, ein Problem sowohl auf 
          	Geschäftsebene als auch auf der Ingenieur-Ebene zu modellieren. 
          	In diesem Fall unterscheidet die OMG zwischen einem PIM und einem 
          	PSM.
          	Für beide werden wir Anwendungsfälle benötigen, aber die 
          	Anwendungsfälle auf der Geschäftsebene enthalten eine andere Art von 
          	Informationen als die auf der Ingenieurs-Ebene.
          	Sie nutzen sehr wahrscheinlich eine andere Sprache und Notation in 
          	ihren darunter liegenden Anwendungsfallspezifikationen.
          </para>

          <para>
	          <emphasis>Stereotypen</emphasis> werden zur Kennzeichnung von 
	          UML-Modellelementen wie Anwendungsfälle benutzt, um darzustellen, 
	          dass diese zu einer bestimmten Kategorie gehören. Diese 
	          Kennzeichen werden in guillemots (
	          <literal>&laquo;&nbsp;&raquo;</literal>) über dem Namen des 
	          Modellelementes im Diagramm dargestellt. Der UML-Standard 
	          definiert eine Anzahl von Standard-Stereotypen und der Anwender 
	          darf weitere Stereotypen selbst definieren.
          </para>

          <para>
          	Sie werden sehen, dass ArgoUML in jedem Eigenschaftsregister eine 
          	Drop-Down-Auswahl <literal>Stereotypen</literal> aufweist. Dieses 
          	ist mit den Standard-Stereotypen gefüllt, zu denen Sie Ihre eigenen 
          	hinzufügen können.
          </para>

          <para>
          	Die Details der Schablonen liegt ausserhalb des Bezugsbereiches 
          	dieses Tutorials. Das Referenzhandbuch (siehe 
	        <xref linkend="s1.ref.stereotype"/>) dokumentiert die von ArgoUML 
	        bereitgestellte Unterstützung.
          </para>

          <warning>

            <para>
            	In ArgoUML fehlen einige der Standard-UML-Stereotypen. Zusätzlich 
            	stellen nicht alle Modellelemente die Stereotypen im Diagramm 
            	dar. Aktuell sind sie in Anwendungsfällen und Akteuren enthalten.
            </para>

          </warning>

        </sect2>

        <sect2>

          <title>Dokumentation</title>

          <indexterm><primary>Dokumentation in  
          Anwendungsfalldiagrammen</primary></indexterm>
          <para>
          	ArgoUML enthält einige einfache Dokumentationsmöglichkeiten, die 
          	mit den Modellelementen im Diagramm verknüpft sind. Hauptsächlich 
          	sollten diese nur zum Aufzeichnen der Ablageorte der Dokumente 
          	verwendet werden, nicht für die aktuelle Dokumentation selbst.
          </para>

          <para>
          	Die Dokumentation für ein bestimmtes Modellelement wird im 
          	Dokumentationsregister im Detailfenster aufgezeichnet (der unten 
          	rechts befindliche Quadrant des Bildschirms).
          </para>

          <para>
          	Zusätzlich können in den Diagrammen Kommentare mit Hilfe des Text-
          	Symboles der Editier-Werkzeugleiste hinzugefügt werden (
	          <guiicon>
	          	<inlinemediaobject>
	          		<imageobject>
	          			<imagedata align="center"
	          				fileref="images/icons/text.gif" format="GIF" />
	          		</imageobject>
	          	</inlinemediaobject>
	          </guiicon>).
          </para>

          <para>
          	Es wird empfohlen, dass ein Anwendungsfalldiagramm das 
          	Dokumentationsregister des Akteurs nutzen sollte, um die 
          	Informationen über den Akteur aufzuzeichnen. Oder, sollte der 
          	Akteur sehr komplex sein, sich auf ein separates Dokument beziehen, 
          	welches die Information über den Akteur beinhaltet.
          </para>

          <para>
          	Das Dokumentationsregister des Anwendungsfalles sollte den Ablageort 
          	der Anwendungsfalldokumentation aufzeichnen. Die Information in der 
          	Anwendungsfallspezifikation (für alle, auch den einfachsten 
          	Anwendungsfällen) ist zu komplex, als dass sie direkt in das 
          	Register eingegeben werden könnte.
          </para>

          <para>
          	Das Projekt sollte auch ein separates Visionsdokument haben und eine 
          	ergänzende Anforderungsspezifikation. Ein Kommentar in Diagrammen 
          	kann dazu verwendet werden, sich auf diese zu beziehen, wenn der 
          	Anwender dies nützlich findet.
          </para>

          <warning>

            <para>
            	Das Dokumentationsregister enthält ein Kästchen <literal>
            	Veraltet</literal>. Der Status dieses Kennzeichens bleibt in der 
            	aktuellen Release von ArgoUML beim Speichern und Laden nicht 
            	erhalten.
	        </para>

          </warning>

        </sect2>

        <sect2>

          <title>Systemgrenzen</title>

          <indexterm><primary>Systemgrenzen in 
          Anwendungsfalldiagrammen</primary></indexterm>
          <para>
          	ArgoUML enthält eine Reihe von Werkzeugen, um beliebige grafische 
          	Kommentare in Diagramme einzufügen (wir lernten das Text-Tool bereits 
          	kennen). Diese finden Sie auf der rechten Seite der Editier-
          	Werkzeugleiste und sind im Referenzhandbuch vollständig dokumentiert 
          	(siehe <xref linkend="ch.ref.editpane"/>).
          </para>

          <para>
          	Das Rechteck kann verwendet werden, um die Grenzen des Systems 
          	darzustellen. Nutzen Sie das Taste&nbsp;2-kontextsensitive Popup-
          	Menü <literal>Reihenfolge</literal>, um diese hinter alle anderen 
          	Elemente zu plazieren. Es gibt jedoch keinen Weg, die Füllfarbe zu 
          	ändern. Sie werden es daher vorziehen, die Systemgrenzen aus vier 
          	einzelnen Linien zu zeichnen. Dies ist die Methode, die für die 
          	Diagramme in diesem Kapitel verwendet wurde.
          </para>

          <note>

            <para>
            Das Editierfenster in ArgoUML hat ein Gitter, in das Objekte beim 
            zeichnen einrasten. Die Größe dieses Gitters und seine Auswirkungen 
            können durch das <literal>Ansicht</literal>-Menü (verwenden Sie 
            <literal>Raster einstellen</literal> und <literal>Einrasten 
            einstellen</literal>) verändert werden. Dies ist im Referenzhandbuch 
            vollständig beschrieben (siehe <xref linkend="ch.ref.menu"/>).
            </para>

          </note>

        </sect2>

      </sect1>

      <sect1 id="s3.tut.req_case_study">

        <title>Fallstudie</title>

        <sect2>

          <title>Visions-Dokument</title>

          <indexterm><primary>Visions-Dokument</primary><secondary>Fallstudie
          </secondary></indexterm>
          <para>
          Ein Visionsdokument enthält mehr als nur die Dinge, die für die 
          Modellierung erforderlich sind. Es enthält auch finanzielle und 
          verwaltungsrelevante Informationen. Die folgenden Abschnitte sind 
          solche Teile eines Visionsdokumentes 
          <xref linkend="s2.tut.vision_document"/>. 
          In der Praxis muss dieses Format nicht sklavisch eingehalten werden, 
          aber es ist hier für die Konsistenz erforderlich.
          </para>

          <sect3>

            <title>Zusammenfassung</title>

            <para>
            	Die Firma möchte eine Serie von Geldautomaten produzieren und 
            	vermarkten. Der Zweck dieses Projektes ist es, die Hardware und 
            	die Software zu produzieren die beides ist: Wartbar und Robust.
            </para>

          </sect3>

          <sect3>

            <title>Ziele</title>

            <para>
            	Bessere entworfene Produkte auf Basis neuer Technologien 
            	produzieren. Wir folgen der MDA-Philosophie der OMG indem wir 
            	zuerst ein plattformunabhängiges Modell (Platform Independent 
            	Model (PIM)) erzeugen. Da die aktuelle Modellierungstechnologie 
            	die Verwaltung der Integrität der Verbindung zwischen der PIM 
            	und den plattformspezifischen Modellen (Platform Specific 
            	Model (PSM)) nicht zulassen, wird die PIM vergleichsweise 
            	stabil werden bevor die erste Iteration der PSM produziert wird.
            	Die Softwareplattform wird die Java-Technologie sein. Das 
            	System wird einen einfachen Userid (von der Geldautomatenkarte) 
            	und Kennwort (oder PIN)-Mechanismus verwenden.
            </para>

          </sect3>

          <sect3>

            <title>Der Markt</title>

            <para>
            	Das aktuell auf dem Markt vorhandene Equipement basiert auf 
            	älterer Technologie bei der Hard- und Software. Diese 
            	Technologie hat noch nicht das Ende seiner Lebensdauer erreicht, 
            	was es unwahrscheinlich macht, das die Hersteller dieser 
            	Produkte diese in der nahen Zukunft austauschen werden. Auf der 
            	anderen Seite ist neuere Technologie verfügbar, die uns einen 
            	nennenswerten Vorteil verschafft, wenn wir sie jetzt 
            	implementieren.
            </para>

          </sect3>

          <sect3>

            <title>Projektbeteiligte</title>

            <para>
            	Zwischen den Projektbeteiligten dieses Systemes befinden sich die 
            	Entwicklungsabteilung, die Wartung und der zentrale Computer-
            	Betrieb. Die vollständige Liste der Projektbeteiligten und die 
            	spezifischen Personen, die diese repräsentieren sind:
            </para>

            <itemizedlist>

              <listitem>

                <para><emphasis>Entwicklung</emphasis>.  Bunny, 
                Bugs</para>

              </listitem>

              <listitem>

                <para>
                	<emphasis>Wartung</emphasis>. Hardy, Oliver
                </para>

              </listitem>

              <listitem>

                <para>
                	<emphasis>Computerbetrieb</emphasis>. Laurel, Stanley
                </para>

              </listitem>

              <listitem>

                <para>
                	<emphasis>Geschäftsführer</emphasis>. Hun, Atilla von
                </para>

              </listitem>

              <listitem>

                <para>
                	<emphasis>Marketing</emphasis>. Harry, Oil Can
                </para>

              </listitem>

            </itemizedlist>

          </sect3>

          <sect3>

            <title>Haupteigenschaften</title>

            <para>
            	Geld aufbewahren, Geld abheben und Kontostandsabfragen der 
            	Kunden. Kunden sind Personen, die Konten bei ihrer Bank haben 
            	aber auch Personen, die Abhebungen von Konten anderer Banken 
            	oder von Kreditkarten vornehmen wollen.
            </para>

            <para>
            	Wartung des Equipements durch die Bankingenieure. Diese Aktion 
            	kann durch den Ingenieur initiiert auf Basis eines 
            	Wartungsplanes werden. Sie kann aber auch durch das Equipement 
            	initiiert werden, die den Ingenieur ruft, wenn es einen internen 
            	Fehler entdeckt.
            </para>

            <para>
            	Das Herausnehmen der Einlagen und das Aufladen von Geld erfolgt 
            	durch Beamte der lokalen Bankfiliale. Diese Aktionen werden 
            	entweder auf Basis eines Planes ausgeführt, oder wenn der 
            	Zentralcomputer feststellt, dass der Geldvorrat zu gering oder 
            	die Einlagenkassette fast voll ist.
            </para>

            <para>
            	Es wird ein Nachweis von allen Aktivitäten erzeugt und 
            	periodisch an den Zentralcomputer der Banken gesandt. Es soll 
            	dem Wartungsingenieur möglich sein, eine Kopie des Nachweislog 
            	auf einer Diskette für den Transport zum Zentralcomputer zu 
            	speichern.
            </para>

            <para>
            	Es wird Wähl- und Standleitungssupport benötigt. Der Geldautomat 
            	soll auch weiterarbeiten können, wenn die Kommunikation mit dem 
            	Zentralcomputer nicht verfügbar ist.
            </para>

          </sect3>

          <sect3>

            <title>Randbedingungen</title>

            <para>
            	Das Projekt muss innerhalb von 9 Monaten abgeschlossen sein. Es 
            	darf nicht mehr als 1.750.000 USD ausschliesslich der 
            	Produktionskosten kosten. Komponenten können ausserhalb 
            	produziert werden aber die Basisarchitektur als auch die 
            	Infrastruktur wird im Haus entworfen. Eine enge Zusammenarbeit 
            	muss zwischen der Softwareentwicklung und dem Design, der 
            	Entwicklung und der Produktion der Hardware sichergestellt 
            	werden. Weder die Hardware noch die Software darf als unabhänige 
            	Variable betrachtet werden. Sie müssen immer gleichzeitig 
            	betrachtet werden.
            </para>

          </sect3>

          <sect3>

            <title>Anhang</title>

            <para>
            	Im Folgenden finden Sie Akteure, die diese Vision direkt 
            	unterstützen. Zusätzliche Akteure können später identifiziert 
            	werden, sofern Sie zur Unterstützung dieser Vision oder der 
            	Technologie erforderlich sind. Sie sollten nicht zu dieser 
            	Liste hinzugefügt werden, es sei denn, sie sind zur direkten 
            	Unterstützung dieser Vision, wie in diesem Dokument beschrieben, 
            	erforderlich.
            </para>

            <itemizedlist>

              <listitem>

                <para>Zentralcomputer</para>

              </listitem>

              <listitem>

                <para>Kunde</para>

              </listitem>

              <listitem>

                <para>Lokaler Bankbeamter</para>

              </listitem>

              <listitem>

                <para>Wartungsingenieur</para>

              </listitem>

            </itemizedlist>

            <para>
            	Im Folgenden finden Sie Anwendungsfälle, die diese Vision 
            	direkt unterstützen. Zusätzliche Anwendungsfälle können später 
            	identifiziert werden, wenn Sie zur Unterstützung dieser Vision 
            	oder der Technologie erforderlich sind oder die hier 
            	aufgelisteten Anwendungsfälle unterstützen. Sie sollten dieser 
            	Liste nicht hinzugefügt werden, es sei denn, sie sind für die 
            	direkte Unterstützung der Vision, wie in diesem Dokument 
            	beschrieben, erforderlich.
            </para>

            <itemizedlist>

              <listitem>

                <para>Prüfen</para>

              </listitem>

              <listitem>

                <para>Kunden nutzt den Automaten</para>

              </listitem>

              <listitem>

                <para>Wartung</para>

              </listitem>

            </itemizedlist>

          </sect3>

        </sect2>

        <sect2>

          <title>Akteure und Anwendungsfälle identifizieren</title>

          <para>
          	Für die Geldautomaten-Fallstudie werden wir die Beispiele in 
			<xref linkend="s1.tut.req_process_output"/>, 
	        <xref linkend="fig.tut.atm_use_case_diagram_include"/> und 
	        <xref linkend="fig.tut.atm_use_case_diagram_extend"/>, und 
	        fortschreiben, um zusätzliche Akteure und Anwendungsfälle zu 
	        identifizieren, die unser Geldautomatenmodell enthält.
	        <xref linkend="fig.tut.atm_use_case_diagram_include"/> und 
	        <xref linkend="fig.tut.atm_use_case_diagram_extend"/> 
	        erläutert die grundsätzlichen Konzepte und Komponenten des 
	        Anwendungsfalldiagrammes wie Anwendungsfälle, Akteure, 
	        Kardinalität und Include-/Extend-Beziehungen. Sie zeigen die 
	        Beziehungen zwischen den Akteuren und den Anwendungsfällen und 
	        demonstieren wie diese Akteure und Anwendungsfälle miteinander 
	        interagieren. 
          </para>

          <para>
          In <xref linkend="fig.tut.atm_use_case_diagram_include"/> sehen wir 
          ein Anwendungsfalldiagramm für einen Geldautomaten, bestehend aus 
          &laquo;include&raquo;-Beziehungen für die Anwendungsfälle Geldautomat 
          warten und Geldautomat nutzen. Geldautomat warten wird darüber hinaus 
          durch zwei Anwendungsfälle definiert: &quot;Equipement warten&quot; 
          und &quot;Geldautomat neu starten&quot;.
          Geldautomat nutzen wurde darüber hinaus durch drei einfachere 
          Anwendungsfälle definiert: &quot;Geld einnehmen&quot;, &quot;Geld  
          abheben&quot; und &quot;Kontostand abfragen&quot;.</para>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Assoziationen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Diagrammeigenschaften (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Anwendungsfallspezifikationen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Ergänzende Anforderungsspezifikation (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.tut.analysis">

      <title>Analyse</title>


        <para>
        	Die Analyse ist der Prozess, die <quote>Kunden</quote>-Anforderungen 
        	zu nehmen und in die Sprache und Perspektive der künftigen 
        	Lösung umzuwandeln.
        </para>

        <para>
        	Wir sollten zu diesem Zeitpunkt nicht versuchen die detaillierte 
        	Lösung auszuarbeiten. Dies passiert in der <emphasis>Design
        	</emphasis>-Phase (siehe <xref linkend="ch.tut.design"/>).
        </para>

        <para>
        	Wie die Grenze zwischen den Anforderungs- und der Analyse-Phase ist 
        	die Grenze zwischen Analyse und Design inhärent unscharf. Der 
        	Schlüssel dazu ist, dass die Analyse die Lösung nicht weiter als 
        	notwendig definieren sollte, um die Anforderungen in der Sprache 
        	der Lösung zu spezifizieren. Die Modellelemente in der Analyse 
        	repräsentieren generell eine höhere Abstraktionsebene.
        </para>

        <para>
        	Noch einmal, die <emphasis>rekursive</emphasis>, und 
	        <emphasis>iterative</emphasis> Natur unserer Prozesse bedeutet, 
	        dass wir in der Zukunft noch häufig auf die Analysephase 
	        zurückkommen werden.
        </para>

      <sect1>

        <title>Der Analyseprozess</title>

        <para>
        	Es gibt drei gedankliche Ausrichtungen darüber, wie man sich der 
        	Analyse annähern sollte.
        	Die Ontologen definieren die Daten (aktuell die Metadaten) zuerst 
        	und plagen sich später mit den Prozessen.
        	Der wahre Ontologe würde es vorziehen, überhaupt nicht an Prozesse 
        	denken zu müssen.
        	Der Phänomenalist kehrt dies um und stellt die Prozesse über die 
        	Daten.
        	Der Paradigmatiker betrachtet die Prozesse und Daten gleichwertig 
        	wichtig und adressiert beide von Beginn an. 
        </para>

        <para>
        	Wenn es dazu kommt, Purist zu sein, dann hat der Ontologe die 
        	Oberhand.
        	Es ist möglich, eine Datenbank zu definieren und zu erzeugen, in die 
        	Daten eingegeben und geholt werden kann, ohne Rücksicht darauf, was 
        	mit ihnen getan wird oder nicht.
        	Auf der anderen Seite ist es nicht besonders nützlich einen Prozess 
        	zu implementieren ohne irgendwelche Datenstrukturen zu haben auf 
        	denen der Prozess arbeitet.
        </para>

        <sect2>

          <title>Klasse-, Verantwortlichkeits- und Zusammenarbeits-Karten (CRC)</title>

          <para>
          	Die CRC-Methode (CRC = Class, Responsibility, Collaborators) 
          	favorisiert die Vorliebe der Phänomenologen für die Analyse.
          	Es ist äquivalent mit den Anwendungsfällen zu beginnen, die Aspekte 
          	der Prozesse (Operationen) in Klassendiagrammen und Szenarien 
          	darzustellen aus denen Sequenzdiagramme initiiert werden können.
          </para>

          <para>
          	CRC-Karten und die entsprechende Methode sind detailliert in 
            <xref linkend="app.crc"/> beschrieben.
            Sie werden in der Designphase erneut verwendet und weiter diskutiert 
            in <xref linkend="ch.tut.design"/>.
          </para>

          <para>
          	Die Stärke der CRC-Karten während der Analyse.
          <itemizedlist>
            <listitem><para>Gemeinsames Projektvokabular -</para></listitem>
            <listitem><para>Breites Bereichswissen -</para></listitem>
            <listitem><para>Führt Paradigmenwechsel durch -</para></listitem>
            <listitem><para>Live-Prototyping -</para></listitem>
            <listitem><para>Indentifiziert Lücken in den Anforderungen -</para></listitem>
          </itemizedlist>
          </para>

          <para>
          	In dieser Phase sollte die Gruppe aus zwei oder drei Fachexperten 
          	bestehen. Einer als Vermittler der objektorientierten Technologie 
          	und der Rest der Gruppe sollte aus Personen bestehen, die für das 
          	das Ausrollen des Systems verantwortlich sind.
          </para>

          <para>
          	Wenn man das erste Mal in die Analysephase eintritt, tritt ein 
          	spezieller Fall der CRC-Sitzung auf, weil es keine Klassen oder 
          	Szenarien gibt, die man in der CRC-Sitzung für die Definition 
          	auswählen könnte. Zu diesem Zeitpunkt tritt ein spezieller 
          	Sitzungstyp, Brainstorming genannt, auf.
          	Während dieser Phase identifizieren Sie den grundlegenden Satz von 
          	Klassen des Problembereiches, indem Sie die Problembeschreibung oder 
          	das Anforderungsdokument oder was immer Sie auch über das gewünschte 
          	Ergebnis wissen als Startpunkt verwenden.
          	Die Hauptwörter, die Sie finden, sind gute Ansätze für einen ersten 
          	Satz von Klassen in dem System. Während der Brainstorming-Sitzung 
          	sollten die Ideen wenig bis gar nicht diskutiert werden.
          	Schreiben Sie diese auf und filtern Sie die Ergebnisse nach dem 
          	Brainstorming.
          	Zu diesem Zeitpunkt ist die Unterscheidung zwischen Klasse und 
          	Objekt unscharf.
          </para>

          <para>
          	Nachdem ein vernünftiger Satz von Klassen durch die Gruppe definiert 
          	wurde, können die Verantwortlichkeiten hinzugefügt werden.
          	Fügen Sie Verantwortlichkeiten hinzu, die aus den Anforderungen oder 
          	den Namen der Klassen deutlich hervorgehen.
          	Sie müssen nicht alle finden müssen (oder in jedem Fall alle).
          	Die Szenarien werden dies deutlicher machen.
          	Der Vorteil, einige bereits am Anfang zu finden ist, dass es hilft, 
          	einen Anfangspunkt zu finden.
          </para>

          <para>
          	Wählen Sie die ersten Szenarios aus dem Anforderungsdokument aus, 
          	indem Sie dessen Verben auf die gleiche Weise prüfen, wie wir vorher 
          	die Hauptwörter durchgingen.
          	Dann führen Sie diesen Prozess so oft als notwendig durch, um die 
          	begonnene Analysephase zu vervollständigen.
          </para>

          <para>
          	Wann ist genug Analyse durchgeführt worden und wann kann das Design 
          	beginnen? Wenn alle unterschiedlichen Verantwortlichkeiten zugeordnet 
          	wurden und das System stabil geworden ist.
          	Nachdem das gesamte normale Verhalten abgedeckt wurde, ist es 
          	notwendig aussergewöhnliches Verhalten zu simulieren.
          	Wenn Sie feststellen, dass die Verantwortlichkeiten alle an der 
          	richtigen Stelle sind, um die neuen Szenarien zu unterstützen und 
          	nur noch wenige Änderungen an den Karten vorzunehmen sind, dann ist 
          	das ein Anzeichen dafür, dass Sie mit dem Design beginnen können.
          </para>

        </sect2>

        <sect2>

          <title>Konzeptdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>System-Sequenzdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>System-Zustandsdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Anwendungsfalldiagramm realisieren (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Dokumente (Noch zu beschreiben)</title>

          <remark>
          	Anwendungsfall- und Ergänzende Anforderungs-Spezifikationen sind in 
          	die Sprache der Lösung umzuwandeln. Noch zu beschreiben...
          </remark>
        </sect2>


      </sect1>

      <sect1 id="s1.umlclassdiags">

        <title>Klassendiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Klassendiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Klassendiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Assoziationsklassen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1 id="s1.argoclassdiags">

        <title>Klassendiagramme in ArgoUML erzeugen</title>

        <sect2>

          <title>Klassen</title>

          <remark>
          	Klassendiagramme aus existierendem Material (Vision, Anwendungsfälle, 
          	usw.) identifizieren. Noch zu beschreiben...
          </remark>
          <sect3>

            <title>Das Kommentarsymbol in der Werkzeugleiste verwenden</title>

            <para>
            	Klicken Sie auf Ihre Zielklasse. Dann klicken Sie auf das 
            	Kommentarsymbol. ArgoUML wird die Verknüpfung automatisch 
            	generieren.
            </para>

            <para>
            	Sie können auch einen Rechtsklick ausführen, um einen Kommentar 
            	hinzuzufügen! Beachten Sie, dass Sie eine unbegrenzte Anzahl 
            	von Kommentaren zu jeder Klasse hinzufügen können!
            </para>

            <warning>

              <para>
              	Beachten Sie, dass Ihr Kommentar nicht im Sourcecoderegister 
              	erscheint.
              </para>

            </warning>

          </sect3>

        </sect2>

        <sect2>

          <title>Assoziationen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Aggregation (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Klassenattribute und Operationen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Daten in Attribut- und Methodenfenster eingeben</title>

            <para>
            	Klicken Sie direkt in das Klassenelement und beginnen Sie mit 
            	der Eingabe. Verwenden Sie nicht die Dialogfenster des 
            	Eigenschaftsregisters; sie sind noch nicht vollständig 
            	implementiert und führen nur zu ein bischen Frustration.
            </para>

            <para>
            	Natürlich wäre es von Interessse, wenn Sie Stereotypen rechts 
            	in den Bereich für Klassenattribute schreiben könnten, um 
            	XML-Diagramme zu generieren.
            </para>

          </sect3>

          <sect3>

            <title>Klassenattribute (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Klassenoperationen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Erweiterte Klasseneigenschaften (Noch zu beschreiben)</title>

          <sect3>

            <title>Assoziationsklassen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Stereotypen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1 id="s1.umlseqdiags">

        <title>Sequenzdiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Sequenzdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Aktionen identifizieren (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Sequenzdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

      <sect1 id="s1.argoseqdiags">

        <title>Sequenzdiagramme in ArgoUML erzeugen</title>

        <sect2>

          <title>Sequenzdiagramme</title>

          <sect3>

            <title>Ein Sequenzdiagramm erzeugen</title>

            <para>
            	Normalerweise können Sie mit einem Sequenzdiagramm sofort 
            	beginnen. Im Menü <literal>Neues Diagramm</literal> wählen Sie 
            	aus <literal>Sequenzdiagramm</literal>.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Aktionen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Sequenzdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

      <sect1 id="s1.umlstatediags">

        <title>Zustandsdiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Zustandsdiagramm (Noch zu beschreiben)</title>

          <remark>
          	Die Zustandsdiagrammarten (Moore, Mealy); Hierarchische 
          	Diagramme. Noch zu beschreiben...
          </remark>
        </sect2>

        <sect2>

          <title>Erweiterte Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Hierarchische Zustandsdiagramme (Noch zu beschreiben 
            )</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1 id="s1.argostatediags">

        <title>Zustandsdiagramme in ArgoUML</title>

        <sect2>

          <title>Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Ein Zustandsdiagramm erzeugen</title>

            <para>
            	Markieren Sie eine Klasse, dann können Sie ein Zustandsdiagramm 
            	erstellen.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Zustände (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Einen zusammengesetzten Zustands editieren</title>

            <para>
            	Wenn Sie einen zusammengesetzten Zustands editieren, 
            	wie erhalten Sie Zugriff auf den zusammengesetzten 
            	Zustands?
            </para>

            <para>
            	Die Antwort ist, die Klasse markieren und dann das 
            	Zustandsdiagramm erstellen.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Transitionen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Aktionen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Hierarchische Zustandsdiagramme ( 
            Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Anwendungsfälle realisieren (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
      </sect1>

      <sect1>

        <title>Realisierungs-Anwendungsfälle in ArgoUML erstellen (
        Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
      </sect1>

      <sect1>

        <title>Fallstudie (Noch zu beschreiben)</title>

        <para>
			Abhängig davon, welche Methode Sie verwenden, ist es an der Zeit, 
			dass Sie ohne jeden Zweifel die Problembeschreibung aus 
			<xref linkend="s3.tut.req_case_study"/> nehmen und die Hauptwörter 
			extrahieren.
			Diese Liste sollte verdichtet werden, so dass nur noch die 
			Hauptwörter enthalten sind, die als Klasse erwartet werden.
			Dieser Ansatz hat folgendes Ergebnis:

          <itemizedlist>
            <listitem><para>Konto</para></listitem>
            <listitem><para>Nachweislog</para></listitem>
            <listitem><para>Bank</para></listitem>
            <listitem><para>Geld</para></listitem>
            <listitem><para>Kunde</para></listitem>
          </itemizedlist>
          
        </para>

        <sect2>

          <title>CRC Karten</title>

          <para>
          	Der Projektmanager beruft eine CRC-Sitzung ein, in der die ersten 
          	Klassen definiert werden.
          	Der Multiplikator erinnert die Teilnehmer daran, dass wir uns in der 
          	Analysephase befinden und nur an den Dingen interessiert sind, 
          	welche Bedürfnisse erfüllt werden müssen (auf Geschäftsebene) und 
          	alles weglassen müssen, was nach "wie müssen wir es tun" aussieht.
          	Als generelle Regel diese Ansatzes bedeutet das, eine Teilmenge der 
          	Hauptwörter aus dem Problembereich (siehe oben).
          	Die Gruppe beginnt mit einer vollständigen Liste aller Hauptwörter 
          	der Beschreibung, prüft jedes und entscheidet, welche unpassend 
          	sind und aus der Liste gestrichen werden.
          	Jede Klasse wird dann einem der Teilnehmer zugewiesen.
          </para>

          <para>
            <remark>ist fortzusetzen...</remark>...
          </para>

        </sect2>

        <sect2>

          <title>Klassendiagramme konzipieren (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Klassen identifizieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Assoziationen identifizieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>System-Sequenzdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Aktionen identifizieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>System-Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Realisierungs-Anwendungsfälle (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.tut.design">

      <title>Design</title>

      <para>
      	Wir haben jetzt das Problem, das wir in der Sprache der vermeintlichen 
      	Lösung zu lösen versuchen. 
      	In der Designphase konstruieren wir alle Details dieser Lösung.
      </para>

      <para>
      	Die verwischten Grenzen zwischen der Analyse und dem Design zeigt sich 
      	hier auch durch die gemeinsame Verwendung derselben UML-Werkzeuge.
      	In diesem Kapitel werden wir sehr häufig die UML-Technologie verwenden, 
      	die wir bereits kennengelernt haben.
      	Der grosse Schritt ist das Umwandeln in konkrete Ausdrücke. Wir bewegen 
      	uns von den abstrakten Konzepten der Analyse hin zu deren konkreten 
      	Realisierung.
      </para>

      <para>
      	Erneut bedeutet die <emphasis>rekursive</emphasis> und 
        <emphasis>iterative</emphasis> Natur unseres Prozesses, dass wir in 
        Zukunft viele Male zurück in die Designphase kommen. 
      </para>

      <sect1>

        <title>Der Designprozess (Noch zu beschreiben)</title>

        <para>
        	Der Designprozess erweitert den Modellierungsaufwand jenseits der 
        	Geschäftsanforderungen in Richtung des Lösungsraumes.
        	Während dieser Arbeit entscheiden Sie, ob Sie Java, C++, J3EE, CORBA, 
        	SOAP, Wählleitungen, Internetverbindungen, Standleitungen, XML, usw. 
        	verwenden werden.
        	Viele dieser Entscheidungen werden das PSM-Modell direkt beeinflussen,
        	andere widerum werden sich nur in den erzeugten Dokumenten 
        	wiederspiegeln.
        </para>

        <para>
          ...
        </para>

        <sect2>

          <title>Klasse, Verantwortlichkeiten und Zusammenhänge (CRC) Karten</title>
          <para>
          	Die Stärken der CRC-Karten während des Design
            <itemizedlist>
              <listitem><para>Verbreitern der objektorientierten Design-Expertise</para></listitem>
              <listitem><para>Design Reviews</para></listitem>
              <listitem><para>Framework die Implementierung</para></listitem>
              <listitem><para>Informelle Notation</para></listitem>
              <listitem><para>Auswahl der unterstützenden Softwarekomponenten</para></listitem>
              <listitem><para>Performance-Anforderungens</para></listitem>
            </itemizedlist>
          </para>

          <para>
          	In dieser Phase ersetzen die Entwickler einige der fachlichen 
          	Experten in der Gruppe. Es sollte aber immer mindestens ein 
          	fachlicher Experte in der Gruppe verbleiben.
          </para>

          <para>
          	Der Fokus der Gruppe bewegt sich von der Frage was zu tun ist hin zu 
          	der Frage wie es zu tun ist.
          	Der Klassen aus dem Lösungsbereich werden denen der Analysephase 
          	hinzugefügt. Es wird darüber nachgedacht, welche Klassen werden 
          	benötigt, damit das System arbeitet.
          	Benötigen Sie eine Listenklasse, die Objekte beinhaltet?
          	Benötigen Sie Klassen, die Ausnahmen behandeln?
          	Benötigen Sie Wrapperklassen für andere Subsysteme?
          	In diesem Abschnitt wird nach neuen Klassen gesucht, nach Klassen, 
          	die die Implementierung des Systems unterstützen.
          </para>

          <para>
          	Während der Designphase wird der Unterschied zwischen Klasse und 
          	Objekt wichtig.
          	Denken Sie über die Objekte in Ihren Szenarien nach.
          	Wer erzeugt die Objekte?
          	Was passiert, wenn sie erzeugt und gelöscht werden?
          	Wie ist die Lebensdauer des Objektes im Gegensatz zur Lebensdauer 
          	der Information, die durch das Objekt gehalten wird.
          </para>

          <para>
          	Jetzt ist es an der Zeit sich anzusehen, welche Informationen die 
          	Objekte halten, verglichen mit den von anderen Klassen angeforderten 
          	oder berechneten Informationen.
          	Benutzen Sie die Rückseite der Karte, um die gefundenen Attribute 
          	für diese Klassen aufzuschreiben.
          	Teilen Sie die Verantwortlichkeiten in Sub-Verantwortlichkeiten auf 
          	und listen Sie die Sub-Verantwortlichkeiten unter der 
          	Hauptverantwortlichkeit eingerückt auf.
          	Verschieben Sie die dafür notwendigen Klassen zu den 
          	Verantwortlichkeiten die sie nutzen.
^          </para>

          <para>
          	Hinter der Kollaboratorklasse listen Sie auf Ihrer Karte die 
          	Verantwortlichkeit der in dieser Zusammenarbeit verwendeten Klasse 
          	auf. Hinter den kollaborierenden Verantwortlichkeiten Ihrer Karte 
          	listen Sie die durch die kollaborierenden Objekte zurückgelieferten 
          	Daten in Klammern auf.
          </para>

          <para>
          	Spielen Sie die Szenarien der Analysephase erneut durch, beachten 
          	Sie dabei aber alle Erwägungen der diskutierten Design-Heuristiken.
          	Nehmen Sie Ihre eigenen Szenarien und versuchen Sie es.
          </para>

        </sect2>

        <sect2>

          <title>Paketdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Realisierungs-Klassendiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Sequenz- und Kollaborationsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Zustands- und Aktivitätsdiagramme ( 
          Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Verteilungsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Dokumente (Noch zu beschreiben)</title>

          <remark>System Architektur. Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

      <sect1>

        <title>Paketdiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Paketdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Paketdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Subpakete (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Datentypen hinzufügen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Stereotypen hinzufügen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Paketdiagramme in ArgoUML erstellen</title>

        <sect2>

          <title>Pakete</title>

          <remark>
          	Ausarbeiten, was in Pakete kommt. Noch zu beschreiben...
          </remark>
          <sect3>

            <title>Subpakete (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Beziehungen zwischen Paketen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Abhängigkeit (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Generalisierung (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Realisierung und Abstraktion (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Erweiterte Paketeigenschaften (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Neue Datentypen erstellen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Neue Stereotypen erstellen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Mehr über Klassendiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Klassendiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Klassenattribute (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Klassenoperationen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Erweiterte Klassendiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Realisierung und Abstraktion (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Mehr über Klassendiagramme in ArgoUML (Noch zu beschreiben)</title>

        <sect2>

          <title>Klassen (Noch zu beschreiben)</title>

          <remark>
          	Mehr über das Identifizieren von Klassen aus existierendem Material 
          	und der Gebrauch von Stereotypen. Noch zu beschreiben...
          </remark>
        </sect2>

        <sect2>

          <title>Klassenattribute und -operationen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Klassenattribute (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Klassenoperationen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Erweiterte Klasseneigenschaften</title>

          <sect3>

            <title>Operationen bei Schnittstellen</title>

            <sect4>

              <title>Schnittstellen, die Schnittstellen erweitern</title>

              <para>
              	Durch einfaches Klicken auf das Schnittstellensymbol in der 
              	Werkzeugleiste und anschliessendem klicken in das 
              	Diagrammfenster fügen Sie dem aktuellen Klassendiagramm eine 
              	unbenannte Schnittstelle hinzu (siehe 
	            <xref linkend="fig.tut.iftool"/>).
              </para>

              <figure id="fig.tut.iftool">

                <title>Markieren des Schnittstellenwerkzeuges</title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/tutorial/iftool.gif" format="GIF" />
                		</imageobject>
                	</mediaobject>
                </screenshot>
              </figure>

              <para>
              	Dann führen Sie einen Doppelklick auf das Namensfeld der 
              	Schnittstelle aus, um dessen Namen wie im Bild 
              	<xref linkend="fig.tut.if"/> gezeigt zu ändern.
              </para>

              <figure id="fig.tut.if">

                <title>Schnittstelle im Klassendiagramm</title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/tutorial/if.gif" format="GIF" />
                		</imageobject>
                	</mediaobject>
                </screenshot>
              </figure>

              <para>
				Geben Sie den Namen ein (z.B. <literal>TestSchnittstelle</literal> 
				in diesem Fall). Drücken Sie <quote>Enter</quote>, wenn der 
				Name vollständig ist. (Sie können den Namen auch ändern, indem 
				Sie in das Eigenschaftsregister im Detailfenster nach dem 
				Hinzufügen der Schnittstelle gehen.) 
			  </para>

              <para>
              	Fügen Sie eine weitere Schnittstelle hinzu, indem Sie die letzten 
              	beiden Schritte wiederholen. Dann klicken Sie auf das 
              	Generalisierungssymbol in der Werkzeugleiste wie in Bild 
              	<xref linkend="fig.tut.generalize"/> dargestellt.
              </para>

              <figure id="fig.tut.generalize">

                <title>Generalisierung in der Werkzeugleiste des 
                Klassendiagrammes</title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/tutorial/generalize.gif"
                				format="GIF" />
                		</imageobject>
                	</mediaobject>
                </screenshot>
              </figure>

              <para>
              	Bewegen Sie den Mauszeiger auf die Subschnittstelle, drücken Sie 
              	die linke Maustaste und ziehen Sie die Generalisierung auf die 
              	Superschnittstelle, indem Sie die Maustaste loslassen. Bild 
				<xref linkend="fig.tut.ifgen"/> zeigt, wie Ihr Diagramm jetzt 
				aussehen sollte. 
              </para>

              <figure id="fig.tut.ifgen">

                <title>Generalisierung zwischen zwei Schnittstellen.</title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/tutorial/ifgen.gif" format="GIF" />
                		</imageobject>
                	</mediaobject>
                </screenshot>
              </figure>

              <para>
              	Durch klicken auf die Subschnittstellen und das Sourceregister 
              	und anschliessende Auswahl der Javanotation für das 
              	Sourceregister können Sie sehen, dass die Schnittstelle nun 
              	seine Superschnittstelle erweitert.
              </para>

            </sect4>

          </sect3>

          <sect3>

            <title>Stereotypen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Sequenz- und Kollaborationsdiagramme ( 
        Noch zu beschreiben)</title>

        <note>

          <para>Sequenzdiagramme funktionieren in der ArgoUML-Version 
          0.14 nicht.</para>

        </note>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Mehr über das Sequenzdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Das Kollaborationsdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Nachrichten (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Aktionen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Erweiterte Kollaborationsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

      <sect1>

        <title>Kollaborationsdiagramme in ArgoUML erstellen ( 
        Noch zu beschreiben)</title>

        <sect2>

          <title>Kollaborationsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Nachrichten (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Aktionen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Erweiterte Kollaborationsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

      <sect1>

        <title>Zustandsdiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Zustandsdiagramm (Noch zu beschreiben)</title>

          <remark>Mehr darüber.Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Aktionen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Transitionen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
            <sect4>

              <title>Trigger (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

            <sect4>

              <title>Wächter (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

            <sect4>

              <title>Effekte (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

          </sect3>

          <sect3>

            <title>Pseudo-Zustände (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
            <sect4>

              <title>Junction and Choice (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

            <sect4>

              <title>Verzweigen und Verknüpfen (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

          </sect3>

          <sect3>

            <title>Hierarchische Zustandsautomaten (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Modelle für die Zustandshistorie (Noch zu beschreiben)</title>

            <remark>Breite versus Tiefe. Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Zustandsdiagramme in ArgoUML erstellen ( 
        Noch zu beschreiben)</title>

        <sect2>

          <title>Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Zustände (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Transitionen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Aktionen (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Erweiterte Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Transitionen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
            <sect4>

              <title>Trigger (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

            <sect4>

              <title>Wächter (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

            <sect4>

              <title>Effekte (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

          </sect3>

          <sect3>

            <title>Pseudozustände (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
            <sect4>

              <title>Junction and Choice (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

            <sect4>

              <title>Verzweigen und Verknüpfen (Noch zu beschreiben)</title>

              <remark>Noch zu beschreiben...</remark>
            </sect4>

          </sect3>

          <sect3>

            <title>Hierarchische Zustandsautomaten (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Historie (Noch zu beschreiben)</title>

            <remark>Breite versus Tiefe. Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1 id="s1.umlactivitydiags">

        <title>Aktivitätsdiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Aktivitätsdiagramm (Noch zu beschreiben)</title>

          <remark>Mehr darüber. Noch zu beschreiben...</remark>
          <sect3>

            <title>Aktionszustände (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Aktivitätsdiagramme in ArgoUML erstellen (
        Noch zu beschreiben)</title>

        <sect2>

          <title>Aktivitätsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Ein Aktivitätsdiagramm erstellen</title>

            <para>
            	Markieren Sie einen Anwendungsfall oder eine Klasse, dann 
            	können Sie ein Aktivitätsdiagramm erstellen.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Aktionszustände (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

      <sect1>

        <title>Verteilungsdiagramme (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
        <sect2>

          <title>Das Verteilungsdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

      <sect1>

        <title>Verteilungsdiagramme in ArgoUML erstellen ( 
        Noch zu beschreiben)</title>

        <sect2>

          <title>Knoten (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Knoten-Instanzen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Komponenten (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Komponenten-Instanzen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Beziehungen zwischen Knoten und Komponenten ( 
          Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Abhängigkeit (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Assoziationen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Verknüpfungen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>System-Architektur (Noch zu beschreiben)</title>

        <remark>Noch zu beschreiben...</remark>
      </sect1>

      <sect1>

        <title>Fallstudie (Noch zu beschreiben)</title>

        <sect2>

          <title>CRC-Karten (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Pakete (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Pakete identifzieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Datentypen und Stereotypen (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Klassendiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Klassen identifizieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Assoziationen identifizieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

          <sect3>

            <title>Attribute und Operationen spezifizieren ( 
            Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Sequenzdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Aktionen identifzieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Kollaborationsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
          <sect3>

            <title>Nachrichten identifizieren (Noch zu beschreiben)</title>

            <remark>Noch zu beschreiben...</remark>
          </sect3>

        </sect2>

        <sect2>

          <title>Zustandsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Aktivitätsdiagramme (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Das Verteilungsdiagramm (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

        <sect2>

          <title>Die System-Architektur (Noch zu beschreiben)</title>

          <remark>Noch zu beschreiben...</remark>
        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.tut.build">

      <title>
      	Codegenerierung, Reverse Engineering und Round Trip Engineering
      </title>

      <sect1>

        <title>Einleitung</title>

        <para>
        	Wir haben jetzt unser Design vollständig spezifiziert. Mit dem 
        	richtigen Simulator können wir das Design aktuell ausführen und 
        	sehen, wie es arbeitet. (ArgoUML enthält keine solche Funktionalität, 
        	aber diese Funktionalität wird in anderen Tools angeboten).
        </para>

        <para>
        	ArgoUML erlaubt es Ihnen, Code aus dem Design in vielen 
        	verschiedenen Programmiersprachen auszuführen. Wir haben bereits 
        	sehr wahrscheinlich im Design eine Programmiersprache ausgewählt, 
        	weil einige der Designanforderungen fordern, eine spezielle 
        	Sprache auszuwählen.
        </para>

        <para>
        	Das Ergebnis dieses Prozesses ist ein Satz von Dateien, der das 
        	Programm bildet, welches das Problem löst.
        </para>

        <para>
        	Nochmals, die <emphasis>rekursive</emphasis> und 
	        <emphasis>iterative</emphasis> Natur unseres Prozesses bedeutet, dass 
	        wir in der Zukunft noch viele Male in die Buildphase zurückkehren 
	        werden. 
        </para>

        <para>
        	Es gibt dazu auch noch eine andere Seite und das ist die Reverse 
        	Engineering-Seite. Wenn wir ein altes Programm haben, dass wir 
        	vielleicht überprüfen wollen, dann können wir die Dateien nehmen und 
        	daraus mit Hilfe des Reverse Engineering ein Design erstellen. 
        	Das kann eingesetzt werden, wenn wir versuchen wollen, ein nicht so 
        	gut dokumentiertes Programm verstehen zu wollen oder als 
        	Schnelleinstieg in die Designarbeit.
        </para>

        <para>
        	Der Prozess des vor- und zurückgehens zwischen den Änderungen im 
        	Design gefolgt von einer Codegenerierung und anschliessender 
        	Änderungen im Code gefolgt von einem Reverse Engineering bei jeder 
        	Änderung, die bestmögliche Perspektive, wird Round-trip Engineering 
        	genannt.
        </para>

      </sect1>

      <sect1>

        <title>Codegenerierung</title>

        <indexterm><primary>Codegenerierung</primary></indexterm>
        <para>
        	Das Ergebnis der Codegenerierung ist das vollständige Programm. Je 
        	nach Inhalt des Designs, können wir auch Unit-Testfälle generieren.
        </para>

        <para>
        	Um dies tun zu können, benötigen wir das Designmodell, welches die 
        	statischen und dynamischen Aspekte des Programmes beinhaltet.
        </para>

        <sect2>

          <title>Code aus der statischen Struktur generieren</title>

          <indexterm><primary>Code generieren</primary><secondary>aus der  
          statischen Struktur</secondary></indexterm>
          <para>
			Es ist ziemlich unkompliziert, diese Generierung durchzuführen. 
			Zumindestens so lange wir es für eine objektorientierte Sprache tun.
			Dies sind einige der grundlegenden Regeln:
            <itemizedlist>

              <listitem>

                <para>Eine Klasse wird eine Klasse.</para>

                <para>
                	In einigen Zielsprachen (wie Java, C++) werden sie auch 
                	Dateien und Übersetzungseinheiten.
                </para>

              </listitem>

              <listitem>

                <para>
                	Eine Generalisierung wird zu einer Vererbung.
                </para>

                <para>
                	Wenn die Zielsprache keine Vererbung unterstützt und wir 
                	dies während des Design's nicht adressieren, sind einige 
                	spezielle Konvertierungen erforderlich, um dieses Problem 
                	zu lösen.
                </para>

              </listitem>

              <listitem>

                <para>Ein Attribut wird zu einer Membervariablen.</para>

              </listitem>

              <listitem>

                <para>
                	Eine navigierbare Assoziation wird eine Membervariable.
                </para>

                <para>
                	Abhängig von der Zielsprache, der Zielplattform und der 
                	Kardinalitäten der Assoziation wird dies ein Zeiger, eine 
                	Referenz, eine Collection-Klasse, ein Eintrag in einigen 
                	Tabellen oder Bitabbildungen (map) sein.
                </para>

              </listitem>

              <listitem>

                <para>
                	Eine nicht abstrakte Operation in einer Klasse wird zu einer 
                	Methode.
                </para>

              </listitem>

              <listitem>

                <para>
                	Eine abstrakte Operation in einer Klasse wird zu einer 
                	abstrakten Methode.
                </para>

              </listitem>

              <listitem>

                <para>
                	Ein Parameter in einer Operation wird zu einem Parameter in 
                	der Methode.
                </para>

                <para>
                	Bei einfachen Typen (int, boolean) ist dies der Normalfall.
                	In C++ werden diese wahrscheinlich Const-Klassen. In Java 
                	kann dies für Klassen nicht eingefordert werden.
                </para>

              </listitem>

              <listitem>

                <para>
                	Ein out- oder in/out-Parameter in einer Operation wird zu 
                	einem referenzierenden Parameter in der Methode.
                </para>

                <para>
                	In C++ werden dies referenzierende nicht-konstante Parameter. 
                	Bei Javaklassen ist dies der Standard. Einfache Typen (int, 
                	boolean) müssen in Java in ein Objekt einer 
                	korrespondierenden Klasse (Integer, Boolean) konvertiert 
                	werden.
                </para>

              </listitem>

              <listitem>

                <para>
                	Die Sichtbarkeit von Attributen, Assoziationen und 
                	Operationen werden zu Sichtbarkeit von Membervariablen oder 
                	Methoden.
                </para>

              </listitem>

              <listitem>

                <para>
                	Pakete werden Verzeichnisse, Namensräume oder beides.
                </para>

              </listitem>

            </itemizedlist>

          </para>

        </sect2>

        <sect2>

          <title>
          	Code aus Interaktionen und Zustandsautomaten generieren 
          </title>

          <indexterm><primary>Code generieren</primary><secondary>aus 
          Sequenzdiagrammen</secondary></indexterm>
          <indexterm><primary>Code generieren</primary><secondary>aus 
          Interaktionen</secondary></indexterm>
          <indexterm><primary>Code generieren</primary><secondary>aus 
          Kollaborationsdiagrammen</secondary></indexterm>
          <indexterm><primary>Code generieren</primary><secondary>aus 
          Zustandsdiagrammen</secondary></indexterm>
          <para>
          	Diese Konvertierung ist nicht so unkompliziert, wie die 
          	Konvertierung der statischen Struktur. Sie hängt sehr viel mehr 
          	von der Zielsprache und der Zielplattform ab.
          </para>

          <para>
			Generell ist es nur möglich, das Folgende zu Interaktionen zu sagen:
            <itemizedlist>

              <listitem>

                <para>
                	Eine Nachricht wird in einen Funktionsaufruf konvertiert.
                </para>

                <para>
                	Die Empfängerklasse wird eine Funktion mit dem richtigen 
                	Namen und der richtigen Signatur haben.
                </para>

                <para>
                	Die sendende Funktion in der Klasse eines Senders wird einen 
                	Funktionsaufruf auf eine Funktion des Empfängers aufweisen.
                </para>

              </listitem>

              <listitem>

                <para>
                	Eine asynchrone Nachricht wird entweder eine Nachricht 
                	senden, die durch einige andere Thread- oder 
                	Funktionsaufrufe verarbeitet werden, die einen neuen Thread 
                	starten.
                </para>

              </listitem>

            </itemizedlist>

          </para>

          <para>
			Das Folgende beschreibt einen möglichen Weg, Zustandsautomaten zu 
			generieren:
            <itemizedlist>

              <listitem>

                <para>
                	Ein Zustandsautomat wird in einen Satz von Membervariablen 
                	generiert, bei dem sich jede Methode in dieser Klasse auf 
                	das entscheidende Verhalten bezieht.
                </para>

              </listitem>

              <listitem>

                <para>
                	Ein Zustand wird zu einem zusammengehörenden Satz von Werten 
                	dieser Membervariablen generiert.
                </para>

              </listitem>

              <listitem>

                <para>
                	Ein Ereignis wird zu einem Aufruf auf eine Membermethode 
                	generiert, der den Zustand ändern kann.
                </para>

                <para>
                	Diese Methoden würden dann typischerweise eine grosse 
                	switch-Anweisung haben, aufgesplittet je nach aktuellem 
                	Zustand.
                </para>

              </listitem>

              <listitem>

                <para>
                	Ein Wächter wird, in dem Zweig des richtigen Zustandes, zu 
                	einer <symbol>if</symbol>-Anweisung in der Ereignis-
                	Membermethode generiert.
				</para>

              </listitem>

              <listitem>

                <para>
                	Eine Transition wird als Zuordnung auf einige 
                	Zustandsvariablen generiert.
                </para>

              </listitem>

              <listitem>

                <para>Eine Aktion wird als Funktionsaufruf generiert.</para>

              </listitem>

            </itemizedlist>

          </para>

        </sect2>

      </sect1>

      <sect1>

        <title>Code in ArgoUML generieren</title>

        <sect2>

          <title>Statische Struktur</title>

          <para>
          	Der grösste Teil der Generierung wird automatisch durch die 
          	ausgewählten Sprachmodule erledigt. Dateien, die benötigt werden, 
          	um den aktuellen Code aufzunehmen, werden in Verzeichnis-
          	hierarchien generiert.
          </para>

        </sect2>

        <sect2>

          <title>Interaktionen und Zustandsdiagramme</title>

          <para>
          	Es gibt aktuell keine Unterstützung dafür in ArgoUML, für keine 
          	Sprache.
          </para>

        </sect2>

      </sect1>

      <sect1>

        <title>Reverse Engineering</title>

        <indexterm><primary>Reverse Engineering</primary></indexterm>
        <para>

          Reverse Engineering wird in zwei Fällen verwendet:
          <orderedlist>

            <listitem>

              <para>
              	Um die vorher entwickelte Klasse in das aufzubauende Modell zu 
              	bekommen.
              </para>

            </listitem>

            <listitem>

              <para>
              	Um eine UML-Darstellung der vorher entwickelten Klassen zu 
              	erhalten, damit man verstehen kann, wie diese arbeiten.
              </para>



            </listitem>

          </orderedlist>

        </para>

        <para>
        	Grundsätzlich führt dies eine umgekehrte Codegenerierung aus.
        </para>

      </sect1>

      <sect1>

        <title>Round-Trip Engineering</title>

        <indexterm><primary>Round-Trip Engineering</primary></indexterm>
        <para>
        	Round-Trip Engineering macht es möglich, die Perspektive
        	während des Entwurfes zu wechseln. Erstellen Sie einige
        	Klassen in einem Klassendiagramm. Schreiben Sie mit Hilfe
        	Ihres favorisierten Editors etwas Code für einige
        	Operationen oder Funktionen. Verschieben Sie die Operationen
        	im Klassendiagramm von einer Klasse in eine andere...
        </para>

        <para>
        	Aktuell wird dies durch ArgoUML für keine Sprache unterstützt.
        </para>

      </sect1>

    </chapter>

  </part>

  <part>

    <title>Referenz Anwenderschnittstelle</title>

    <chapter id="ch.ref.ui">

      <title>Einleitung</title>

      <para>
      	Dieses Kapitel beschreibt das gesamte Verhalten der 
      	Anwenderschnittstelle. Die Beschreibung der verschiedenen Teile der 
      	Komponenten, die Menüzeile, Fenster und verschiedene Diagramme 
      	befinden sich in separaten Kapiteln.
      </para>

      <sect1>

        <title>Überblick über das Fenster</title>

        <para>
        	<xref linkend="fig.ref.gui_overview" />
        	zeigt das Hauptfenster von ArgoUML.
        </para>

        <para>
        	Die Titelzeile des Fensters zeigt die folgenden 4 Informationen, 
        	jeweils getrennt voneinander duch einen Bindestrich.
        </para>

        <itemizedlist>

          <listitem>

            <para>
            	Den aktuellen Dateinamen. Ist noch kein Dateiname für das 
            	Projekt vergeben, dann wird in der Titelzeile 
            	<quote>Unbenannt</quote> angezeigt.
            </para>

          </listitem>

          <listitem>

            <para>Der Name des aktuell aktiven Diagrammes.</para>

          </listitem>

          <listitem>

            <para>Der Name <quote>ArgoUML</quote>.</para>

          </listitem>

          <listitem>

            <para>
            	Ein Stern (*). Dieses Symbol ist nur vorhanden, wenn die 
            	aktuelle Projektdatei <quote>ungesichert</quote> ist. Z.B. sie 
            	wurde verändert, aber noch nicht gespeichert. Mit anderen 
            	Worten, fehlt der Stern, dann wurde die aktuelle Datei nicht 
            	verändert.
			</para>

          </listitem>

        </itemizedlist>

        <figure id="fig.ref.gui_overview">

          <title>Überblick über die ArgoUML-Fenster</title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
          				fileref="images/reference/gui_overview.png" format="PNG" />
          		</imageobject>
          	</mediaobject>
          </screenshot>
        </figure>

        <para>
        	Oben am Bildschirm befindet sich eine <emphasis>Menüzeile</emphasis>, 
        	die in <xref linkend="ch.ref.toolbar"/> beschrieben wird.
        </para>

        <para>
        	Der Fensterrumpf teilt sich in vier Subfenster oder <emphasis>Felder
        	</emphasis> auf. Von oben links im Uhrzeigersinn sind dies der 
        	<emphasis>Explorer</emphasis> (siehe 
        	<xref linkend="ch.ref.navpane"/>), 
        	<emphasis>das Editierfenster</emphasis> (siehe 
        	<xref linkend="ch.ref.editpane"/>), 
        	<emphasis>das Detailfenster</emphasis> (siehe 
        	<xref linkend="ch.ref.detpane"/>) und 
        	<emphasis>das <quote>Zu bearbeiten</quote>-Fenster</emphasis> (siehe 
        	<xref linkend="ch.ref.todopane"/>). Alle 4 Fenster haben oben eine 
        	<emphasis>Werkzeugleiste</emphasis> (im Detailfenster befindet sie 
        	sich unter dem <emphasis>Eigenschafts-</emphasis>Register. Einen 
        	Überblick über die Fenster finden Sie in 
        	<xref linkend="s1.ref.panes"/>. Im unteren Bereich des Fensters 
        	befindet sich eine <emphasis>Statuszeile</emphasis>, die in 
        	<xref linkend="s1.ref.status"/> beschrieben ist.
        </para>

      </sect1>

      <sect1 id="s1.ref.mouse">

        <title>Generelles Verhalten der Maus in ArgoUML</title>

        <para>
        	Das in verschiedenen Fenstern von ArgoUML (siehe 
        	<xref linkend="s1.ref.panes"/>) oder der Menüzeile vorhandene, 
        	spezifische Verhalten der Maus wird in den Kapiteln diskutiert, die
        	diese Fenster und die Menüzeile beschreiben. In diesem Abschnitt 
        	behandeln wir das Verhalten, das in ArgoUML generell anzutreffen 
        	ist.
        </para>

        <para>
        	An verschiedenen Stellen in ArgoUML muss Text direkt editiert 
        	werden (zum Beispiel im Randbedingungs-Editor; siehe 
        	<xref linkend="s2.ref.details_constraint_editor"/>). Das Verhalten 
        	der Maus beim Bearbeiten von Text wird in den nachfolgenden 
        	Abschnitten diskutiert.
        </para>

        <sect2>

          <title>Maustasten-Terminologie</title>

          <para>
          	ArgoUML unterstellt eine Maus mit zwei Tasten. Wir beziehen uns auf 
          	die Tasten mit den Bezeichnungen <quote>Taste&nbsp;1</quote> und 
          	<quote>Taste&nbsp;2</quote>. Taste&nbsp;1 ist die linke Taste auf 
          	einer Rechtshänder-Maus und wird manchmal als 
          	<emphasis>Auswahl</emphasis>-Taste bezeichnet. Taste&nbsp;2 ist die 
          	rechte Taste auf einer Rechtshänder-Maus und wird manchmal als 
          	<emphasis>Einstell-</emphasis>-Taste bezeichnet.
          </para>

          <para>
          	Ein einfaches drücken und loslassen der Maustaste wird als 
          	<emphasis>Klick</emphasis> bezeichnet. Zwei Klicks in schneller 
          	Abfolge wird als <emphasis>Doppelklick</emphasis> bezeichnet. Das 
          	Bewegen der Maus während eine Taste gedrückt ist, wird als 
          	<emphasis>Tastenbewegung</emphasis> bezeichnet, mit einem Startpunkt 
          	bei <emphasis>Taste gedrückt</emphasis> und einem Endpunkt bei 
          	<emphasis>Taste losgelassen</emphasis>.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;1 Klick</title>

          <para>
          	Das Klicken auf ein Objekt der Anwenderschnittstelle oder auf ein 
          	Modellelement eines Diagrammes kann unterschiedliche Dinge auslösen. 
          	Der größte Teil des Verhaltens ist für den Anwender erfahrungsgemäß 
          	vollständig intuitiv. Hauptsächlich wegen des hohen Grades an 
          	Standardisierung, auch plattformübergreifend (Macintosh, PC, 
          	UNIX,...). ArgoUML befolgt die <emphasis>Java Look and Feel Design- 
          	Richtlinien</emphasis> von Sun. Siehe 
          	<ulink url="http://java.sun.com/products/jlf/"/>. Daraus folgt, 
          	dass das Verhalten von allgemeinen Komponenten der 
          	Anwenderschnittstelle in diesem Dokument generell nicht diskutiert 
          	wird. 
          </para>

          <para>
          	Auf der anderen Seite können Mausaktionen in einem Diagramm für 
          	den Anwender nicht so intuitiv erscheinen, da sie spezifisch für 
          	ArgoUML sind. Deshalb werden sie hier erläutert. In Kürze: klicken 
          	markiert oder aktiviert das Objekt nahe des Mauszeigers und 
          	verschiebt den Fokus (z.B. Navigation).
          </para>

          <para>
          	Noch detaillierter: der Taste&nbsp;1-Klick kann die folgenden 
          	Ergebnisse verursachen:
          </para>

          <sect3>

            <title>Auswahl</title>

            <para>
            	Hier wird die Taste&nbsp;1 dazu verwendet, ein Modellelement 
            	(aus einer Liste oder einer Baumstruktur oder aus einem 
            	Diagramm) auszuwählen (zu markieren), auf das die darauf 
            	folgenden Operationen angewendet werden sollen. Mehrere 
            	Modellelemente können durch eine Umschalt- und/oder Strg-
            	Kombination mit der Taste&nbsp;1 ausgewählt werden, siehe
				<xref linkend="s2.ref.mouse.shift_control"/>.
				Die Markierung wird immer durch einen eingefärbten Hintergrund 
				klar angezeigt. 
            </para>

            <para>
            	In einem Diagramm werden die markierten Modellelemente durch 
            	farbige <quote>Vierecke</quote> an den Ecken/Enden des Objektes 
            	dargestellt. Modellelemente können auf unterschiedlichen Wegen 
            	markiert oder dessen Markierung aufgehoben werden:
            </para>

            <itemizedlist>

              <listitem>

                <para>
                	Taste&nbsp;1-Klick. Entfernt die Markierung aller 
                	Modellelemente und markiert das angeklickte Element. 
                </para>

              </listitem>

              <listitem>

                <para>
                	Taste&nbsp;1-Bewegung. Das Bewegen der Maus mit gedrückter 
                	Taste erlaubt in einem Diagramm, nicht mit einem 
                	Modellelement, das Zeichnen eines Rechteckes um die 
                	Modellelemente, die markiert werden, wenn die Taste&nbsp;1 
                	losgelassen wird. 
                </para>

              </listitem>

              <listitem>

                <para>
                	Menüfunktionen und Tastenkürzel. Viele Menüoperationen 
                	verändern die Markierung als Seiteneffekt. Zum Beispiel 
                	beim erstellen eines neuen Diagrammes. Viele Tastenkürzel 
                	für Menüoperationen ändern die Markierung, z. B. Strg-A, 
                	die für die Funktion <literal>Markiere alles</literal> steht.
                </para>

              </listitem>

            </itemizedlist>

          </sect3>

          <sect3>

            <title>Aktivierung</title>

            <para>
            	Hier wird die Taste&nbsp;1 dazu verwendet, die Komponente der 
            	Anwenderschnittstelle zu aktivieren. Z.B. eine Schaltfläche. Das 
            	Objekt wird gewöhnlich hervorgehoben, wenn die Maustaste 
            	gedrückt und dann aktiviert, wenn die Maustaste losgelassen wird.
            	Ein Objekt der Anwenderschnittstelle aktivieren bedeutet, dass 
            	dessen Funktion ausgeführt wird.
            </para>

          </sect3>

          <sect3>

            <title>Navigation</title>

            <para>
            	Hier wird die Taste&nbsp;1 dazu verwendet, den Fokus von einer 
            	Komponente der Anwenderschnittstelle oder eines Modellelementes 
            	eines Diagrammes auf ein anderes zu verändern. Dies ist unter 
            	dem Begriff Tastaturfokus besser bekannt, weil Tastaturkommandos 
            	gewöhnlich auf Modellelemente wirken, die den Fokus haben. Der 
            	Fokus wird durch einen (hart sichtbaren) Rahmen um das 
            	Modellelement, oder bei einem Texteingabefeld durch einen 
            	blinkenden Cursor dargestellt.
            </para>

          </sect3>

          <sect3>

            <title>Generelles Verhalten beim Editieren von Text</title>

            <para>
            	Hier wird Taste&nbsp;1 dazu verwendet, die Stelle innerhalb des 
            	Textes zu markieren, an dem die Operation (Text hinzufügen und 
            	löschen) ausgeführt werden soll.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Taste&nbsp;1-Doppelklick</title>

          <para>
          	Das Verhalten des Taste&nbsp;1-Doppelklicks variiert in den 
          	einzelnen Fenstern und wird in den zugehörigen Kapiteln behandelt.
          </para>

          <sect3>

            <title>Generelles Verhalten beim Editieren von Text</title>

            <para>
            	Hier wird der Taste&nbsp;1-Doppelklick dazu verwendet, ein 
            	vollständiges Wort oder eine andere syntaktische Einheit 
            	innerhalb des Textes zu markieren. Nachfolgende Operationen 
            	(Text einfügen und löschen) werden den markierten Text 
            	ersetzen.
            </para>

          </sect3>

        </sect2>

        <sect2>

          <title>Taste&nbsp;1-Bewegung</title>

          <sect3>

            <title>Generelles Verhalten beim Editieren von Text</title>

            <para>
            	Hier wird die Taste&nbsp;1-Bewegung verwendet, um einen 
            	Textbereich zu markieren. Nachfolgende Operationen (Text 
            	einfügen und löschen) werden den markierten Text ersetzen.
            </para>

          </sect3>

        </sect2>

        <sect2 id="s2.ref.mouse.shift_control">

          <title>Umschalt- und Strg- und die Taste&nbsp;1</title>

          <sect3>

            <title>Innerhalb von Listen</title>

            <para>
            	Dieses Verhalten tritt auf, wo es Listen mit Dingen gibt, die 
            	markiert werden dürfen. Dies schliesst verschiedene 
            	Dialogfenster und das <quote>Zu bearbeiten</quote>-Fenster ein, 
            	wo es eine Liste von <quote>zu bearbeitenden</quote> Elementen 
            	gibt, die zu markieren sind.
            </para>

            <para>
            	Dort, wo markiert werden muss wird die Umschalttaste mit der 
            	Taste&nbsp;1 verwendet, um die Markierung von der ursprünglichen 
            	Taste&nbsp;1-Markierung zur aktuellen Position zu 
            	<emphasis>erweitern</emphasis>.
			</para>

            <para>
            	Die Strg-Taste und die Taste&nbsp;1 wird ähnlich verwendet, um 
            	individuelle Elemente der aktuellen Markierung hinzuzufügen. 
            	Wird Strg-Taste&nbsp;1 auf einem bereits markierten Element 
            	verwendet, wird das Element aus der Markierung entfernt.
            </para>

            <caution>

              <para>
              	Anwender von Microsoft Windows könnten mit dem Gebrauch des 
              	Umschalt-Strg-Klick vertraut sein (z.B. Umschalt- und Strg-Taste 
              	während des klickens gedrückt halten), um der existierenden 
              	Markierung Sublisten hinzuzufügen. ArgoUML unterstützt dies 
              	nicht. Umschalt-Strg-Klicks wirken wie Strg-Klicks.
              </para>

            </caution>

          </sect3>

          <sect3>

            <title>Generelles Verhalten beim Editieren von Text</title>

            <para>
            	In verschiedenen Fällen kann Text in ArgoUML direkt editiert 
            	werden (zum Beispiel beim Benennen eines Modellelementes im 
            	Eigenschaftsregister oder bei der Eingabe eines UML-Hinweises/
            	-Kommentares. Hier wird Umschalt-Taste&nbsp;1 verwendet, um 
            	ausgehend von einem vorher markierten Punkt einen Textbereich zu 
            	markieren. Nachfolgende Operationen (Text einfügen und löschen) 
            	werden den markierten Text ersetzen.
            </para>

          </sect3>

        </sect2>

        <sect2 id="s2.ref.mouse.alt">

          <title>Alt Gr mit Taste&nbsp;1: Verschieben</title>

          <para>
          	Wenn Sie die Alt Gr-Taste gedrückt halten, während Sie die 
          	Taste&nbsp;1 in einem Diagramm drücken, wird die Bewegung der Maus 
          	den Zeichenbereich verschieben. Diese Funktion wird durch den 
          	Mauszeiger angezeigt, der zu einer Kreuz mit Pfeilen-Darstellung 
          	wechselt.
          </para>

        </sect2>
        
        <sect2 id="s2.ref.mouse.ctrl">

          <title>Strg mit Taste&nbsp;1: Bedingtes ziehen</title>

          <para>
          	Wenn Sie die Strg-Taste herunterdrücken, während Sie mit der 
          	gedrückten Maustaste&nbsp;1 auf ein Diagramm ziehen, wird die 
          	Bewegung des gezogenen Elementes bedingt in eine der acht 
          	grundsätzlichen Richtungen erfolgen: Norden, Süden, Osten, Westen, 
          	Nordosten, Südosten, Südwesten, Nordwesten.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Aktionen</title>

          <para>
          	Taste&nbsp;2-Aktionen sind alle vom Fenster oder der Menüzeile 
          	abhängig und werden in den jeweiligen Kapiteln behandelt.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Doppelklick</title>

          <para>
          	Taste&nbsp;2-Aktionen sind alle vom Fenster oder der Menüzeile 
          	abhängig und werden in den jeweiligen Kapiteln behandelt.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Bewegung</title>

          <para>
          	Taste&nbsp;2-Aktionen sind alle vom Fenster oder der Menüzeile 
          	abhängig und werden in den jeweiligen Kapiteln behandelt.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.panes">

        <title>Generelle Informationen über Fenster</title>

        <para>
        	Die vier Sub-Fenster des ArgoUML-Hauptfensters werden 
        	<emphasis>Fenster</emphasis> genannt. Von oben links im 
        	Uhrzeigersinn sind dies der <emphasis>Explorer</emphasis> (siehe 
        	<xref linkend="ch.ref.navpane"/>), <emphasis>das Editierfenster 
        	</emphasis> (siehe <xref linkend="ch.ref.editpane"/>), 
        	<emphasis>das Detailfenster</emphasis> (siehe 
        	<xref linkend="ch.ref.detpane"/>) und <emphasis>das 
        	<quote>Zu bearbeiten</quote>-Fenster</emphasis> (siehe 
        	<xref linkend="ch.ref.todopane"/>). Oben im Editierfenster gibt es 
        	eine <emphasis>Werkzeugleiste</emphasis>.
        </para>

        <sect2>

          <title>Fenstergrösse verändern</title>

          <para>
          	Sie können die Fenstergrösse verändern, indem Sie die Trennbalken 
          	zwischen den Fenstern verschieben. Um diese Möglichkeit anzuzeigen, 
          	wechselt die Mausdarstellung, wenn sie sich über den Trennbalken 
          	befindet.
          </para>

          <para>
          	Darüber hinaus gibt es zwei kleine nach links zeigende Pfeile in 
          	den vertikalen Trennbalken, einer im oberen Bereich des Trennbalkens, 
          	zwischen dem Explorer und dem Editierfenster und einen im oberen 
          	Bereich des vertikalen Trennbalkens zwischen dem <quote>Zu 
          	bearbeiten</quote>- und dem Detailfenster. Ein Taste&nbsp;1-Klick 
          	auf den ersten von ihnen erweitert das Editierfenster bis zur vollen 
          	Breite des Fensters, der Taste&nbsp;1-Klick auf den zweiten 
          	erweitert das Detailfenster auf die volle Breite des Fensters.
          </para>

          <para>
          	Es gibt ebenso kleine nach unten gerichtete Pfeile in den 
          	horizontalen Trennbalken, jeweils am linken Ende. Klicken auf diese 
          	Pfeile wird den Explorer und das Editierfenster auf die volle Höhe 
          	des Fensters erweitern.
          </para>

          <para>
          	Durch die Verwendung des oberen Pfeile der vertikalen Trennbalken 
          	und des Pfeiles des horizontalen Trennbalkens ist es möglich, das 
          	Editierfenster auf das gesamte Fenster zu erweitern.
          </para>

          <para>
          	Die ursprüngliche Konfiguration kann durch erneutes Klicken auf 
          	diese Pfeile wiederhergestellt werden, die sich jetzt am Rand des 
          	Fensters befinden.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.status">

        <title>Die Statuszeile</title>

        <para>
        	Die Statuszeile befindet sich am unteren Rand des ArgoUML-Fensters 
        	und wird dazu verwendet, kurzes Hinweisnachrichten anzuzeigen. 
        	Normalerweise sind diese Nachrichten selbsterklärend. Sie wird z. B. 
        	für die Anzeige von Parsing-Fehlermeldungen verwendet, wenn ein 
   			in ein Diagramm eingegebener Text nicht interpretiert werden kann.
        </para>

      </sect1>

    </chapter>

    <chapter id="ch.ref.toolbar">

      <title>Die Werkzeugzeile</title>

      <section>

        <title>Dateioperationen</title>

        <para>
        	Diese Schaltflächen haben wie ihre Gegenstücke im Menü 
        	<literal>Datei</literal> identische Funktionen.
		</para>

        <itemizedlist>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/new.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Neu</literal> Siehe vollständige Beschreibung unter 
	            <xref linkend="s2.ref.menu_new"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/open_project.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Projekt öffnen...</literal> Siehe vollständige 
	            Beschreibung unter <xref linkend="s2.ref.menu_open_project"/>
            .</para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/save_project.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Projekt speichern</literal> Siehe vollständige 
	            Beschreibung unter<xref linkend="s2.ref.menu_save_project"/>.
	        </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center" 
	            			fileref="images/icons/print.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Drucken</literal> Siehe vollständige 
		            Beschreibung unter <xref linkend="s2.ref.menu_print"/>.
            </para>

          </listitem>

        </itemizedlist>

      </section>

      <section>

        <title>Editieroperationen</title>

		<para>
			Diese Schaltflächen haben mit Ihren Gegenstücken im Menü 
			<literal>Bearbeiten</literal> identische Funktionen.
		</para>

        <itemizedlist>

<!--      <listitem>

            <para><guiicon><inlinemediaobject><imageobject>
            <imagedata align="center" fileref="images/icons/cut.gif"
             format="GIF"/></imageobject></inlinemediaobject></guiicon> 
            <literal>Cut</literal> See for a full description 
            <xref linkend="s2.ref.menu_cut"/>.</para>

          </listitem>

          <listitem>

            <para><guiicon><inlinemediaobject><imageobject>
            <imagedata align="center" fileref="images/icons/copy.gif"
             format="GIF"/></imageobject></inlinemediaobject></guiicon> 
            <literal>Copy</literal> See for a full description 
            <xref linkend="s2.ref.menu_copy"/>.</para>

          </listitem>

          <listitem>

            <para><guiicon><inlinemediaobject><imageobject>
            <imagedata align="center" fileref="images/icons/paste.gif"
             format="GIF"/></imageobject></inlinemediaobject></guiicon> 
            <literal>Paste</literal> See for a full description 
            <xref linkend="s2.ref.menu_paste"/>.</para>

          </listitem>
-->
          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/remove_from_diagram.gif"
	            				format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Aus Diagramm entfernen</literal> Siehe vollständige 
		        Beschreibung unter 
	            <xref linkend="s2.menu_edit_remove_from_diagram"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
		            		fileref="images/icons/navigate_back.gif" format="GIF" />
		            	</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Zurück</literal> Siehe vollständige Beschreibung 
	            unter <xref linkend="s2.ref.menu_select"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/navigate_forward.gif"
	            				format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Vorwärts</literal> Siehe vollständige Beschreibung 
	            unter <xref linkend="s2.ref.menu_select"/>.
            </para>

          </listitem>

        </itemizedlist>

      </section>

      <section>

        <title>Ansicht-Operationen</title>

        <para>
        	Die Schaltfläche <literal>Suche...</literal> hat das identische 
        	Verhalten wie das Gegenstück im Menü <literal>Ansicht</literal>. 
        	Die Schaltfläche <literal>Zoom</literal> ist die luxeriöser als 
        	die Version im Menü <literal>Ansicht</literal>.
        </para>

        <itemizedlist>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/find.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Suche...</literal> Siehe vollständige Beschreibung 
	            unter <xref linkend="s2.ref.menu_find"/>.
            </para>

          </listitem>

          <listitem>

            <para>

              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/zoom.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
               
              <literal>Zoom</literal>
              Dies ist eine andere Version als die im Menü 
              <literal>Ansicht</literal> in <xref linkend="s2.ref.menu_zoom"/> 
              beschriebene Fassung. Das Klicken mit der Taste&nbsp;1 auf das 
              Zoom-Symbol öffnet ein Fenster wie im Bild unten dargestellt.
              <figure id="fig.ref.toolbar_zoom">

                <title>Der Zoom-Schieberegler in der Werkzeugleiste</title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/reference/toolbar_zoom_slider.png"
                				format="PNG" />
                		</imageobject>
                	</mediaobject>
                </screenshot>
              </figure>

				Wenn das Fenster geöffnet ist, sind folgende Aktionen möglich:
            </para>

            <itemizedlist>

              <listitem>

                <para>
                	Das Klicken mit der Taste&nbsp;1 auf den 
                	<quote>Schieberegler</quote> gefolgt von der Bewegung der 
                	Taste&nbsp;1 wird den Zoomfaktor einstellen.
                </para>

              </listitem>

              <listitem>

                <para>
                	Das Klicken mit der Taste&nbsp;1 auf die angezeigte 
                	Prozentzahl erlaubt das direkte Editieren des vorgegebenen 
                	Zoomfaktors (in Prozent) mit der Tastatur. Ein Doppelklick 
                	auf den angezeigten Wert markiert den vollständigen Eintrag 
                	für ein leichtes überschreiben.
                </para>

              </listitem>

              <listitem>

                <para>
                	Das Klicken mit der Taste&nbsp;1 ober- oder unterhalb des 
                	Schiebereglers erhöht oder verringert den Zoomfaktor um 1%. 
                	Verwenden Sie diese Funktion, um die Feinjustierung des
                	Prozentsatzes vorzunehmen.
                </para>

              </listitem>

              <listitem>

                <para>
                	Das Klicken mit der Taste&nbsp;1 oder mit der Taste&nbsp;2 
                	auf das <literal>Zoom</literal>-Werkzeug oder ausserhalb 
                	des Schiebereglerfensters schliesst das Fenster.
                </para>

              </listitem>

              <listitem>

                <para>
                	Mit Hilfe der Tastatur kann der Zoom-Schieberegler wie 
                	folgt bedient werden: Wenn das <literal>Zoom</literal>-
                	Symbol in der Werkzeugleiste den Fokus hat (wird durch 
                	einen dünnen blauen Rahmen dargestellt) und drücken der 
                	<keycap>Leertaste</keycap> öffnet sich das Zoom-
                	Schiebereglerfenster. Verwenden Sie die 
                	<keycap>Pfeil</keycap>-Tasten, um den Prozentsatz 1 durch 
                	1 zu erhöhen bzw. zu verringern. Verwenden Sie 
                	<keycap>Umschalt-Tab</keycap>, um den Fokus auf das 
                	Eingabefeld Prozentsatz zu bringen, in dem sie den 
                	vorgegebenen Wert direkt editieren können. Drücken der 
                	Taste <keycap>Return</keycap> aktiviert den geänderten Wert. 
                	Wenn der <quote>Schieberegler</quote> den Fokus hat, drücken 
                	der Taste <keycap>Bild nach oben</keycap>/
                	<keycap>Bild nach unten</keycap> erhöht/verringert den 
                	Prozentsatz um 50. Drücken der Taste <keycap>Pos 1</keycap> 
                	setzt den Prozentsatz auf 500% und <keycap>Ende</keycap> 
                	auf 0%.
                </para>

              </listitem>

            </itemizedlist>

          </listitem>

        </itemizedlist>

      </section>

      <section id="ch.ref.toolbar.create">

        <title>Neues Diagramm</title>

        <para>
        	Diese Schaltflächen haben wie Ihre Gegenstücke im Menü 
        	<literal>Neues Diagramm</literal> identische Funktionen.
 		</para>

        <itemizedlist>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/use_case_diagram.gif"
	            				format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Anwendungsfalldiagramm</literal> Siehe vollständige  
	            Beschreibung unter 
	            <xref linkend="s2.ref.create.diagram.use_case_diagram"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/class_diagram.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Klassendiagramm</literal> Siehe vollständige  
	            Beschreibung unter  
	            <xref linkend="s2.ref.create.diagram.class_diagram"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/sequence_diagram.gif"
	            				format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Sequenzdiagramm</literal> Siehe vollständige  
	            Beschreibung unter 
	            <xref linkend="s2.ref.create.diagram.sequence_diagram"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/collaboration_diagram.gif"
	            				format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Kollaborationsdiagramm</literal> Siehe vollständige  
	            Beschreibung unter  
	            <xref linkend="s2.ref.create.diagram.collaboration_diagram"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/state_diagram.gif" format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Zustandsdiagramm</literal> Siehe vollständige  
	            Beschreibung unter  
	            <xref linkend="s2.ref.create.diagram.state_diagram"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/activity_diagram.gif"
	            				format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Aktivitätsdiagramm</literal> Siehe vollständige 
	            Beschreibung unter  
	            <xref linkend="s2.ref.create.diagram.activity_diagram"/>.
            </para>

          </listitem>

          <listitem>

            <para>
	            <guiicon>
	            	<inlinemediaobject>
	            		<imageobject>
	            			<imagedata align="center"
	            				fileref="images/icons/deployment_diagram.gif"
	            				format="GIF" />
	            		</imageobject>
	            	</inlinemediaobject>
	            </guiicon>
	            <literal>Verteilungsdiagramm</literal> Siehe vollständige  
	            Beschreibung unter  
	            <xref linkend="s2.ref.create.diagram.deployment_diagram"/>.
            </para>

          </listitem>

        </itemizedlist>

      </section>

    </chapter>

    <chapter id="ch.ref.menu">

      <title>Die Menüzeile</title>

      <sect1>

        <title>Einleitung</title>

        <para>
        	Ein wichtiges Prinzip hinter ArgoUML ist es, dass Aktionen auf 
        	jedem Weg, den der Anwender für günstig hält, aufgerufen werden 
        	können. Im Ergebnis können viele (aber nicht alle) Aktionen über das 
        	Menü aber auch über andere Wege in ArgoUML ausgeführt werden.
        </para>

        <para>
        	Eine Anzahl gemeinsamer Menüeinträge ist auch über Tastaturkürzel 
        	verfügbar.
        </para>

        <para>
        	Es ist auch möglich, das Menü von der Tastatur aus zu bedienen. Jede 
        	Ebene eines Menüs wird durch einen Buchstaben (im Menü unterstrichen 
        	dargestellt oder durch Eingabe des Namens im Moment des drückens 
        	der ALT-Taste) identifiziert. Diese Buchstabensequenz, während die 
        	ALT-Taste gedrückt wird, wählt den Eintrag aus.
        </para>

        <para>
        	Das Folgende ist eine Erläuterung, wie die Menüelemente angeordnet 
        	sind.
        </para>

        <para>

          <itemizedlist>

            <listitem>

              <para>
              	Das Menü <emphasis>Datei</emphasis> enthält Operationen, die 
              	auf das ganze Projekt/Datei wirken. Alle Elemente in diesem 
              	Menü können so begründet werden.
              </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Bearbeiten</emphasis> ist hauptsächlich dafür 
              	gedacht, das Modell zu editieren oder den Inhalt eines 
              	Diagrammes zu verändern. Es enthält auch Funktionen, die das 
              	Editieren erst ermöglichen, wie z.B. das Markieren. Dieses 
              	Menü ist nicht für Diagramm-Layout-Funktionen gedacht. Die 
              	meisten Funktionen hier, tun irgendetwas mit dem markierten 
              	Modellelement und Diagramm. Die Elemente <quote>Konfiguriere 
              	Perspektiven...</quote> und <quote>Einstellungen...</quote> 
              	sind ein bißchen unterschiedlich, da sie einstellen, wie ArgoUML 
              	arbeitet - aber sie gehören nicht in das Dateimenü, da ihre 
              	Einstellungen nicht im Projekt gespeichert werden.
              </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Ansicht</emphasis> ist für Funktionen, die 
              	weder das Modell noch das Diagrammlayout verändern, sondern nur 
              	die Art und Weise wie das Diagramm angezeigt wird. Ein gutes 
              	Beispiel ist <quote>Zoom</quote>. 
              	Auch navigierende Funktionen befinden sich hier, z.B. 
              	<quote>Suchen</quote> und <quote>Gehezu Diagramm...</quote>. 
              	Alle Änderungen der Einstellungen dieses Menüs wirken sich auf 
              	alle Diagramme aus (z.B. Zoom).
              </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Neues Diagramm</emphasis> enthält alle 
              	möglichen Diagramme, die erstellt werden können. Dies Funktionen 
              	sind kontextabhänig, da mit dem markierten Modellelement 
              	arbeiten.
              </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Anordnen</emphasis> erlaubt Layoutänderungen 
              	im aktuellen Diagramm, was nicht das selbe ist wie die Elemente 
              	im Menü Ansicht. Die Funktionen können nicht das UML-Modell 
              	ändern.
			  </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Generieren</emphasis> ist für die 
              	Codegenerierung. Die Funktionen hier wirken entweder auf das 
              	markierte Modellelement oder auf das ganze Projekt.
              </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Kritiken</emphasis> ist speziell für die 
              	Einstellungen der Kritiken, die für alle Projekte gelten.
              </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Werkzeuge</emphasis> ist aktuell leer. 
              	Wurden Plugins installiert, erscheinen deren Funktionen an 
              	dieser Stelle.
              </para>

            </listitem>

            <listitem>

              <para>
              	Das Menü <emphasis>Hilfe</emphasis> enthält die üblichen 
              	<quote>Systeminformationen</quote> und <quote>Über 
              	ArgoUML</quote>.
              </para>

            </listitem>

          </itemizedlist>

        </para>

      </sect1>

      <sect1 id="s1.ref.menu_mouse">

        <title>Das Mausverhalten in der Menüzeile</title>

        <para>
        	Das generelle Verhalten der Maus und die Bezeichnung der Tasten 
        	ist umfassend im Kapitel Anwenderschnittstelle ausgeführt (siehe 
			<xref linkend="s1.ref.mouse"/>). Es gibt kein ArgoUML-spezifisches 
			Verhalten für Menüs.
		</para>

      </sect1>

      <sect1>

        <title>Das Menü Datei</title>

        <para>
        	Dieses sind Aktionen, welche die Ein- und Ausgabe betreffen und das 
        	umfassende Management von Projekten sowie das ArgoUML-System.
        </para>

        <sect2 id="s2.ref.menu_new">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/new.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neu
          </title>

          <indexterm><primary>Neu</primary></indexterm>
          <indexterm><primary>Tastenkürzel</primary>
          <secondary>Strg-N</secondary></indexterm>
          <para>Tastenkürzel Strg-N.</para>

          <para>
          	Dies initialisiert ein neues Projekt in ArgoUML. Das Projekt wird 
          	ohne Name erstellt. Es enthält ein (oberste Ebene) 
          	<literal>unbenanntesModell</literal> bezeichnetes 
          	<literal>Modell</literal> und zwei leere Diagramme: Ein 
          	Klassendiagramm und ein Anwendungsfalldiagramm.
          </para>

          <caution>

            <para>
            	<literal>unbenanntesModell</literal> ist kein Modellname, der 
            	der Konvention entspricht (die meisten Prozesse erwarten, dass 
            	Modelle aus Kleinbuchstaben gebildet werden sollten). ArgoUML 
            	erlaubt es Ihnen Groß- und Kleinbuchstaben zu verwenden, aber 
            	eine Kritik wird Sie warnen, dass dies nicht der Konvention 
            	entspricht. Siehe <xref linkend="s1.ref.model"/>.
            </para>

          </caution>

          <para>
          	Wurde das Modell geändert (was durch den <quote>*</quote> in der 
          	Titelzeile des ArgoUML-Fensters angezeigt wird), ist die Aktivierung 
          	der Funktion <quote>Neu</quote> potentiell nicht die Absicht des 
          	Anwenders, da sie die Änderungen löschen würde. Aus diesem Grund 
          	erscheint ein Bestätigungsdialog, der es dem Anwender erlaubt, zuerst 
          	seine Arbeit zu speichern oder die Operation vollständig rückgängig 
          	zu machen.
          </para>

          <figure>

            <title>
            	Der Bestätigungsdialog für <literal>Neu</literal>.
			</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_dialog_confirm_new.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject></screenshot>
          </figure>

        </sect2>

        <sect2 id="s2.ref.menu_open_project">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/open_project.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Projekt öffnen...
          </title>

          <indexterm><primary>Projekt öffnen...</primary></indexterm>
          <indexterm><primary>Tastenkürzel 
          </primary><secondary>Strg-O</secondary></indexterm>
          <para>Tastenkürzel Strg-O.</para>

          <para>
          	Diese Funktion öffnet ein existierendes Projekt aus einer Datei. 
          	Die Auswahl dieser Menüoption wird einen Dateiauswahldialog öffnen 
          	(siehe <xref linkend="fig.ref.menu_open_project"/>).
          </para>

          <figure id="fig.ref.menu_open_project">

            <title>
            	Der Dateiauswahldialog für <literal>Projekt öffnen...</literal>.
			</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_open_project.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Der Hauptbereich des Dialoges ist ein Textbereich mit einer Liste 
          	aller Verzeichnisse und Dateien im aktuell ausgewählten Verzeichnis, 
          	welches mit dem aktuellen Filter übereinstimmt (siehe nachfolgend).
          </para>

          <para>
          	Das Navigieren im Verzeichnisbaum ist durch das Markieren eines 
          	Verzeichnisses in der DropDown-Auswahl oben im Dialog möglich. Im 
          	Baum tiefer navigieren kann durch Doppelklicken auf das im 
          	Hauptbereich angezeigte Verzeichnis mit der Taste&nbsp;1 bewirkt 
          	werden.
          </para>

          <para>
          	Im unteren Teil des Dialoges befindet sich ein Textfeld mit der 
          	Bezeichnung <literal>Dateiname:</literal> für den Namen der Datei, 
          	die geöffnet werden soll. Der Dateiname kann hier direkt eingegeben 
          	oder aus der obigen Verzeichnisliste mit Hilfe des 
          	Taste&nbsp;1-Klick ausgewählt werden.
          </para>

          <para>
          	Darunter befindet sich eine mit <literal>Dateityp:</literal> 
          	bezeichnete DropDown-Auswahl, um einen Filter für die Dateien 
          	auszuwählen, die in der Verzeichnisliste angezeigt werden sollen. 
          	Nur die Dateien werden angezeigt, die mit diesem Filter 
          	übereinstimmen. Die verfügbaren Filter sind nachstehend aufgeführt. 
          	Der Standardfilter ist der erste, der alle verfügbaren Formate 
          	kombiniert.
          </para>

          <itemizedlist>

            <listitem>
              <para>ArgoUML-Datei (*.zargo, *.uml, *.xmi, *.xml, *.zip)</para>
            </listitem>

            <listitem>
              <para>ArgoUML-komprimierte Projektdatei (*.zargo)</para>
            </listitem>

            <listitem>
              <para>ArgoUML-Projektdatei (*.uml)</para>
            </listitem>

            <listitem>
              <para>XML Metadata Interchange (*.xmi)</para>
            </listitem>
            
            <listitem>
              <para>XML Metadata Interchange (*.xml)</para>
            </listitem>
            
            <listitem>
              <para>XMI komprimierte Projektdatei (*.zip)</para>
            </listitem>

          </itemizedlist>

        </sect2>

        <sect2 id="s2.ref.menu_save_project">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/save_project.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Projekt speichern
          </title>

          <indexterm><primary>Projekt speichern</primary></indexterm>
          <indexterm><primary>Tastenkürzel
          </primary><secondary>Strg-S</secondary></indexterm>
          <para>Tastenkürzel Strg-S.</para>

          <para>
          	Speichert das Projekt unter seinem aktuellen Dateinamen. Benutzen 
          	Sie <literal>Projekt speichern unter...</literal>, um das Projekt 
          	in einer anderen Datei zu speichern. Wurde kein Dateiname vergeben (
          	z.B. nach <literal>Neu</literal>), dann arbeitet diese Funktion 
          	genau wie <literal>Projekt speichern unter...</literal>.
          </para>

          <note>

            <para>
           		Unter bestimmten Umständen gibt es nichts zu speichern. Dann ist 
           		diese Menüoption deaktiviert. Z.B. wenn der Anwender das geladene 
           		Projekt nicht verändert hat. Die Präsenz eines <quote>*</quote> 
           		in der Titelzeile von ArgoUML zeigt an, dass das aktuelle 
           		Projekt <quote>ungesichert</quote> ist (geändert wurde) und 
           		gespeichert werden kann.
            </para>

          </note>

        </sect2>

        <sect2 id="s2.ref.menu_save_project_as">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/save_project_as.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Projekt speichern unter...
          </title>

          <para>
          	Öffnet einen Dialog, der es Ihnen erlaubt, das Projekt unter einem 
          	anderen Dateinamen zu speichern (oder das erste Mal einen Dateinamen 
          	zu spezifizieren, wenn das Projekt ein neues Projekt ist).
          </para>

          <para>
          	Der Dialog ist weitgehend identisch mit dem für <literal>Projekt 
          	öffnen</literal> (siehe <xref linkend="fig.ref.menu_open_project"/>). 
          	Die Dateinamenerweiterung wird automatisch gesetzt.
          </para>

        </sect2>

        <sect2 id="s2.ref.menu_revert_to_saved">

          <title>Projekt speichern rückgängig machen</title>

          <para>
          	Diese Menüoption erlaubt es Ihnen, alle vorher vorgenommen Änderungen 
          	rückgängig zu machen und die zuletzt gespeicherte Version des 
          	aktuellen Projektes zurückzuladen. Sie arbeitet ein bisschen wie 
          	die <literal>Rückgängig</literal>-Funktion, speichert aber nur die 
          	Änderungen zurück, die seit dem letzten Speichern der Datei 
          	vorgenommen wurden.
          </para>

          <para>
          	Diese Menüoption ist deaktiviert, bis das aktuelle Projekt 
          	gespeichert oder vorher geladen und geändert wurde.
          </para>

          <para>
          	Wenn diese Menüoption aktiviert ist, öffnet sich ein kleiner 
          	Bestätigungsdialog, wie im nachfolgenden Bild gezeigt. Diese 
          	Warnung, dass alle vorher vorgenommenen Änderungen rückgängig 
          	gemacht werden ist notwendig, da diese Aktion nicht mehr rückgängig 
          	gemacht werden kann. Die Auswahl <literal>Nein</literal> bricht 
          	die ganze Aktion ab. Das ist dann so, als hätten Sie die Menüoption 
          	niemals ausgewählt. Die Auswahl <literal>Ja</literal> lädt die 
          	zuletzt gespeicherte Datei zurück.
          </para>

          <figure id="fig.ref.menu_revert_to_saved">

            <title>Der Warndialog für Projekt speichern rückgängig machen.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_revert_to_saved.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

        </sect2>

        <sect2>

          <title>XMI importieren...</title>

          <para>
          	Diese Menüoption erlaubt es Ihnen, ein UML 1.3 oder 1.4-Modell zu 
          	laden, welches durch ein anderes Tool als XMI-Datei, entsprechend 
          	dem XMI-V1.0-, V1.1- oder V1.2-Standard exportiert wurde. Die 
          	Erweiterung einer solchen Datei sollte <literal>.xmi</literal> 
          	lauten.
          </para>

          <para>
          	Wenn das Modell geändert wurde (angezeigt durch einen <quote>*
          	</quote> in der Titelzeile von ArgoUML), dann ist die Aktivierung 
          	der <quote>XMI importieren...</quote>-Funktion wahrscheinlich nicht 
          	die Absicht des Anwenders, da dies die Änderungen löscht. Aus diesem 
          	Grund erscheint die Dialog, der es dem Anwender erlaubt, zuerst 
          	seine Arbeit zu speichern oder die Operation vollständig abzubrechen.
          </para>

          <figure>

            <title>Der Bestätigungsdialog für <literal>
            XMI importieren...</literal>.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_dialog_confirm_new.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Ist dieses Menü aktiviert erscheint die Standarddateiauswahl, siehe 
			<xref linkend="fig.ref.menu_import_xmi"/>.
			Beachten Sie die Tatsache, dass diese Datei nur das Modell 
			beinhaltet, nicht irgendein Diagrammlayout. Aus diesem Grund wird 
			das neue Projekt keinerlei Diagramme enthalten.
          </para>

          <figure id="fig.ref.menu_import_xmi">

            <title>Der Dialog für <literal>
            XMI importieren...</literal>.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_import_xmi.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

        </sect2>

        <sect2>

          <title>Exportiere als XMI...</title>

          <para>
          	Dieses Menü erlaubt es Ihnen, die vollständige Struktur eines UML 
          	1.4-Modelles als XMI-Datei entsprechend dem XMI V2.1-Standard zu 
          	speichern. Beachten Sie die Tatsache, dass diese Datei nur das 
          	Modell enthalten wird, nicht irgendein Diagrammlayout. Aus diesem 
          	Grund gehen die Diagramme verloren, wenn die XMI-Datei über das 
          	Menü <literal>Datei - Projekt öffnen...</literal> erneut geladen 
          	wird.
          </para>

          <para>
          	Ist das Menü aktiviert, erscheint die Standarddateiauswahl, siehe 
			<xref linkend="fig.ref.menu_export_xmi"/>.
		  </para>

          <figure id="fig.ref.menu_export_xmi">

            <title>Der Dialog für <literal>
            Exportiere als XMI...</literal>.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_export_xmi.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

        </sect2>

        <sect2 id="s3.ref.menu_import_sources">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/import_sources.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Quellcode importieren...
          </title>

          <para>
          	Eine sehr leistungsfähige Eigenschaft von ArgoUML ist es, das es 
          	Java-Code <quote>reengineeren</quote> kann, um ein Klassendiagramm 
          	zu erhalten. Dieser Untermenüeintrag spezifiert den Java-Code, der 
          	zum reengineeren importiert werden soll.
          </para>

          <para>
          	Der Dialog ist ähnlich dem für <literal>Projekt öffnen...</literal> 
          	(siehe <xref linkend="fig.ref.menu_open_project"/>), allerdings mit 
          	zwei zusätzlichen Registern neben der Verzeichnisliste, wie in 
          	<xref linkend="fig.ref.menu_import_sources"/> gezeigt).
          </para>

          <figure id="fig.ref.menu_import_sources">

            <title>Der Dateiauswahldialog für <literal>
            Quellcode importieren...</literal>.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_import_sources.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Diese Felder sind im Verhalten die gleichen wie in <literal>Projekt 
          	öffnen...</literal> (siehe 
          	<xref linkend="s2.ref.menu_open_project"/>).
          </para>

          <para>
          	In der Nähe des Dateifilters <quote>Alle Dateien</quote> gibt es den 
          	Standardfilter <quote>Java-Quelldatei (*.java).</quote>
          </para>

          <para>
          	Das erste der beiden Register ist mit <literal>Allgemeines</literal> 
          	bezeichnet und durch einen Taste&nbsp;1-Klick auf das Register 
          	ausgewählt. Es enthält eine Auswahlbox für die Auswahl der Sprache (
          	in V0.18 von ArgoUML kann nur Java ausgewählt werden) und der 
          	folgenden Wahlmöglichkeiten:
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Verzeichnisse rekursiv absteigend</literal>
              	. Wenn markiert (Standard), dann wird das Reengineering auch 
              	die Unterverzeichnisse nach Javadateien durchsuchen. Wenn nicht, 
              	wird die Suche auf das aktuelle Verzeichnis eingeschränkt.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Nur geänderte/neue Dateien</literal>
              	. Wenn markiert (Standard), dann werden nur geänderte oder 
              	neue Dateien importiert. Wenn nicht, werden alle Klassen 
              	ersetzt. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Erzeuge Diagramme aus dem importierten Code</literal>
              	. Wenn Sie dies deaktivieren, werden keine Diagramme erzeugt. 
              	Z.B., alle Daten werden nur im Explorer sichtbar sein.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Minimiere Klassensymbole in den Diagrammen</literal>
              	. Wenn aktiviert, dann werden die Attribut- und Operations-
              	Trenner in den Klassen des generierten Klassendiagrammes nicht 
              	angezeigt. Achtung: Dieses Element ist standardmäßig markiert 
              	und wird durch viele Anwender übersehen, die dann von dem 
              	Ergebnis überrascht sind. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Automatisches Diagramm-Layout ausführen</literal>.
              	Wenn markiert, dann wird ArgoUML sein Bestes tun, um
              	die generierten Diagramme automatisch zu formatieren.
              	Wenn nicht, dann werden alle Elemente in die linke
              	obere Ecke des Diagrammes plaziert.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>
              		Importdetails: Nur Klassifizierungen /
              		Klassifizierungen und Eigenschaften / Vollständiger 
              		Import
              	</literal>
              	. Das letztere ist der Standard.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Codierung der Eingabedatei:</literal>. Der Wert 
				<literal>Cp1252</literal> ist sehr oft der Standard. Diese 
				Zeichenkette repräsentiert den <literal>codierten Zeichensatz- 
				Bezeichnung (CCSID)</literal>.
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Der zweiter der beiden Register ist mit <literal>Java</literal> 
          	bezeichnet und wird durch einen Taste&nbsp;1-Klick auf das Register 
          	ausgewählt. Es enthält zwei Paar Optionsauswahlfelder.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	Die erste Optionsauswahl erlaubt die Auswahl zwischen der 
              	Modellierung der Attribute von Javaklassen als UML-Attribute (
              	der Standard) oder als UML-Assoziationen auf die Klasse.
              </para>

            </listitem>

            <listitem>

              <para>
              	Die zweite Optionsauswahl erlaubt die Auswahl zwischen der 
              	Modellierung von arrays als eigenständige neue Datentypen 
              	(der Standard) oder als Basisdatentyp mit Kardinalität.
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/page_setup.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Seite einrichten...
          </title>

          <indexterm><primary>Seite einrichten ...</primary></indexterm>
          <para>
          	Diese Option öffnet den Standarddialog des Betriebssystems, um die 
          	Drucker-Papiergrösse, die Ausrichtung und andere Optionen 
          	einzustellen.
          </para>

        </sect2>

        <sect2 id="s2.ref.menu_print">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/print.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Drucken...
          </title>

          <indexterm><primary>Drucken ...</primary></indexterm>
          <indexterm><primary>Tastenkürzel 
          </primary><secondary>Strg-P</secondary></indexterm>
          <para>Tastenkürzel Strg-P.</para>

          <para>
          	Diese Option öffent den Standarddialog des Betriebssystems, der es 
          	Ihnen erlaubt, das aktuelle Diagramm auszudrucken.
          </para>

          <para>
          	In einigen Fällen erscheint der Dialog 
          	<xref linkend="fig.ref.menu_diagram_exceeds_page"/>, wenn der 
          	Druckvorgang gestartet wurde. 
          	Die Auswahl der Schaltfläche <quote>An Seite anpassen</quote> druckt 
          	das gesamte Diagramm auf eine Seite, indem es das Diagramm 
          	herunterskaliert. Dies kann dazu führen, dass der gesamte Text bei 
          	grossen Diagrammen zu klein zum lesen wird. Aber es ist ein 
          	schneller und einfacher Weg einen verwendbaren Ausdruck zu bekommen. 
          	Die Auswahl der Option <quote>Mehrere Seiten</quote> druckt 
          	unskaliert, indem es das Diagramm in so viele Einzelteile aufteilt,
			wie nötig. Drücken der Schliessen-Schaltfläche führt zum Schliessen 
			des Dialoges.
          </para>

          <figure id="fig.ref.menu_diagram_exceeds_page">

            <title>Der Dialog: Das Diagramm überschreiten die Seitengrösse.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_diagram_exceeds_page.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <warning>

            <para>
            	Wenn das aktuelle Diagramm keine markierten Modellelemente 
            	enthält, dann wird das gesamte Diagramm gedruckt. Jedoch, wenn 
            	ein oder mehrere Modellelemente markiert sind, wird nur der 
            	Bereich ausgedruckt den diese umfassen! Wenn die Skalierung 
            	ausgewählt ist (durch die Wahl der Option <quote>An Seite 
            	anpassen</quote> im oben beschriebenen Dialog), dann wird die 
            	Skalierung nur auf  Basis der markierten Modellelemente 
            	ausgeführt. Ist keine Skalierung ausgewählt (oder nicht 
            	notwendig), dann werden alle Seiten ausgedruckt, die ein 
            	markiertes Modellelement beinhalten.
            </para>

          </warning>

        </sect2>

        <sect2 id="s2.ref.menu_export_graphics">

          <title>Grafik exportieren...</title>

          <para>
          	Diese Menüoption öffnet einen Dialog, der es erlaubt, das aktuell 
          	markierte Diagramm (im Editierfenster) in einem von einer Vielzahl 
          	von Grafikformaten zu speichern.
          </para>

          <para>
          	Der Dialog ist mit dem in <literal>Projekt öffnen</literal> 
          	verwendeten identisch (siehe 
          	<xref linkend="fig.ref.menu_open_project"/>), mit Ausnahme des 
          	Feldes <literal>Dateityp:</literal>. Der ausgewählte Dateityp 
          	bestimmt das beim Speichern verwendete Grafikformat. Der Dateiname 
          	wird automatisch mit der entsprechenden Dateierweiterung erweitert (
          	wenn er nicht bereits eingegeben wurde). Auf Basis des Diagrammnamens 
          	wird ein Standarddateiname generiert. 
          </para>

          <para>Die verfügbaren Grafiktypen sind:</para>

          <itemizedlist>

            <listitem>
              <para>GIF-Bild (*.gif)</para>
            </listitem>
            <listitem>
              <para>Encapsulated Postscript-Datei (*.eps)</para>
            </listitem>
            <listitem>
              <para>PNG-Bild (*.png)</para>
            </listitem>
            <listitem>
              <para>Postscript-Datei (*.ps)</para>
            </listitem>
            <listitem>
              <para>Scalable Vector Graphics-Datei (*.svg)</para>
            </listitem>

          </itemizedlist>

          <para>
          	Das standardmäßig ausgewählte Grafikformat wird im Dialog unter der 
          	Menüoption Bearbeiten - Einstellungen... eingestellt.
          </para>

          <!--caution>
            TODO: Is this still true?

            <para>The PNG graphics does not support shadows very well, 
            so maybe it is better to either save in GIF format, or 
            switch shadows off before saving in PNG format.</para>

          </caution-->

        </sect2>
        
        <sect2 id="s2.ref.menu_export_all_graphics">

          <title>Alle Grafiken exportieren...</title>

          <para>
          	Diese Menüoption öffnet einen Dialog, um ein Verzeichnis auszuwählen. 
          	In dieses Verzeichnis wird für alle Diagramme des aktuellen Projektes 
          	je eine Grafikdatei generiert.
          </para>
          
          <para>
          	Die Namen der Dateien werden aus den Diagrammnamen gebildet. Das 
          	verwendete Grafikformat wurde im Bearbeiten-Menü (siehe 
			<xref linkend="s2.ref.menu_settings"/>) eingestellt.
		  </para>

        </sect2>
        
        <sect2 id="s2.ref.menu_notation">

          <title>Notation</title>

          <para>
          	Dieses Untermenü präsentiert eine Auswahl von Optionsschaltflächen 
          	für die Notation, z.B. die Sprache, in der alle textuellen 
          	Erläuterungen in den Diagrammen dargestellt werden.
          </para>

          <para>
          	Diese Eigenschaft definiert die Notation des Projektes.
          </para>

          <para>Es gibt 2 Wege, die Notation einzustellen:</para>

          <itemizedlist>

            <listitem>

              <para>
              	Im Bearbeiten-Menü, siehe 
              	<xref linkend="s3.ref.menu_settings_notations"/> im 
              	Notationsregister des Dialoges Einstellungen, der die Standard-
              	Notation für neue Projekte definiert. Diese Einstellung wird 
              	in der Datei <filename>argouml.user.properties</filename> im 
              	Verzeichnis <filename>.argouml</filename> des User-Home-
              	Verzeichnisses gespeichert.
              </para>

            </listitem>

            <listitem>

              <para>
              	Im Datei-Menü, Menüelement Notation. Dieses bestimmt, wie alle 
              	textuellen Erläuterungen in den Diagrammen des aktuellen 
              	Projektes dargestellt werden. Diese Einstellung wird in der 
              	Projektdatei gespeichert.
              </para>

            </listitem>

          </itemizedlist>

          <para>Die folgenden 2 Notationen werden in ArgoUML erzeugt:</para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/uml_notation.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>UML 1.4</literal>. Verwendet die UML-Notation als 
	              Standardnotation für jedes Modellelement in jedem Diagramm.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/java_notation.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Java</literal>. Verwendet die Java-Notation als 
	              Standardnotation für jedes Modellelement in jedem Diagramm.
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Die folgenden Optionen sind nur verfügbar, wenn das entsprechende 
          	Plugin installiert wurde.
          </para>

          <itemizedlist>

            <listitem>

              <para><literal>Cpp</literal>.</para>

            </listitem>

            <listitem>

              <para><literal>CSharp</literal>.</para>

            </listitem>

            <listitem>

              <para><literal>PHP</literal>.</para>

            </listitem>

          </itemizedlist>

          <remark>
          	Neben UML ist in V0.22 von ArgoUML nur Java teilweise implementiert.
          </remark>

        </sect2>
        
        <sect2 id="s2.ref.menu_properties">
        
          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/settings.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Projekteinstellungen
          </title>

          <para>
          	In dieser Menüoption erscheint ein Dialog, der es dem Anwender 
          	erlaubt, verschiedene Optionen des aktuell geladenen Projektes 
          	einzustellen.
          </para>

          <para>
          	Alle Einstellungen in diesem Dialog werden in der Projektdatei, 
          	zusammen mit dem Modell, gespeichert.
          </para>
          
          <figure id="fig.ref.menu_properties_user">

            <title>
            	Der Dialog Projekteinstellungen: Das Register Benutzer.
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/properties-user.gif"
            				format="GIF" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>
          
          <para>
          	Im Register Benutzer können Sie folgende Felder einstellen:
          </para>
          
          <itemizedlist>

          <listitem>
	          <para>
	          	Das erste Feld enthält den Namen des Autors oder den 
	          	Verantwortlichen für das aktuelle Projekt. Standardmäßig wird 
	          	der Name und die E-Mailadresse des Erstellers eingefügt, so dass 
	          	Sie dies wahrscheinlich niemals bearbeiten müssen. Aber, es ist 
	          	möglich.
	          </para>
          </listitem>
          
          <listitem>
	          <para>
	          	Das Feld Projektbeschreibung kann einen beliebigen Text 
	          	enthalten, den Sie zur Beschreibung des Projektes benötigen. 
	          	Standardmäßig ist dieses Feld leer.
	          </para>
          </listitem>
          
          <listitem>
	          <para>
	          	Das Feld "Gespeichert mit ArgUML" gibt die Version von 
	          	ArgoUML an, mit der dieses Projekt gespeichert wurde (zum 
	          	letzten Mal gespeichert wurde). Dies kann hilfreich sein, wenn 
	          	mehrere Designer mit unterschiedlichen Versionen von ArgoUML 
	          	arbeiten, die nicht immer rückwärtskompatibel sind.
         	  </para>
          </listitem>

          </itemizedlist>

          <figure id="fig.ref.menu_properties_profiles">

             <title>Der Dialog Projekteinstellungen &ndash; Das Register Profile.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
             				fileref="images/reference/properties-profiles.gif"
             				format="GIF"/>
             		</imageobject>
             	</mediaobject>
             </screenshot>
          </figure>
          
          <para>
          	Im Register Profile können Sie die folgenden Einstellungen ändern:
          </para>
          
          <itemizedlist>
          	<listitem>
          		<para>
          			Den Typ der &ldquo;Stereotype Darstellung&rdquo; für das 
          			Projekt; diese kann als Text, mit kleinen oder großen 
          			Symbolen erscheinen. 
          		</para>
          	</listitem>
          	<listitem>
          		<para>
          			Die im Projekt konfigurierten UML-Profile &ndash; die 
          			Modellelemente dieser UML-Profile können im Projekt 
          			referenziert werden.
          		</para>
          	</listitem>
         </itemizedlist>

          <figure float="1" id="fig.ref.menu_properties_notations">
            <title>
            	Der Dialog Projekteinstellungen: &ndash; Das Register Notationen.
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/properties-notations.gif"
            				format="GIF" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>
          
          <para>
          	Im Register Notationen können Sie die folgenden Felder einstellen:
          </para>
        
        <itemizedlist>

          <listitem>
            <para>
            	Das erste Feld ist ein Dialogfeld, das die Auswahl der im 
            	Projekt verwendeten Notation erlaubt. Standardmäßig werden UML 
            	und Java aufgelistet. Es können aber auch andere Sprachen per 
            	Plugins hinzugefügt werden. Weitere Erläuterungen entnehmen Sie 
            	dem Kapitel über die Notation:
            	<xref linkend="s1.ref.notation"/>.
            </para>

          </listitem>

          <listitem>
            <para>
            	<literal>Französische Anführungszeichen</literal> 
            	(&laquo;&nbsp;&raquo;) für Stereotypen (standarmäßig leer). 
            	Standardmäßig verwendet ArgoUML Paare von <emphasis>kleiner als
            	</emphasis> und <emphasis>größer als</emphasis> 
            	(&lt;&lt; &gt;&gt;) Zeichen für Stereotypen. Wird dieses 
            	Kästchen markiert, werden die Stereotypen in den Diagrammen 
            	in richtigen französische Anführungszeichen gestellt
				(&laquo;&nbsp;&raquo;).
            </para>

            <para>
            	Diese Eigenschaft wurde ArgoUML vermutlich hinzugefügt, weil 
            	französische Anführungszeichen durch die verschiedensten 
            	Schriften nur sehr schlecht unterstützt werden und wenn Sie 
            	vorhanden sind, dann sind sie sehr klein und schlecht sichtbar.
            </para>
          </listitem>
          
          <listitem>
            <para>
                <literal>Sichtbarkeit anzeigen</literal>
                (standardmäßig leer). Ist dies markiert, dann wird ArgoUML die 
                Sichtbarkeitssymbole vor jedem z.B. Attribut im Diagramm 
                anzeigen. In der UML-Notation ist dies das "+" für public, "-" 
                für private, "#" für protected und "~" für Paket. Für ein 
                Attribut könnte es z.B. anzeigen: <literal>+neuesAttr : int
                </literal>.
            </para>
          </listitem>
          
          <listitem>
                <para>
	                <literal>Kardinalität anzeigen</literal>
	                (standardmäßig leer). Ist dies markiert, wird ArgoUML die 
	                Kardinalität von z.B. Attributen im Diagramm anzeigen. In der 
	                UML-Notation wird die Kardinalität zwischen [] angezeigt. Wie 
	                z.B.: <literal>+neuesAttr [0..*] : int</literal>.
	                Diese Einstellung hat keinen Einfluss auf die Anzeige der 
	                Kardinalität an Assoziationsenden.
                </para>
              </listitem>

              <listitem>
                <para>
	                <literal>Anfangswerte anzeigen</literal>
	                (standardmäßig leer). Ist dies markiert, wird ArgoUML den 
	                Anfangswert eines z.B. Attributes im Diagramm anzeigen. In  
	                der UML-Notation wird der Anfangswert wie folgt dargestellt: 
	                <literal>+neuesAttr : int = 1</literal>.
                </para>
              </listitem>

              <listitem>
                <para>
	                <literal>Eigenschaften anzeigen</literal>
	                (standardmäßig leer). Ist dies markiert, wird ArgoUML die 
	                Eigenschaften zwischen geschweiften Klammern {} anzeigen.
	                Für ein Attribut könnte die Anzeige wie folgt aussehen: 
	                <literal>+neuesAttr : int { eingefroren }</literal>.
	            </para>
              </listitem>

              <listitem>
                <para>
	                <literal>Typen und Parameter anzeigen</literal>
	                (standardmäßig markiert). Wenn dieses Markierfeld nicht 
	                markiert ist, werden die Attribute in Klassen ohne Typ 
	                dargestellt und Operationen ohne Parameter angezeigt. Diese 
	                Eigenschaft kann während der Analysephase Ihres Projektes 
	                nützlich sein. Sind alle Markierfelder im Register Notation 
	                nicht markiert, dann zeigt ArgoUML z.B. für ein Attribut 
	                folgendes an:  
	                <literal>neueOperation()</literal>.
                </para>
              </listitem>

              <listitem>
                <para>
                	<literal>Stereotypen im Explorer anzeigen</literal>
                	(standardmäßig leer). Ist dies markiert, dann wird ArgoUML 
                	die Stereotypen in der Nähe des Modellelementsymboles im 
                	Explorer anzeigen. Z.B. in der Baumstruktur auf der linken 
                	Seite. 
                </para>
              </listitem>

              <listitem>
                <para>
                	<literal>Standard-Schattenbreite</literal>
                	(standardmäßig auf 1 eingestellt). ArgoUML ist in der Lage, 
                	aus ästhetischen Gründen alle Elemente in einem Diagramm mit 
                	einem Schatten zu zeichnen. Verwenden Sie diese Einstellung, 
                	um die Größe des Schattens einzustellen. Diese Einstellung 
                	wird beim Erstellen des Modellelementes verwendet. Das 
                	Register "Darstellung" im Detailfenster erlaubt es Ihnen, 
                	den Schatten nach dem Erstellen je Modellelement 
                	einzustellen. ArgoUML V0.22 behält diese Änderungen 
                	allerdings nach dem Speichern und Laden nicht. 
                </para>
              </listitem>

        </itemizedlist>
          
          <figure float="1" id="fig.ref.menu_properties_diagram_appearance">

            <title>Der Dialog Projekteinstellungen &ndash; Das Register Diagramm-Darstellung.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
             				fileref="images/reference/properties-diagram-appearance.gif"
             				format="GIF"/>
             			</imageobject>
             		</mediaobject>
             	</screenshot>
          </figure>
          
          <para>
          	Im Register Diagramm-Darstellung können Sie die im Diagramm 
          	verwendete Schriftart ändern.
	   	  </para>

        </sect2>

        <sect2>

          <title>Am häufigsten verwendete Dateien</title>

          <para>
          	ArgoUML erinnert sich an die am häufigsten gespeicherten Dateien 
          	und listet sie an dieser Stelle auf, um Sie in die Lage zu versetzen, 
          	diese auf einfache Weise zu laden.
          </para>

          <para>
          	Die maximale Anzahl von Dateien, die hier gelistet werden können, 
          	kann im Menü <literal>Bearbeiten</literal> -&gt; <literal>
          Einstellungen...</literal> eingestellt werden. Die Liste der Dateien 
          wird in der Datei <filename>argo.user.properties</filename> im 
          Homeverzeichnis des Benutzers gespeichert.
          </para>

        </sect2>

        <sect2>

          <title>Beenden</title>

          <indexterm><primary>Beenden</primary></indexterm>
          <indexterm><primary>Tastenkürzel 
          </primary><secondary>Alt-F4.</secondary></indexterm>
          <para>Tastenkürzel Alt-F4.</para>

          <para>
          	Diese Menüoption schliesst ArgoUML. Wenn Sie ein Projekt mit 
          	ungesicherten Änderungen haben, erscheint eine Warnmeldung, die Sie 
          	fragt, ob Sie diese speichern wollen. Siehe 
          	<xref linkend="fig.ref.menu_save_changes"/>. Die Optionen sind: 
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Ja</literal>
              	(das Projekt speichern und ArgoUML beenden);
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Nein</literal>
              	(das Projekt nicht speichern, aber ArgoUML beenden); und
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Abbrechen</literal>
              	(das Projekt nicht speichern und ArgoUML nicht beenden).
              </para>

            </listitem>

            <listitem>

              <para>
              	Der Dialog kann auch durch Klicken auf die 
              	Schliessen-Schaltfläche im Fensterrand geschlossen werden. 
              	Dies hat den gleichen Effekt wie die Auswahl 
              	&quot;Abbrechen&quot;.
              </para>

            </listitem>

          </itemizedlist>

          <figure id="fig.ref.menu_save_changes">

            <title>Der Dialog Änderungen speichern.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_save_changes.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

        </sect2>

      </sect1>

      <sect1>

        <title>Das Menü Bearbeiten</title>

        <para>
        	Dieses Menü enthält die Unterstützung für das Markieren von 
        	Modellelemente im Editierfenster; das Entfernen von Modellelementen 
        	aus Diagrammen und dem Modell und die Steuerung der 
        	Benutzereinstellungen.
        </para>

        <sect2 id="s2.ref.menu_select">

          <title>Markieren</title>

          <para>
          	Dieses Untermenü unterstützt das Markieren von Elementen im Menü 
          	Bearbeiten. Es hat folgende Einträge:
          </para>

          <itemizedlist>

            <listitem>

              <para>
	              <literal>Alle Elemente</literal>
	              (Tastenkürzel Strg-A).
	              <indexterm><primary>Alle Elemente</primary></indexterm> 
	              <indexterm><primary>Tastenkürzel 
	              </primary><secondary>Strg-A</secondary></indexterm>
	              Markiert alle Modellelemente im aktuellen Fenster oder im 
	              aktuellen Feld. Das genaue Verhalten hängt vom 
	              <literal>aktuellen Fenster</literal> ab (z.B. das Letzte, in 
	              das Sie hineingeklickt haben); Explorerfenster, Editierfenster, 
	              "Zu Bearbeiten"-Fenster, Detailfenster. Eine Regel ist auf 
	              alle Fälle anwendbar: die Markierung im Diagramm 
	              (Editierfenster) und im Explorer sind immer synchronisiert. 
              </para>

              <para>
              	Wenn das Editierfenster das <literal>aktuelle Fenster</literal> 
              	ist: Zuerst werden die Markierungen im Explorer und im aktuellen 
              	Diagramm entfernt und dann wird alles im Diagramm befindliche 
              	markiert (und wenn die gleichen Elemente im Explorer erscheinen, 
              	werden diese ebenfalls markiert, weil dies immer synchronisiert 
              	ist).
              </para>

              <para>
              	Wenn der Explorer das <literal>aktuelle Fenster</literal> ist: 
              	Alle sichtbaren Elemente im Explorer sind markiert und 
              	unsichtbare Elemente sind nicht markiert.
              </para>

              <para>
              	Wenn das "Zu Bearbeiten"-Fenster das <literal>aktuelle 
              	Fenster</literal> ist: Alle sichtbaren Elemente im "Zu 
              	Bearbeiten"-Fenster sind markiert, alle unsichtbaren Elemente 
              	sind nicht markiert. Tatsächlich funktioniert dies genauso wie 
              	im Explorerfenster, weil beides Baumstrukturen sind.
              </para>

              <para>
              	Wenn das Detailfenster das <literal>aktuelle Fenster</literal> 
              	ist: Die Funktion arbeitet nur, wenn sich der Cursor in einem 
              	bestimmten Feld befindet, in dem das Markieren möglich ist. Z.B. 
              	in einem Namensfeld. In so einem Fall erweitert die Funktion 
              	Alle Elemente markieren die aktuelle Markierung auf den gesamten 
              	Feldinhalt.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/navigate_back.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Vorheriges Element</literal>. ArgoUML merkt sich 
	              einen Satz von Modellelementen, den Sie während der Navigation 
	              durch das Modell markiert haben. Diese Menüoption bringt Sie 
	              zu dem zuvor markierten Modellelement. Gibt es keine zuvor 
	              markierten Modellelemente, dann ist diese Menüoption 
	              deaktiviert. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/navigate_forward.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Nächstes Element</literal>. ArgoUML merkt sich einen 
	              Satz von Modellelementen, den Sie während der Navigation durch 
	              das Modell markiert haben. Diese Menüoption bringt Sie zum 
	              nächsten markierten Modellelement (nachdem Sie die Menüoption 
	              Zurück verwendet haben). Gibt es keine nächsten Modellelemente, 
	              dann ist diese Menüoption deaktiviert. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Umkehren</literal>.
              	Diese Menüoption kehrt die aktuelle Markierung im <literal>
              	aktuellen Fenster</literal> um. Genauer: Alles, was markiert ist 
              	wird demarkiert und alles was innerhalb des aktuellen Fensters 
              	nicht markiert ist wird markiert.
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

<!--
        <sect2 id="s2.ref.menu_cut">

          <title><guiicon><inlinemediaobject><imageobject>
          <imagedata align="center" fileref="images/icons/cut.gif"
           format="GIF"/></imageobject></inlinemediaobject></guiicon> 
          Cut</title>

          <indexterm><primary>Cut</primary></indexterm>
          <indexterm><primary>Shortcut 
          key</primary><secondary>Strg-X</secondary></indexterm>
          <para>Shortcut Strg-X.</para>

          <para>This takes the currently selected items, remove them 
          from the diagram, and place them on the clipboard for 
          subsequent pasting.</para>

          <warning>

            <para>In the V0.18 implementation of ArgoUML there are some 
            difficulties with clipboard based functions. This menu 
            option is best avoided.</para>

          </warning>

        </sect2>
-->
<!--
        <sect2 id="s2.ref.menu_copy">

          <title><guiicon><inlinemediaobject><imageobject>
          <imagedata align="center" fileref="images/icons/copy.gif"
           format="GIF"/></imageobject></inlinemediaobject></guiicon> 
          Copy</title>

          <indexterm><primary>Copy</primary></indexterm>
          <indexterm><primary>Shortcut 
          key</primary><secondary>Strg-C</secondary></indexterm>
          <para>Shortcut Strg-C.</para>

          <para>This takes the currently selected items and make a copy 
          of them on the clipboard for subsequent pasting.</para>

          <warning>

            <para>In the V0.18 implementation of ArgoUML there are some 
            difficulties with clipboard based functions. This menu 
            option is best avoided.</para>

          </warning>

        </sect2>
-->
<!--
        <sect2 id="s2.ref.menu_paste">

          <title><guiicon><inlinemediaobject><imageobject>
          <imagedata align="center" fileref="images/icons/paste.gif"
           format="GIF"/></imageobject></inlinemediaobject></guiicon> 
          Paste</title>

          <indexterm><primary>Paste</primary></indexterm>
          <indexterm><primary>Shortcut 
          key</primary><secondary>Strg-V</secondary></indexterm>
          <para>Shortcut Strg-V.</para>

          <para>This pastes the item(s) last cut or copied to the 
          clipboard on to the current diagram in the drawing 
          pane.</para>

          <warning>

            <para>In the V0.18 implementation of ArgoUML there are some 
            difficulties with clipboard based functions. This menu 
            option is best avoided.</para>

          </warning>

        </sect2>
-->

        <sect2 id="s2.menu_edit_remove_from_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/remove_from_diagram.gif"
          					format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Aus Diagramm entfernen
          </title>

          <indexterm><primary>Aus Diagramm entfernen</primary></indexterm>
          <indexterm><primary>Tastenkürzel 
          </primary><secondary>Entf</secondary></indexterm>
          <para>Tastenkürzel Entf.</para>

          <para>
          	Dies entfernt die aktuell markierten Elemente aus dem Diagramm, aber 
          	nicht aus dem Modell.
          </para>

          <para>
          	Das Modellelement kann durch einen Taste&nbsp;2-Klick auf das 
          	Modellelement im Explorer, oder durch ziehen des markierten 
          	Elementes in das Diagramm  wieder in das Diagramm eingefügt werden.
          </para>

        </sect2>

        <sect2>

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/delete_from_model.gif"
          					format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Aus Modell entfernen
          </title>

          <indexterm><primary>Aus Modell entfernen</primary></indexterm>
          <indexterm><primary>Tastenkürzel 
          </primary><secondary>Strg-Entf</secondary></indexterm>
          <para>Tastenkürzel Strg-Entf.</para>

          <para>
          	Diese Funktion löscht die markierten Elemente vollständig aus dem 
          	Modell.
          </para>

          <para>
          	Wenn das zu löschende Element nicht nur im aktuellen Diagramm 
          	sondern auch in einem anderen Diagramm vorhanden ist, erscheint der 
          	Dialog x.
          </para>

          <figure id="fig.ref.menu_remove_from_model">

            <title>
            	Der Bestätigungsdialog zu <literal>Aus Modell 
            	entfernen</literal>.
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/confirm_remove.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

        </sect2>

		<sect2>
		
		<title>
			<guiicon>
				<inlinemediaobject>
					<imageobject>
						<imagedata align="center"
							fileref="images/icons/nav_config.gif" format="GIF" />
					</imageobject>
				</inlinemediaobject>
			</guiicon>
			Perspektiven konfigurieren...
		</title>
		
		<para>
			Diese Menüoption ruft den gleichen Dialog auf, wie die Schaltfläche 
			oben im Explorer. Die vollständige Beschreibung entnehmen Sie bitte  
			<xref linkend="s1.ref.configure_perspectives"/>.
        </para>
		
		</sect2>

        <sect2 id="s2.ref.menu_settings">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/settings.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Einstellungen...
          </title>

          <para>
          	Diese Menüoption öffnet einen Dialog, der es dem Benutzer erlaubt, 
          	verschiedene Optionen, die das Verhalten von ArgoUML bestimmen 
          	einzustellen (siehe <xref linkend="fig.ref.menu_settings"/>).
		  </para>
          <para>
          	Diese Einstellungen werden persistent für die Nutzung durch 
          	nachfolgende ArgoUML-Sitzungen gespeichert.
          </para>
          
          <para>
          	ArgoUML hat verschiedene benutzerspezifische Konfigurationen, die in 
          	diesem Dialog oder direkt in den verschiedenen Fenstern eingestellt 
          	werden können. Auch die Lage und Größe des Hauptfensters ist eine 
          	solche Einstellung. Die Aktivierung dieser Menüoption veranlasst, 
          	dass die Informationen in der Datei 
          	<literal>argo.user.properties</literal> gespeichert werden.
          	Der Speicherort dieser Datei ist das &quot;Benutzer-Homeverzeichnis
          	&quot;, welches als <literal>${user.home}</literal> definiert ist 
          	und wie in <xref linkend="s3.ref.menu.environment" /> beschrieben, 
          	bestimmt werden kann.
          </para>

          <tip>
            <para>
            	Dies ist eine Textdatei, die Sie zum Konfigurieren von ArgoUML 
            	bearbeiten können.
            </para>
          </tip>
          
          <figure id="fig.ref.menu_settings">

            <title>Der Dialog <literal>Einstellungen - 
            Voreinstellungen</literal>.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_settings.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Die Optionen können in verschiedenen Registern eingestellt werden, 
          	die in den folgenden Abschnitten beschrieben werden. Für jedes 
          	Register gibt es drei Schaltflächen im unteren Bereich des Dialoges.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>OK</literal>.
              	Die Aktivierung dieser Schaltfläche (Taste&nbsp;1-Klick) 
              	übernimmt die gewählten Einstellungen und beendet den Dialog. 
              </para>

            </listitem>

            <listitem>

              <para>
				<literal>Abbrechen</literal>.
				Die Auswahl dieser Schaltfläche (Taste&nbsp;1-Klick) beendet 
				den Dialog ohne irgendeine, seit dem letzten <literal>Übernehmen
				</literal> geänderte Einstellung anzuwenden (oder seit dem der 
				Dialog gestartet wurde, wenn <literal>Übernehmen</literal> noch 
				nicht verwendet wurde).
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Übernehmen</literal>.
              	Die Auswahl dieser Schaltfläche (Taste&nbsp;1-Klick) übernimmt 
              	die gewählten Einstellungen und verbleibt im Dialog.
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Das Schliessen des Dialoges (mit der Schliessen-Schaltfläche in der 
          	oberen Ecke des Fensterrandes) hat den gleichen Effekt, wie 
          	<literal>Abbrechen</literal>.
          </para>

          <sect3>

            <title>Register Voreinstellungen</title>

            <para>
            	Die Auswahl des Registers <literal>Voreinstellungen</literal> 
            	(Taste&nbsp;1-Klick auf das Register) enthält die folgenden 
            	Optionen als Markierfelder.
            </para>

            <itemizedlist>

              <listitem>

                <para>
                	<literal>Start-Fenster anzeigen</literal>
                	(standardmäßig markiert). Wenn markiert, wird ArgoUML ein 
                	kleines Fenster mit einem Bild während des Startvorganges 
                	anzeigen. 
                </para>

                <tip>

                  <para>
                  	Das Start-Fenster kann auch im Hilfe-Menü angesehen werden 
                  	(siehe <xref linkend="s2.ref.menu_help_about"/>).
                  </para>

                </tip>

              </listitem>

              <listitem>

                <para>
                	<literal>Gemeinsame Klassen im Voraus laden</literal>
                	(standardmäßig markiert). Wenn markiert, erstellt ArgoUML 
                	von einer Anzahl von Klassen während des Startens 
                	Klassenobjekte, so dass deren Instanziierung schneller 
                	verläuft, wenn sie benötigt werden. 
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>
                		Beim Starten: Letztes Projekt laden
                	</literal>
                	(standardmäßig leer). Prüfen Sie diesen Eintrag, wenn Sie 
                	immer im gleichen Projekt arbeiten und wollen, dass dieses 
                	automatisch geladen wird, wenn Sie ArgoUML starten. 
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>
                		Entferne (Nicht-Standard)-Diagramme während des Importes
                	</literal>
                	(standardmäßig leer). Das Markieren dieses Elementes weist 
                	ArgoUML an, die "Diagrammelemente" während des importieren 
                	der XMI-Dateien zu ignorieren. 
                </para> 
                
                <para>
                	Sie müssen diese Einstellung nur verwenden, wenn ArgoUML 
                	einen Fehler während des importierens Ihrer XMI-Datei 
                	ausgibt, die besagt, das unbekannte Elemente mit der 
                	Bezeichnung "Diagramm" aufgetreten sind. Einige Versioen von 
                	Poseidon sind bekannt dafür, dass sie diesen Dateityp 
                	standardmäßig erstellen, obwohl es gewöhnlich eine 
                	Exportoption gibt, die Erstellung von Standard-XMI-Dateien 
                	zu erzwingen.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>UML-Profildatei</literal>
                	( /org/argouml/model/mdr/mof/default-uml14.xmi per
                	Standard).
                </para>
                <para>
                	Dies ist ein Read-Only-Feld, welches das aktuell von ArgoUML 
                	verwendete Profil anzeigt. Wenn Sie zum Start ein anderes 
                	Profil spezifizieren oder ein Plugin mit einem anderen Profil 
                	installieren, dann wird es hier angezeigt.
                </para>
                
                <para>
                	In der Zukunft wird dies ein beschreibbares Feld, dass es 
                	Ihnen erlaubt, unterschiedliche Profile auszuwählen, die 
                	mit der jeweiligen Modellierungsumgebung (Java, C++, 
                	AndroMDA, usw.) übereinstimmen.
                </para>

              </listitem>
            </itemizedlist>

          </sect3>

          <sect3 id="s3.ref.menu.environment">

            <title>Register Umgebung</title>

            <para>
            	Das Auswählen des Registers <literal>Umgebung</literal> 
            	(Taste&nbsp;1-Klick auf das Register) listet verschiedene 
            	Umgebungselemente auf. Beachten Sie, dass keiner der Pfade 
            	geändert werden kann &mdash; diese sind nur Gegenstand einer 
            	Aufzeichnung.
            </para>

            <figure>

              <title>
              	Der Dialog <literal>Einstellungen - Umgebung</literal>.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/reference/menu_settings_environment.png"
              				format="PNG" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <itemizedlist>

              <listitem>

                <para>
					<literal>Standard-Grafikformat</literal>. Hier können Sie 
					das gleiche Grafikformat auswählen, wie im Menü 
					<xref linkend="s2.ref.menu_export_graphics"/>.
					Das ausgewählte Format wird standardmäßig in den 
					Menüoptionen &quot;Grafik exportieren...&quot; und 
					&quot;Alle Grafiken exportieren...&quot; verwendet.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>Auflösung Grafikexport</literal>. Dies erlaubt es 
                	Ihnen, die Auflösung der erzeugten Grafiken künstlich zu 
                	erhöhen. Die vorgegebene Einstellung ist "Standard". Um in 
                	der Lage zu sein "Hoch" oder "Extra hoch" einzustellen, 
                	müssen Sie gewöhnlich die virtuelle Maschine von Java mit 
                	zusätzlich reserviertem Speicher starten.
                </para>

              </listitem>
              <listitem>

                <para>
					<literal>${argo.ext.dir}</literal>. 
					Das Verzeichnis, welches die ArgoUML-Erweiterungen 
					beinhaltet; standardmäßig ist dies das Unterverzeichnis 
					<literal>ext</literal> im Build-Verzeichnis von ArgoUML.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>${java.home}</literal>. Das Home-Verzeichnis der 
                	Java Laufzeitumgebung (Java Runtime Environment = JRE).
                </para>

              </listitem>

              <listitem>

                <para>
					<literal>${user.home}</literal>.
					Das Homeverzeichnis des Benutzers. Wird zum Speichern der 
					Datei <literal>argo.user.properties</literal> verwendet.
				</para>

              </listitem>

              <listitem>

                <para>
                	<literal>${user.dir}</literal>. Das Verzeichnis, von dem aus 
                	ArgoUML gestartet wurde.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>Startverzeichnis</literal>. Das Verzeichnis, in 
                	dem ArgoUML seine Dateisuche startet usw.
                </para>

              </listitem>

            </itemizedlist>

          </sect3>

          <sect3>

            <title>Register Benutzer</title>

            <para>
            	Dieses Register erlaubt es dem Benutzer zusätzliche Informationen 
            	zu erfassen, die im System genutzt werden. Es werden zwei 
            	Textfelder angeboten.
            </para>

            <figure>

              <title>
				Der Dialog für <literal>Einstellungen - Benutzer</literal>.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/reference/menu_settings_user.png"
              				format="PNG" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <itemizedlist>

              <listitem>

                <para>
                	<literal>Vollständiger Name</literal>. Erlaubt es dem 
                	Benutzer seinen vollständigen Namen einzugeben.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>Email-Adresse</literal>. Erlaubt es dem Benutzer, 
                	seine EMail-Adresse einzugeben.
                </para>

              </listitem>

            </itemizedlist>

            <para>
            	Diese Informationen werden benötigt, wenn Sie Hilfe per 
            	EMail anfordern.
            </para>

          </sect3>

          <sect3 id="s3.ref.menu_settings_appearance">

            <title>Register Erscheinungsbild</title>

            <para>
            	Dieses Register erlaubt es dem Benutzer, das Aussehen (Look and 
            	Feel) und das Thema einzustellen. Z.B. wie die gesamte 
            	Anwenderschnittstelle von ArgoUML aussehen soll. Es bietet die 
            	folgenden Einstellungen an.
            </para>

            <figure>

              <title>
              	Der Dialog für<literal>Einstellungen - Erscheinungsbild</literal>.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/reference/menu_settings_appearance.png"
              				format="PNG" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <itemizedlist>

              <listitem>

                <para>
                	<literal>Aussehen</literal>.
                	Die hier gemachte Auswahl beeinflusst die gesamte 
                	Anwenderschnittstelle. Die Änderung wird nur wirksam, wenn 
                	ArgoUML beendet und neu gestartet wird.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>Metall-Thema</literal>.
                	Dieses Element ist deaktivert, wenn das Aussehen Metall 
                	nicht ausgwählt wurde. Die Auswahl hier beeinflusst die 
                	gesamte Anwenderschnittstelle. Die Änderung wird nur 
                	wirksam, wenn ArgoUML beendet und neu gestartet wird. 
                </para>

              </listitem>

              <listitem>

                <para>
	                <literal>
	                	Ränder von Diagrammlinien und Text glätten.
	                </literal>
	                Diese Funktion ist in bestimmten Plattformen als 
	                <quote>Anti-aliasing</quote> bekannt. Sie bewirkt, dass 
	                diagonale Linien durch die Nutzung von verschiedenen 
	                Grauschattierungen nicht so stark gezackt aussehen.  Diese 
	                Funktion arbeitet nur, wenn es das Betriebssystem  
	                unterstützt.
	            </para>

              </listitem>

            </itemizedlist>

          </sect3>

          <sect3 id="s3.ref.menu_settings_profiles">

            <title>Das Register Profile</title>

            <para>
            	In diesen Register kann der Anwender die Einstellungen der 
            	ArgoUML-Anwendung bezüglich der Profile ändern.
	    	</para>

            <figure float="1">

              <title>Der Dialog <literal>Einstellungen - 
              Profile</literal>.</title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
               				fileref="images/reference/menu_settings_profiles.png"
               				format="PNG"/>
               			</imageobject>
               		</mediaobject>
               	</screenshot>
            </figure>

            <itemizedlist>

              <listitem>
              	<para>
              		<literal>Stereotyp-Darstellung</literal> &ndash; Auswahl, 
              		um Stereotypen als Text, kleine oder große Symbole darzustellen.
              	</para>
              </listitem>

              <listitem>
              	<para>
              		<literal>Standard-XMI-Verzeichnisse</literal> &ndash; erlaubt 
              		dem Anwender, die Verzeichnisse zu konfigurieren, in denen 
              		ArgoUML die benutzerdefinierten Profile finden kann.
              	</para>
              </listitem>

              <listitem>
              	<para>
              		<literal>Standard-Profiles</literal> &ndash; Auswahl, welches 
              		Profil von den verfügbaren Profilen als Standard für neue 
              		Projekte festgelegt wurde.
              	</para>
              </listitem>

            </itemizedlist>

          </sect3>

          <sect3 id="s3.ref.menu_settings_configure_shortcuts">
            <title>Das Register Tastenkombinationen konfigurieren</title>
            <para>(Noch zu beschreiben)</para>
            <figure float="1">

              <title>Der Dialog für <literal>Einstellungen - 
              Tastenkombinationen konfigurieren</literal>.</title>

              <screenshot><mediaobject><imageobject>
              <imagedata align="center"
               fileref="images/reference/menu_settings_configure_shortcuts.png"
               format="PNG"/></imageobject></mediaobject></screenshot>
            </figure>

          </sect3>
          <sect3 id="s3.ref.menu_settings_notations">

            <title>Register Notation</title>

            <para>
            	Dieses Register erlaubt es dem Nutzer, bestimmte 
            	Notationseinstellungen zu spezifizieren. Z. B. wie Dinge in 
            	Diagrammen dargestellt werden. Es bietet folgende Markierfelder 
            	an.
            </para>
            
            <para>
            	Alle Einstellungen definieren nur die Standards, die in neuen 
            	Projekten verwendet werden. Wenn Sie die Art und Weise wie 
            	Diagramme in Ihrem aktuellen Projekt aussehen sollen ändern 
            	wollen, dann siehe Menü Datei - Eigenschaften.
            </para>

            <figure>

              <title>
				Der Dialog für <literal>Einstellungen - Notationen</literal>.
			  </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/reference/menu_settings_notations.png"
              				format="PNG" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

            <itemizedlist>

              <listitem>

                <para>
	                <literal>Notationssprache</literal>
	                (standardmäßig UML 1.4). Diese Funktion erlaubt die 
	                Änderung der Standardnotation (z.B. Sprache: UML, Java, ...), 
	                die in Diagrammen neuer Projekte verwendet wird. Nehmen Sie 
	                an, dass ein Designer fordert, dass die Standardnotation 
	                des Projektes Java sein soll. Wenn er das Projekt speichert, 
	                wird die Auswahl Java innerhalb der Projektdatei gespeichert. 
	                Wenn irgendjemand anderes das Diagramm anzeigt, wird es die 
	                Java-Notation ebenfalls vorfinden. Diese Person kann die 
	                UML-Notation im Menü Datei - Notation auswählen und wird 
	                alle Diagramme in UML sehen. Siehe 
	                <xref linkend="s2.ref.menu_notation"/>.
                </para>

              </listitem>

              <listitem>
              
                <para>
                	<literal>Die Namen der Knoten fettgedruckt darstellen</literal>.
                </para>

                <para>
                	Diese Eigenschaft veranlasst, dass die Namen jedes Knotens 
                	(z.B. etwas mit einem geschlossenen Polygon gezeichnet) 
                	fettgedruckt dargestellt werden.
                </para>
                
                <para>
                	Es gibt keine Semantik, fettgedruckte Namen darzustellen, 
                	aber ihr Diagramm wird schöner aussehen.
                </para>

              </listitem>

              <listitem>

                <para>
					<literal>Französische Anführungszeichen</literal>
					(&laquo;&nbsp;&raquo;) für Stereotypen (standardmäßig leer). 
					Standardmäßig verwendet ArgoUML die Zeichenpaare 
					<emphasis>kleiner als</emphasis> und <emphasis>größer als
					</emphasis> (&lt;&lt; &gt;&gt;) für Stereotypen. Ist dieses 
					Feld markiert, werden die Stereotypen in Diagrammen zwischen  
					französische Anführungszeichen gestellt 
					(&laquo;&nbsp;&raquo;).
                </para>

                <para>
                	Diese Funktion wird in ArgoUML selten genutzt, da 
                	französische Anführungszeichen in diversen Schriften 
                	schlecht unterstützt werden und wenn sie vorhanden sind, 
                	sind sie sehr klein und schlecht sichtbar.
                </para>
                
                <para>
                	Unabhhängig von der Art und Weise in der sie dargestellt 
                	werden, können Sie immer reale französische Anführungszeichen 
                	(wenn Ihre Tastatur dies unterstützt) oder deren &lt;&lt;
                	&gt;&gt;-Äquivalente eingeben.
                </para>

              </listitem>

              <listitem>
              
                <para><literal>Zeige Assoziationsnamen</literal>.</para>

                <para>
                	Diese Eigenschaft veranlasst, dass die Namen jeder 
                	Assoziation versteckt werden, sofern sie nicht markiert 
                	wurden.
                </para>

              </listitem>

              <listitem>

                <para>
	                <literal>Sichtbarkeit anzeigen</literal>
	                (standardmäßig leer). Ist dies markiert, dann wird ArgoUML 
	                die Sichtbarkeitsmarkierungen vor z.B. jedem Attribut in 
	                den Diagrammen anzeigen. In UML steht die Notation "+" für 
	                public, "-" für private, "#" für protected und "~" für 
	                Paket. Es könnte für ein Attribut z.B. wie folgt aussehen: 
	                <literal>+neuesAttr : int</literal>.
                </para>

              </listitem>

              <listitem>

                <para>
	                <literal>Kardinalitäten anzeigen</literal>
	                (standardmäßig leer). Wenn dies markiert ist, dann wird 
	                ArgoUML die Kardinalität z.B. jeden Attributes im Diagramm 
	                darstellen. In der UML-Notation wird die Kardinalität 
	                zwischen [] gestellt: 
	                <literal>+neuesAttr [0..*] : int</literal>.
	                Diese Einstellung hat keine Auswirkung auf die Darstellung 
	                der Kardinalität von Assoziationsenden.
                </para>

              </listitem>

              <listitem>

                <para>
	                <literal>Anfangswerte anzeigen</literal>
	                (standardmäßig leer). Wenn dies markiert ist, dann wird 
	                ArgoUML den Anfangswert z.B. eines Attributes im Diagramm 
	                darstellen. In der UML-Notation wird der Anfangswert wie 
	                folgt dargestellt: 
	                <literal>+neuesAttr : int = 1</literal>.
              </para>

              </listitem>

              <listitem>

                <para>
	                <literal>Eigenschaften anzeigen</literal>
	                (standardmäßig leer). Wenn dies markiert ist, dann wird 
	                ArgoUML die verschiedenen Eigenschaften zwischen geschweifte 
	                Klammern {} darstellen. Für ein Attribut z.B. könnte dies 
	                wie folgt aussehen: 
	                <literal>+neuesAttr : int { eingefroren }</literal>.
                </para>

              </listitem>

              <listitem>

                <para>
	                <literal>Typen und Parameter anzeigen</literal>
	                (standardmäßig markiert). Wenn das Feld nicht markiert ist, 
	                werden die Attribute in Klassen ohne Typ und Operationen 
	                ohne Parameter dargestellt. Diese Funktion kann während der 
	                Analysephase Ihres Projektes nützlich sein. Sind alle Felder 
	                im Register Notation nicht markiert, dann könnte ArgoUML ein 
	                Attribut wie folgt anzeigen: 
	                <literal>neuesAttr</literal>. Und für eine Operation: 
	                <literal>neueOperation()</literal>.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>Stereotypen im Explorer anzeigen</literal>
                	(standardmäßig leer). Wenn dies markiert ist, dann wird 
                	ArgoUML die Stereotypen in der Nähe der Symbole der 
                	Modellelemente im Explorer anzeigen. Z.B. in der 
                	Baumstruktur auf der linken Seite.
                </para>

              </listitem>

              <listitem>
                <para><literal>Zeige "1"-Kardinalitäten</literal>.</para>

                <para>
                	Diese Eigenschaft erlaubt es dem Anwender auszuwählen, ob er 
                	alle Kardinalitäten, die "1" sind darstellen will oder 
                	nicht...
                </para>
                
                <para>
                	Manche Menschen betrachten eine nicht dargestellte 
                	Kardinalität als "undefiniert", so dass es der 
                	einzige Weg ist, zwischen einer Kardinalität von 1 und einer 
                	undefinierten Kardinalität zu unterscheiden, indem man 
                	dieses Markierfeld markiert.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>Verstecke Pfeilspitzen bei bi-direktionalen 
                	Assoziationen.</literal>.
                </para>

                <para>
                	Der UML-Standard definiert unterschiedliche Arten, die 
                	Navigierbarkeit von Assoziationen in Diagrammen darzustellen.
                	Darstellungsoption 1 ist es, alle Pfeile anzuzeigen (z.B. 
                	sie können nur in eine bestimmte Richtung navigieren, wenn 
                	ein Pfeil dargestellt wird). Darstellungsoption 2 ist, keine 
                	Pfeile anzuzeigen und Darstellungsoption 3 ist, nur dann 
                	einen Pfeil anzuzeigen, wenn die Assoziation gerichtet (
                	unidirektional) ist.
                </para>
                
                <para>
                	Vor der Version 0.26, konnte ArgoUML nur die 
                	Darstellungsoption 3 verwenden. Aktuell kann der Anwender 
                	zwischen der Option 1 und 3 auswählen. Die Option 2 wird 
                	nicht unterstützt. 
                </para>

                <para>
                	In der Vergangenheit wurde die Option 3 sehr häufig in anderen 
                	UML-Werkzeugen verwendet, aber neuerdings wird die Option 1 
                	häufiger eingesetzt.
                </para>

              </listitem>

              <listitem>

                <para>
                	<literal>Standard-Schattenbreite</literal>
                	(standardmäßig auf 1 eingestellt). ArgoUML ist in der Lage, 
                	alle Elemente in einem Diagramm mit einem Schatten zu 
                	versehen. Verwenden Sie diese Einstellung, um die Größe des 
                	Schattens einzustellen, der beim Erzeugen des Modellelementes 
                	verwendet wird. Das Register "Darstellung" im Detailfenster 
                	erlaubt das Einstellen des Schattens je Modellelement, 
                	nachdem diese erzeugt wurden.
                </para>

              </listitem>

            </itemizedlist>

          </sect3>


          <sect3 id="s3.ref.menu_settings_diagram_appearance">
            <title>Das Register Diagramm-Darstellung</title>
            <para>(Noch zu beschreiben)</para>
            <figure float="1">

              <title>Der Dialog für <literal>Einstellungen - 
              Diagramm-Darstellung</literal>.</title>

              <screenshot><mediaobject><imageobject>
              <imagedata align="center"
               fileref="images/reference/menu_settings_diagram_appearance.png"
               format="PNG"/></imageobject></mediaobject></screenshot>
            </figure>

          </sect3>
          
          <sect3 id="s3.ref.menu_settings_modules">

            <title>Das Register Module</title>

            <para>
            	Dieses Register zeigt eine Liste der installierten Module an, 
            	die aktiviert oder deaktiviert werden können. Seitdem dies ein 
            	neues Konzept in ArgoUML ist, enthält es derzeit eine Liste 
            	von Modulen, die nicht entfernt werden können und eine 
            	Schaltfläche, um das Konzept zu testen. Das Drücken dieser 
            	Schaltfläche fügt dem Menü Werkzeuge eine nutzlose Menüoption 
            	hinzu.
            </para>

            <para>
            	Beachten Sie auch, dass es sich um ein Konzept für &quot;neue
            	&quot; Module handelt, so dass alte einbindbare Module nicht 
            	auf diese Weise arbeiten und daher nicht aufgelistet sind. 
            </para>

          </sect3>

          <sect3 id="s3.ref.menu_settings_plugins">

            <title>Durch Plugins zusätzlich hinzugefügte Register</title>

            <para>
            	Ein Plugin-Modul hat die Möglichkeit zusätzliche Register 
            	hinzufügen zu können. Ein Beispiel ist C++, welches folgendes 
            	Register hinzufügt.
            </para>

            <figure>

              <title>
              	Der Dialog für <literal>Einstellungen - C++</literal>.
              </title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/reference/menu_settings_cpp.png"
              				format="PNG" />
              		</imageobject>
              	</mediaobject>
              </screenshot>
            </figure>

          </sect3>

        </sect2>

      </sect1>

      <sect1>

        <title>Das Menü Ansicht</title>

        <para>
        	Dieses Menü wird für Aktionen verwendet, die Auswirkungen darauf 
        	haben, wie die verschiedenen Fenster dargestellt werden.
        </para>

        <sect2>

          <title>Gehezu Diagramm...</title>

          <para>
          	Dieses Menü öffnet einen Dialog, der alle im aktuellen Projekt 
          	befindlichen Diagramme aufführt.
          </para>

          <figure id="fig.ref.menu_goto_diagram">

            <title>
            	Der Dialog für <literal>Gehe zu Diagramm...</literal>.
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_goto_diagram.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Der Dialog enthält eine Tabelle aus drei Spalten und einer Zeile 
          	für jedes Diagramm im aktuellen Projekt. Ein Schieberegler erlaubt 
          	den Zugriff auf die gesamte Tabelle, wenn diese für das Fenster zu 
          	gross ist. Ein Doppelklick mit der Taste&nbsp;1 auf eine beliebige 
          	Zeile wird das Diagramm im Editierfenster markieren. Die drei 
          	Spalten sehen wie nachfolgend beschrieben aus:
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Typ</literal>. Auflistung des Diagrammtyps.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Name</literal>. Auflistung der für die Diagramme 
              	vergebenen Namen.
              </para>

            </listitem>

            <listitem>

              <para>
	              <literal>Beschreibung</literal>. Stellt dar, wieviele Knoten und 
	              Kanten sich im Diagramm befinden. Ein Knoten ist ein <quote>2-D
	              </quote>-Modellelement und eine Kante ist eine Verküpfung zu 
	              einem Modellelement. 
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Wenn der Dialog nicht modal ist, kann der Dialog während des 
          	Editierens des Modelles zur leichteren Navigation geöffnet bleiben.
          </para>

          <warning>

            <para>
            	Die Version 0.26 von ArgoUML aktualisiert den Dialog nicht 
            	sofort, wenn Änderungen in den Diagrammen vorgenommen 
            	werden: Änderung des Namens, hinzufügen von Diagrammen, löschen 
            	von Diagrammen.<!-- This is issue 2475. -->
            </para>

          </warning>

        </sect2>

        <sect2 id="s2.ref.menu_find">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/find.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Suchen...
          </title>

          <para>
          	Diese Menü öffnet einen nicht-modalen Dialog mit der ArgoUML-
          	Suchmaschine.
          </para>

          <figure id="fig.ref.menu_find">

            <title>Der Dialog für <literal>Suchen...</literal>.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_find.png" format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <!--  <para>
          	Oben im Dialog befinden sich die vier Register <literal>Name und 
          	Ort</literal>, <literal>Zuletzt geändert</literal>, <literal>
          	Gekennzeichnete Werte</literal> und <literal>Randbedingungen
          	</literal>. Bis auf das erste sind alle in V0.22 von ArgoUML 
          	deaktiviert (weil sie noch nicht implementiert sind), so dass das  
	        erste Register immer markiert ist.
          </para> -->
	        <!-- This is issue 2501 -->

          <para>
          	Das Register <literal>Name und Ort</literal> definiert die 
          	durchzuführende Suche. Es enthält folgendes: 
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	Ein Textfeld mit der Bezeichnung <literal>Elementname:</literal>, 
              	in dem der Name des zu suchenden Modellelementes spezifiziert 
              	wird. Die Ersetzungszeichen (<literal>*</literal> und <literal>?
              	</literal> können hier verwendet werden. Ein Pull-down-Menü 
              	gewährt den Zugriff auf vorher verwendete Ausdrücke.
              </para>

            </listitem>

            <listitem>

              <para>
              	Ein Textfeld mit der Bezeichnung <literal>Im Diagramm:</literal> 
              	spezifiziert, welche Diagramme durchsucht werden sollen. Erneut 
              	können Ersetzungszeichen verwendet werden. Beide Textfelder 
              	haben den Standardeintrag <literal>*</literal>. Z.B. Alles 
              	suchen.
              </para>

            </listitem>

            <listitem>

              <para>
              	Rechts von den beiden Textfeldern erlaubt ein Auswahlelement 
              	mit der Bezeichnung <literal>Elementtyp: </literal> die 
              	Spezifikation der zu suchenden UML-Metaklasse.
              </para>

            </listitem>

            <listitem>

              <para>
              	Die Auswahl <literal>Suche in:</literal> erlaubt die Suche über 
              	das gesamte Projekt (Standard) oder eine Teilsuche über die 
              	Ergebnisse der vorhergehenden Suche. Wenn sie geöffnet ist, 
              	erscheint eine Liste mit Registern, welche die Suchergebnisse 
              	enthalten.
              </para>

            </listitem>

            <listitem>

              <para>
              	Unterhalb dieser Felder befindet sich die Schaltfläche <literal>
              	Lösche Register</literal>. Diese löscht die Darstellung der 
              	Register aus den vorangegangenen Suchläufen (siehe unten). Diese 
              	Schaltfläche ist deaktiviert, wenn keine Register, ausser dem 
              	Register Hilfe, vorhanden sind.
              </para>

            </listitem>

            <listitem>

              <para>
              	Und abschliessend gibt es die Schaltfläche <literal>Suchen
              	</literal>. Diese löst die Suche anhand der in den Text- und 
              	Auswahlfeldern spezifizierten Suchkriterien aus. Die Ergebnisse 
              	werden in einem Register angezeigt, welche die unteren beiden 
              	Drittel der Seite einnehmen.
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Die beiden unteren Drittel des Dialoges beinhalten ein grundlegendes 
          	Register (mit <literal>Hilfe</literal> bezeichnet), das eine 
          	zusammenfassende Hilfestellung bereitstellt und weitere Register, 
          	welche die Ergebnisse der Suchläufe anzeigen. Diese Bezeichnungen 
          	der Suchregister werden aus dem gesuchten <emphasis>Element</emphasis> 
          	<literal>im</literal><emphasis>Diagramm</emphasis> zusammengesetzt 
          	und sind horizontal in zwei Hälften unterteilt.
          </para>

          <para>
          	Der Taste&nbsp;1-Doppelklick auf dieses Register entfernt dieses und 
          	öffnet ein neues Fenster, welches den Registerinhalt enthält. Z. B. 
          	die Suchergebnisse. Diese Fenster kann beliebig verschoben und in 
          	seiner Größe verändert werden. Beim Register Hilfe funktioniert dies 
          	nicht.
          </para>

          <para>
          	Die obere Hälfte ist mit <literal>Ergebnis: </literal> und der 
          	Anzahl der gefundenen Elemente bezeichnet. Es zeigt eine Tabelle 
          	mit einer Zeile mit vier Spalten für jedes Modellelement. Die 
          	Breite der Spalten kann eingestellt werden.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Typ</literal>. Enthält den Typ des Modellelementes.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Name</literal>. Enthält den Namen des Modellelementes.
              </para>

            </listitem>

            <listitem>

              <para>
				<literal>Im Diagramm</literal>. Wo Modellelemente in einem 
				Diagramm sichtbar sind, werden hier die Namen der Diagramme 
				aufgelistet. Im anderen Fall wird <literal>N/A</literal> 
				angezeigt.
			  </para>

            </listitem>

            <listitem>

              <para>
				<literal>Beschreibung</literal>. Enthält die Beschreibung des 
				Modellelementes. 
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Der Taste&nbsp;1-Klick auf eine Zeile wird mehr Informationen über 
          	das Modellelement preisgeben, indem es die zugehörigen Modellelemente 
          	in der unteren Hälfte (siehe unten) darstellt. Der Doppelklick auf 
          	eine Zeile beschreibt ein Modellelement im Diagramm und das Element 
          	und das Diagramm werden markiert.
          </para>

          <para>
          	Die untere Hälfte des Registers ist eine Tabelle mit der Bezeichnung 
			<literal>Zugehörige Elemente:</literal> mit den gleichen Spalten 
			wie in der oberen Hälfte. Wenn ein Modellelement in der oberen 
			Hälfte markiert wurde, zeigt diese Tabelle die Details eines jeden 
			zugehörigen Elementes. 
          </para>

          <tip>

            <para>
            	Wenn Sie den Dialog vertikal vergrössern, zeigt es sich, dass 
            	der Teil &quot;Zugehörige Elemente&quot; ebenfalls seine Größe 
            	ändert, aber nicht der Teil mit den Suchergebnissen. Zwischen 
            	diesen Teilen befindet sich jedoch eine Trennlinie. Wenn Sie die 
            	Maus darüber bewegen, verwandelt sich der Mauszeiger in das 
            	Grössenveränderungs-Symbol und die Begrenzung zwischen diesen 
            	beiden Bereichen kann nach oben oder nach unten bewegt werden, 
            	um den Platz im Fenster aufzuteilen.
            </para>

          </tip>

          <warning>

            <para>
            	Dieser Dialog ist nicht modal, was es erlaubt, dass er während 
            	des editierens des Modelles geöffnet bleiben kann. Aber die 
            	Implementierung der Version 0.26 von ArgoUML aktualisiert diesen 
            	Dialog nicht sofort, wenn Änderungen an den gefundenen 
            	Modellelementen vorgenommen werden: Änderungen des Namens des 
            	Modellelementes, Änderung des Diagrammnamens. Das Löschen eines 
            	Diagrammes stoppt nicht die Möglichkeit danach zu suchen.
            	<!-- This is issue 4376. -->
            </para>

          </warning>

        </sect2>

        <sect2 id="s2.ref.menu_zoom">

          <title>Zoom</title>

          <para>
          	Diese Menüoption öffnet ein Untermenü, welches das Skalieren aller 
          	Diagramme um einen Faktor erlaubt. Diese Einstellung  wird nicht 
          	persistent gespeichert.
          </para>

          <para>Im Untermenü kann folgendes ausgewählt werden:</para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Verkleinern</literal>. Tastenkürzel (Strg-Minus). 
              	Verbessert den Überblick über die Zeichnung.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Rückgängig</literal>.
              	Kehrt zur Standard-Zoomrate zurück (z.B. 100%). 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Vergrössern</literal>. Tastenkürzel (Strg-Plus).
              	Vergrössert die Elemente in den Zeichnungen. 
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2 id="s2.ref.menu_adjust_grid">

          <title>Gitter einstellen</title>

          <para>
          	Dieses Menü erlaubt folgende Auswahl der 
          	Bildschirm-Gitterdarstellung:
          </para>

          <itemizedlist>

            <listitem>

              <para>
	              <literal>Zeilen 16</literal>:
	              vollständiges Gitter, mit einem Zwischenraum von 16 Pixeln. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <literal>Zeilen 8</literal>:
	              vollständiges Gitter, mit einem Zwischenraum von 8 Pixeln.
              </para>

            </listitem>

            <listitem>

              <para>
	              <literal>Punkte 16</literal>:
	              Punkte, mit einem Zwischenraum von 16 Pixeln (der Standard).
              </para>

            </listitem>

            <listitem>

              <para>
	              <literal>Punkte 32</literal>:
	              Punkte, mit einem Zwischenraum von 32 Pixeln.
              </para>

            </listitem>

            <listitem>

              <para>
	              <literal>Kein Gitter</literal>:
	              Kein irgendwie geartetes Gitter.
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2 id="s2.ref.menu_grid_snap">

          <title>Einrasten einrichten</title>

          <para>
          	Dieses Menü erlaubt die Auswahl zwischen folgenden 
          	Gitter-Einrast-Schwellwerten:
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Einrasten 4</literal>: 
              	Rastet innerhalb eines Bereiches von 4 Pixeln ein.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Einrasten 8</literal>: 
              	Rastet innerhalb eines Bereiches von 8 Pixeln ein.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Einrasten 16</literal>: 
              	Rastet innerhalb eines Bereiches von 16 Pixeln ein.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Einrasten 32</literal>: 
              	Rastet innerhalb eines Bereiches von 32 Pixeln ein.
              </para>

            </listitem>

          </itemizedlist>

          <note>

            <para>
            	Es gibt keine Option das Einrasten auf das Gitter abzustellen.
            </para>

          </note>

          <note>

            <para>
            	Wenn Sie existierende Elemente auf geänderte Einrastbereiche  
            	ausrichten wollen, können Sie das Menü <literal>Anordnen &gt; 
            	Am Gitter ausrichten</literal> verwenden (siehe  
            	<xref linkend="s2.ref.menu_align"/>).
            </para>

          </note>

        </sect2>

        <sect2>

          <title>Seitenumbrüche</title>

          <para>
          	Mit dieser Menüoption werden die Seitenumbrüche im Diagramm 
          	dargestellt oder nicht (durch weiss gepunktete Linien).
          </para>

          <warning>
            <para>Diese Menüoption funktioniert in ArgoUML V0.24 nicht.</para>
            <!-- This menu-item is incorrectly implemented in the 
            V0.22 version of ArgoUML, since it should be a tick box 
            toggle.  This is issue  604.
            Also, the lines are reported to be incorrect 
            regarding the chosen paper format and orientation.
            This is issue 1874. 
            And the lines are reported not visible at all in ArgoUML V0.24.
            This is mentioned in issue 604 and in issue 1874. 
            -->
          </warning>

        </sect2>

        
        <sect2>
          <title>Symbolleisten</title>
          
          <para>
          	Dieses Menü erlaubt es dem Anwender beliebige Symbolleisten zu 
          	verbergen oder anzuzeigen. Standardmäßig werden alle angezeigt.
          </para>
          
        </sect2>
        
        <sect2>

        	<title>XML-Quelltext</title>

        	<para>
        		Aktiviert ein Fenster, das den gesamten Inhalt des aktuellen 
        		Projektes im XML-Format darstellt.
        	</para>

        	<para>
        		Obwohl sehr nützlich zum Debuggen von ArgoUML, ist diese 
        		Menüoption für den normalen Benutzer wenig interessant.
        	</para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.create.diagram.menu">

        <title>Das Menü "Neues Diagramm"</title>

        <para>
        	Dieses Menü ist dafür gedacht, die verschiedenen, von ArgoUML 
        	unterstützten Typen von UML-Diagrammen zu erzeugen.
        </para>

        <sect2 id="s2.ref.create.diagram.use_case_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/use_case_diagram.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neues Anwendungsfalldiagramm
          </title>

          <para>
          	Dieser Menüeintrag erstellt ein leeres Anwendungsfalldiagramm und 
          	markiert das Diagramm im Editierfenster. Ist ein Paket aktuell
          	markiert, dann wird das Anwendungsfalldiagramm innerhalb dieses 
          	Paketes erstellt. Das bedeutet, dass es in der Explorerhierarchie 
          	(Ansicht: Nach Paketen) als Teil des Paketes dargestellt wird. 
          	Im Diagramm erstellte Modellelemente werden im Namensraum des 
          	Paketes erzeugt. Dies wirkt sich nicht nur auf das Paket aus, 
          	sondern auch auf eine Klasse, Schnittstelle, Anwendungsfall, usw..
          </para>

          <tip>

            <para>
            	Das verhindert nicht, dass Modellelemente aus anderen 
            	Namensräumen/Paketen im Diagramm erscheinen. Sie können im 
            	Explorer mit Hilfe des Popup-Menüs <literal>Zum Diagramm 
            	hinzufügen</literal> hinzugefügt werden.
            </para>

          </tip>

        </sect2>

        <sect2 id="s2.ref.create.diagram.class_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/class_diagram.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neues Klassendiagramm
          </title>

          <para>
          	Dieser Menüeintrag erstellt ein leeres Klassendiagramm und markiert 
          	das Diagramm im Editierfenster. Ist ein Paket aktuell markiert, 
          	dann wird das Klassendiagramm innerhalb dieses Paketes erstellt. 
          	Das bedeutet, dass es in der Explorerhierarchie (Ansicht: Nach 
          	Paketen) als Teil des Paketes dargestellt wird. Im Diagramm 
          	erstellte Modellelemente werden innerhalb des Namensraumes des 
          	Paketes erstellt. Dies wirkt sich nicht nur auf das Paket aus, 
          	sondern auch auf eine Klasse, Schnittstelle, Anwendungsfall, usw..
          </para>

          <tip>

            <para>
            	Das verhindert nicht, dass Modellelemente aus anderen 
            	Namensräumen/Paketen im Diagramm erscheinen. Sie können im 
            	Explorer mit Hilfe des Popup-Menüs <literal>Zum Diagramm 
            	hinzufügen</literal> hinzugefügt werden.
            </para>

          </tip>

        </sect2>

        <sect2 id="s2.ref.create.diagram.sequence_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/sequence_diagram.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neues Sequenzdiagramm
          </title>

          <para>
          	Dieser Menüeintrag erstellt ein leeres Sequenzdiagramm und markiert 
          	das Diagramm im Editierfenster. Er erzeugt auch ein UML-Element 
          	<literal>Kollaboration</literal>, das ein Container für die im 
          	neuen Diagramm dargestellten Elemente ist. Wenn eine Klasse aktuell 
          	markiert ist, wird ein Sequenzdiagramm und eine Kollaboration 
          	erstellt, die das Verhalten dieser Klasse repräsentieren. Das 
          	bedeutet, dass die erstellten Elemente in der Explorerhierarchie 
          	(Ansicht: Nach Paketen) als Teil der Klasse dargestellt werden. 
          	Im Diagramm erstellte Modellelemente werden innerhalb des 
          	Namensraumes der Kollaboration erzeugt. Ein Sequenzdiagramm muss 
          	nicht nur das Verhalten einer Klasse repräsentieren, sondern auch 
          	jeden anderen Klassifizierer, wie zum Beispiel eine Schnittstelle, 
          	einen Anwendungsfall, usw.. Es ist auch möglich, Sequenzdiagramme 
          	für eine Operation zu erstellen.
          </para>

        </sect2>

        <sect2 id="s2.ref.create.diagram.collaboration_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/collaboration_diagram.gif"
          					format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neues Kollaborationsdiagramm
          </title>

          <para>
          	Dieser Menüeintrag erstellt ein leeres Kollaborationsdiagramm und 
          	markiert das Diagramm. Es erstellt auch ein UML-Element <literal>
          	Kollaboration</literal>, das ein Container für die im neuen 
          	Diagramm dargestellten Elemente ist. Wenn ein Paket markiert ist, 
          	wenn dieser Menüeintrag aktiviert wird, wird das 
          	Kollaborationsdiagramm unterhalb einer Kollaboration innerhalb 
          	dieses Paketes erstellt. Das bedeutet, dass es in der 
          	Explorerhierarchie (Ansicht: Nach Paketen) als Teil der 
          	Kollaboration innerhalb des Paketes dargestellt wird. Im Diagramm 
          	erstellte Modellelemente werden im Namensraum der Kollaboration des 
          	Paketes erstellt.
          </para>

          <tip>

            <para>
            	Das verhindert nicht, dass Modellelemente aus anderen 
            	Namensräumen/Paketen im Diagramm erscheinen. Sie können im 
            	Explorer mit Hilfe des Popup-Menüs <literal>Zum Diagramm 
            	hinzufügen</literal> hinzugefügt werden.
            </para>

          </tip>

        </sect2>

        <sect2 id="s2.ref.create.diagram.state_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/state_diagram.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neues Zustandsübergangsdiagramm
          </title>

          <para>
          Dieser Menüeintrag erstellt ein, mit der aktuellen Klasse verknüpftes, 
          leeres Zustandsübergangsdiagramm und markiert das Diagramm im 
          Editierfenster. Er erstellt auch ein UML-Element <literal>
          Zustandsautomat</literal>, der ein Container für die im neuen Diagramm 
          dargestellten Elemente ist.
          </para>

          <para>
          	Zustandsübergangsdiagramme sind mit einem Modellelement mit 
          	dynamischem Verhalten verknüpft, wie z.B. einem Klassifizierer oder 
          	einer Verhaltenseigenschaft, welche den Kontext für den zu 
          	repräsentierenden Zustandsautomaten enthält. Passende Modellelemente 
          	sind zum Beispiel eine Klasse, eine Operation und ein Anwendungsfall. 
          	Wenn kein solches Elemente zum Zeitpunkt des aktivierens des Menüs 
          	<literal>Neues Zustandsübergangsdiagramm</literal> markiert ist, 
          	dann wird eine ungebundener Zustandsautomat erstellt. Um ein 
          	korrektes UML-Modell zu erhalten, müssen Sie den Kontext des 
          	Zustandsautomaten im Detailfenster einstellen.
          </para>

        </sect2>

        <sect2 id="s2.ref.create.diagram.activity_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/activity_diagram.gif" format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neues Aktivitätsdiagramm
          </title>

          <para>
          	Dieser Menüeintrag erstellt ein, mit der aktuell markierten Klasse 
          	verknüpftes, leeres Aktivitätsdiagramm und markiert das Diagramm 
          	im Editierfenster. Er erzeugt auch ein UML-Element <literal>
          	Aktivitätsgraph</literal>, der einen Container für die im neuen 
          	Diagramm dargestellten Elemente ist.
          </para>

          <para>
          	Aktivitätsdiagramm sind mit einem Modellelement mit dynamischem 
          	Verhalten verknüpft, wie z.B. Pakete, Klassifizierer (
          	einschliesslich Anwendungsfällen) und Verhaltenseigenschaften. 
          	Passende Modellelemente sind z.B. eine Klasse, ein Anwendungsfall, 
          	eine Operation und ein Paket. Wenn ein solches Element zum Zeitpunkt 
          	des aktivierens des Menüs <literal>Neues Aktivitätsdiagramm</literal> 
          	nicht markiert ist, wird ein ungebundener Aktivitätsgraph erstellt. 
          	Um ein korrektes UML-Modell zu erhalten, müssen Sie den Kontext des 
          	Aktivitätsgraphen im Detailfenster angeben.
          </para>

        </sect2>

        <sect2 id="s2.ref.create.diagram.deployment_diagram">

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/deployment_diagram.gif"
          					format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Neues Verteilungsdiagramm
          </title>

          <para>
          Dieser Menüeintrag erstellt ein leeres Verteilungsdiagramm und 
          markiert das Diagramm im Editierfenster.
          <!--If a package is 
          currently selected, the deployment diagram will be created 
          within that package, it will be shown within the package on 
          the explorer hierarchy (under Package-centric view) and 
          model elements created on the diagram will be created within the 
          namespace of the package.-->
          </para>

          <tip>

            <para>
            	Modellelemente aus anderen Namensräumen/Paketen können vom 
            	Explorer aus durch ziehen oder durch das Popup-Menü <literal>Zum 
            	Diagramm hinzufügen</literal> hinzugefügt werden.
            </para>

          </tip>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.menu_arrange">

        <title>Das Menü Anordnen</title>

        <para>
        	Dieses Menü enthält Funktionen, die dabei helfen, die Modellelemente 
        	in den Diagrammen des Editierfensters auszurichten. Die aufgerufenen 
        	Menüfunktionen werden hauptsächlich auf jedes Modellelement oder 
        	auf die aktuell im Editierfenster markierten Modellelemente 
        	angewendet.
        </para>

        <sect2 id="s2.ref.menu_align">

          <title>Ausrichten</title>

          <para>
          	Dieses Untermenü richtet die markierten Elemente aus. Es enthält 
          	sieben Ausrichtungsoptionen.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/align_tops.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Oben bündig</literal>. Richtet die markierten 
              Modellelemente entlang  ihren oberen Kanten aus.
            </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/align_bottoms.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Unten bündig</literal>. Richtet die markierten 
              Modellelemente entlang ihrer unteren Kanten aus. 
            </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/align_rights.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Rechtsbündig</literal> (Tastenkürzel Strg-R). Richtet die 
              markierten Modellelemente entlang ihrer rechten Kanten aus. 
            </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/align_lefts.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Linksbündig</literal> (Tastenkürzel Strg-L). Richtet die 
              markierten Modellelemente entlang ihrer linken Kanten aus. 
            </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/align_horizontal_centers.gif"
              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Horizontal mittig</literal>. Richtet die markierten 
              Modellelemente entlang der horizontalen Mitten in einer 
              vertikalen Linie aus. 
            </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/align_vertical_centers.gif"
              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Vertikal mittig</literal>. Richtet die markierten 
              Modellelemente entlang ihrer vertikalen Mitten in einer 
              horizontalen Linie aus. 
            </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/align_to_grid.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Am Gitter ausrichten</literal>. Richtet die markierten 
              Modellelemente entlang ihrer oberen und rechten Kanten auf die 
              Gittereinrastgrenzen aus ( siehe 
              <xref linkend="s2.ref.menu_grid_snap"/>
              ).
              </para>

              <tip>

                <para>
                	Die Ausrichtung erfolgt bezogen auf die aktuelle <emphasis>
                	Gittereinrast</emphasis>-Einstellung. Diese kann kleiner,
                	größer oder identisch mit dem dargestellten Gitter sein.
                	Seitdem die elemente an den Gittereinrastgrenzen ausgerichtet 
                	werden hat dieser Menüeintrag solange keine Auswirkungen bis 
                	Sie entweder die Gittereinrasteinstellungen auf einen 
                	größeren Wert eingestellt haben oder einen der anderen 
                	<literal>Anordnen</literal>-Menüeinträge verwendet haben, 
                	um die Elemente aus ihren ursprünglichen Positionen zu 
                	bewegen.
                </para>

              </tip>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Anordnen</title>

          <para>
          	Dieses Untermenü ordnet die markierten Elemente an. Es enthält vier 
          	Optionen zum Anordnen.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/distribute_horizontal_spacing.gif"
              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Horizontal gleiche Zwischenräume</literal>. Die am 
              weitesten rechts und links befindlichen Modellelemente werden 
              nicht bewegt. Die anderen werden horizontal justiert, bis der 
              horizontale Zwischenraum (z.B. von der rechten Kante des linken 
              Modellelementes zur linken Kante des rechten Modellelementes ) 
              zwischen allen markierten Elementen gleich ist. 
              </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/distribute_horizontal_centers.gif"
              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Horizontal gleiche Abstände</literal>. Die am 
              weitesten rechts und links befindlichen Modellelemente werden 
              nicht bewegt. Die anderen werden horizontal justiert, bis der 
              Abstand zwischen den horizontalen Mitten aller markierten Elemente 
              gleich ist. 
              </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/distribute_vertical_spacing.gif"
              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Vertikal gleiche Zwischenräume</literal>. Die oberen und 
              die unteren Modellelemente werden nicht bewegt. Die anderen 
              werden vertikal justiert, bis der vertikale Zwischenraum (z.B. von 
              der unteren Kante des oberen Modellelementes zur oberen Kante des 
              unteren Modellelementes) für alle markierten Elemente gleich ist. 
              </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/distribute_vertical_centers.gif"
              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Vertikal gleiche Abstände</literal>. Die oberen und 
              die unteren Modellelemente werden nicht bewegt. Die anderen werden 
              vertikal justiert, bis der Abstand zwischen den vertikalen Mitten 
              aller markierten Elemente gleich ist. 
			  </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2 id="s2.ref.menu_reorder">

          <title>Reihenfolge</title>

          <para>
          	Dieses Untermenü bestimmt die Reihenfolge überlappender Elemente. 
          	Es enthält vier Optionen.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/forward.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Nach vorne</literal>. Die markierten Modellelemente 
              werden in der Reihenfolge einen Schritt nach vorne geholt.
              </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/backward.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Nach hinten</literal>. Die markierten Modellelemente 
              werden in der Reihenfolge einen Schritt nach hinten gesetzt.
              </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/to_front.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>In den Vordergrund</literal>. Die markierten 
              Modellelemente werden in der Reihenfolge vor alle anderen 
              Modellelemente gebracht. 
              </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/to_back.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>In den Hintergrund</literal>. Die markierten 
              Modellelemente werden in der Reihenfolge hinter alle anderen 
              Modellelemente gebracht. 
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Grösse an Inhalt anpassen</title>

          <para>
          	Dieses Menüelement wirkt auf alle markierten Elemente im aktuellen 
          	Diagramm. Es setzt die Grösse aller Modellelemente auf die minimale 
          	Grösse, in welcher der gesamte Text gerade noch in das Element passt.
          </para>

        </sect2>

        <!--sect2>

          <title>Toggle Auto Resizing</title>

          <para>This menu-item is a checkbox 
          that currently does not do anything.
          </para>

        </sect2-->

        <sect2>

          <title>Layout</title>

          <para>
          	Dieses Menüelement enthält eine automatische Diagramm-Layoutfunktion. 
          	Wenn Sie z.B. dieses Menüelement aktivieren, werden alle Elemente 
          	des aktuellen Klassendiagrammes entsprechend bestimmter 
          	Layoutalgorithmen neu angeordnet.
          </para>

          <para>
          	Diese Funktion arbeitet aktuell nur bei Klassendiagrammen. Bei allen 
          	anderen Diagrammtypen führt dieses Menüelement nichts aus.
          	<!--(it should be downlighted)-->.
          </para>

        </sect2>

      </sect1>

      <sect1>

        <title>Das Menü Generieren</title>

        <para>
        	Dieses Menü enthält die Funktionen für die Codegenerierung aus 
        	UML-Diagrammen. Diese Funktionalität baut auf den strukturellen 
        	Informationen der Klassendiagramme auf.
        </para>

        <note>

          <para>
          	Ohne installierte Plugin-Module unterstützt ArgoUML nur die 
          	Codegenerierung mit Java. ArgoUML V0.20 unterstützt die folgenden 
          	Sprachen per Plugin: C#, C++, php4, php5.
          </para>

        </note>

        <warning>

          <para>
          	Codegenerierung ist natürlich eine sehr fortschrittsbezogene Arbeit. 
          	Die aktuelle Version von ArgoUML wird ein strukturelles Template für 
          	Ihren Code generieren, aber es ist nicht in der Lage mit der 
          	Verhaltens-Spezifikationen umzugehen, um Code für das dynamische 
          	Verhalten des Modelles zu generieren.
          </para>

        </warning>

        <sect2 id="s2.ref.menu_generate_selected_classes">

          <title>Markierte Klassen generieren ...</title>

          <para>
          	Dieser Menüeintrag öffnet den Dialog für den ArgoUML-Codegenerator 
          	(siehe
          	<xref linkend="fig.ref.menu_generate_selected_classes"/>
          	).
          </para>

          <figure id="fig.ref.menu_generate_selected_classes">

            <title>
				Der Dialog für <literal>Markierte Klassen 
            	generieren ...</literal>.
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_generate_dialog.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Neben der Beschriftung <literal>Verfügbare Klassen</literal> listet 
          	der Dialog für jede installierte Sprache alle markierten Klassen 
          	namentlich auf, mit einem Markierfeld auf der linken Seite. Alle 
          	Markierfelder sind beim ersten Mal nicht markiert. Das Markieren 
          	eines Markierfeldes veranlasst die Codegenerierung für diese Klasse. 
          	Das Markieren mehrerer Sprachen für eine Klasse veranlasst, dass 
          	die Klasse in all diesen Sprachen generiert wird.
          </para>

          <para>
          	Die Schaltflächen <literal>Alles markieren</literal> und <literal>
          	Nichts markieren</literal> kann helfen, wenn sehr viele Elemente 
          	markiert oder deren Markierung entfernt werden sollen.
          </para>

          <para>
          	Der untere Teil des Dialoges ist ein editierbares Kombinationsfeld 
          	mit der Beschriftung <literal>Ausgabeverzeichnis</literal>, um 
          	das Verzeichnis festzulegen, in das der Code generiert wird. 
          	Innerhalb dieses Verzeichnisses wird ein Oberverzeichnis mit dem 
          	Namen des Modelles erstellt. Weitere Unterverzeichnisse werden 
          	erzeugt, welche die Hierarchie der Pakete/Namensräume des Modelles 
          	reflektieren. Ein Pull-down-Menü erlaubt den Zugriff auf vorher 
          	verwendete Ausgabeverzeichnisse.
          </para>

          <para>
          	Am Ende des Dialoges befinden sich zwei Schaltflächen, die mit 
          	<literal>Generieren</literal> und <literal>Abbrechen</literal> 
          	beschriftet sind. Ein Taste&nbsp;1-Klick auf die erstgenannte wird 
          	die Codegenerierung auslösen, ein Taste&nbsp;1-Klick auf die 
          	zuletzt genannte wird die Codegenerierung abbrechen.
          </para>

        </sect2>

        <sect2>

          <title>Alle Klassen generieren...</title>

          <indexterm><primary>Alle Klassen generieren</primary></indexterm>
          <indexterm><primary>Tastenkürzel 
          </primary><secondary>F7</secondary></indexterm>
          <para>Tastenkürzel F7.</para>

          <para>
          	Diese Funktion verhält sich wie <literal>Markierte Klassen 
          	generieren...</literal> (siehe 
          	<xref linkend="s2.ref.menu_generate_selected_classes"/>) als wären 
          	alle Klassen im aktuellen Diagramm markiert. 
          </para>

        </sect2>

        <sect2>

          <title>Gesamtes Projekt generieren... (Noch zu beschreiben)</title>

          <para />

        </sect2>

        <sect2>

          <title>
          	Einstellungen zur Codegenerierung im Projekt... (Noch zu
          	beschreiben)
          </title>

          <para />

        </sect2>

      </sect1>

      <sect1 id="s1.ref.menu_critique">

        <title>Das Menü Kritiken</title>

        <para>
        	Dieses Menü steuert eines von ArgoUML&apos;s 
        	Alleinstellungsmerkmalen; die Verwendung von Kritiken, um den 
        	Designer anzuleiten. Die dahinterstehende Theorie ist ausführlich 
        	in Jason Robbins&apos; PhD-Dissertation beschrieben 
        	<ulink url="http://argouml.tigris.org/docs/robbins_dissertation/">
        	http://argouml.tigris.org/docs/robbins_dissertation/</ulink>.
        </para>

        <note>

          <para>
          	Ein Wort zur Terminilogie: Die <emphasis>Kritiken</emphasis> sind 
          	Hintergrundprozesse, die das aktuelle Modell anhand verschiedener 
          	<quote>guter</quote> Designkriterien überprüfen. Es gibt jeweils 
          	eine Kritik für jedes Designkriterium.
          </para>

          <para>
          	Die Ausgabe einer Kritik ist eine <emphasis>kritische Beschreibung
          	</emphasis>&mdash; eine Ausführung zu einigen Aspekten des Modelles, 
          	die nicht der guten Designpraxis zu folgen scheinen. 
          </para>

          <para>
          	Zum Schluss wird die kritische Beschreibung generell durch ein 
          	hochgestelltes <emphasis>"zu bearbeiten"-Element </emphasis> 
          	empfehlen, wie der identifizierte, schlechte Designansatz berichtigt 
          	werden kann.
          </para>

        </note>

        <note>

          <para>
          	Die Kritiken sind asynchrone Prozesse die parallel zum Hauptprozess 
          	von ArgoUML ablaufen. Änderungen benötigen üblicherweise eine oder 
          	zwei Sekunden bis die Kritiken verfügbar sind.
          </para>

        </note>

        <sect2>

          <title>Kritiken ein-/ausschalten</title>

          <para>
          	Dies ist ein Markierfeld, welches steuert, ob die Kritiken 
          	eingeschaltet sind. Standardmäßig ist das Feld markiert. Ist es 
          	nicht markiert, sind alle Kritiken ausgeschaltet und jedes, durch 
          	die Kritiken generierte "zu bearbeiten"-Element (alle, außer den 
          	vom Designer von Hand erstellten) wird im "Zu bearbeiten"-Fenster 
          	versteckt.
          </para>

        </sect2>

        <sect2 id="s2.ref.menu_design_issues">

          <title>Design-Wichtungen...</title>

          <para>
          	Dieser Menüeintrag öffnet einen Dialog, der steuert, wie die mit 
          	einem bestimmten Designbereich verknüpften Kritiken angewendet 
          	werden (siehe <xref linkend="fig.ref.menu_design_issues"/>).
          </para>

          <figure id="fig.ref.menu_design_issues">

            <title>
				Der Dialog für <literal>Design-Wichtungen...</literal>.
			</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_design_issues.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	ArgoUML kategorisiert Kritiken je nachdem wie die Designwichtungen 
          	diese adressieren. Es gibt 16 solcher Kategorien. Die Kritiken in 
          	jeder Kategorie werden detailliert im Kapitel über Kritiken (
          	<xref linkend="ch.ref.critics"/>) diskutiert.
          </para>

          <para>
          	Die Schieberegler können für jede Kategorie eingestellt werden, um 
          	die Kritiken zu steuern, die in dieser Kategorie ausgelöst werden. 
          	Das verschieben eines Reglers auf <literal>Aus</literal> schaltet 
          	alle Kritiken dieser Kategorie ab und entfernt alle damit verbundenen 
          	"zu bearbeiten"-Elemente aus dem "Zu bearbeiten"-Fenster.
          </para>

          <para>
          	Das Einstellen des Reglers auf einen höher priorisierten Wert, wird 
          	alle auf oder über dieser Priorität befindlichen Kritiken innerhalb 
          	der Design...kategorie freischalten (<literal>Aus</literal> ist die 
          	niedrigste Priorität)
          </para>

          <note>

            <para>
            	Die Regler sind für alle Designkategorien standardmäßig auf 
            	<literal>Hoch</literal> eingestellt.
            </para>

          </note>

        </sect2>

        <sect2>

          <title>Design Ziele...</title>

          <para>
          	Dieser Menüeintrag öffnet einen Dialog, der steuert, wie Designziele 
          	behandelt werden (siehe <xref linkend="fig.ref.menu_design_goals"/>).
          </para>

          <figure id="fig.ref.menu_design_goals">

            <title>
            	Der Dialog für <literal>Design Ziele...</literal>.
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_design_goals.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	ArgoUML verfolgt das Konzept, dass Designer eine Anzahl von 
          	Designzielen haben, die sie erreichen wollen (zum Beispiel eine 
          	gute strukturelle Darstellung, eine detaillierte 
          	Verhaltensdarstellung usw.). Kritiken sind mit einem oder mehreren 
          	Zielen verknüpft.
          </para>

          <para>
          	Dieser Dialog erlaubt es dem Benutzer, die Priorität eines jeden 
          	Designzieles zu spezifizieren.
          </para>

          <para>
          	Um die Kritiken, die das jeweilige Ziel beeinflussen zu steuern, 
          	können die Schieberegler für jedes Designziel eingestellt werden. 
          	Das Einstellen des Reglers auf Null, wird alle Kritiken dieses 
          	Zieles ausschalten und alle damit verknüpften "Zu bearbeiten"-
          	Elemente aus dem "Zu bearbeiten"-Fenster entfernen.
          </para>

          <para>
          	Die Einstellung eines Reglers auf einen höheren Wert wird alle 
          	Kritiken auf oder über der Priorität innerhalb der 
          	Designwichtungskategorie freigeben (1 ist die höchste und 5 die 
          	niedrigste Priorität).
          </para>

          <tip>

            <para>
            	Es kann nützlich sein, über diese Funktion ähnlich zu denken wie 
            	bei <literal>Design-Wichtungen</literal>  
            	(siehe <xref linkend="s2.ref.menu_design_issues"/>), 
            	aber mit der Gruppierung der Kritiken gemäß dem Ergebnis der 
            	OOA&amp;D und nicht mit der Gruppierung gemäß der Struktur der 
            	UML.
            </para>

          </tip>

          <warning>

            <para>
            	Die Version 0.20 von ArgoUML enthält ein einziges Designziel mit 
            	der Bezeichnung <literal>Nicht spezifiziert</literal>. Der 
            	Regler ist standardmäßig auf die Priorität 1 eingestellt. Jedoch 
            	enthält es keine Kritiken und hat somit keine Auswirkungen.
            </para>

          </warning>

        </sect2>

        <sect2 id="s2.ref.menu_browse_critics">

          <title>Kritiken anzeigen...</title>

          <para>
          	Dieser Menüeintrag öffnet einen Dialog, der die individuellen 
          	Kritiken steuert (siehe 
          	<xref linkend="fig.ref.menu_browse_critics"/>).
          </para>

          <figure id="fig.ref.menu_browse_critics">

            <title>
            	Der Dialog für <literal>Kritiken anzeigen...</literal>.
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_browse_critics.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Dieser Dialog steuert das Verhalten der einzelnen Kritiken. Links 
          	befindet sich eine Liste aller Kritiken, um diese individuell ein- 
          	oder ausschalten zu können. Für jede Kritik gibt es drei Spalten, 
          	beschriftet mit <literal>Aktiv</literal>, <literal>Titel</literal> 
          	und <literal>deaktiviert</literal>. Die erste davon ist ein 
          	Markierfeld, das mit Taste&nbsp;1-Klicks verändert werden kann. Die 
          	zweite ist der Titel der Kritik und die dritte zeigt an, wenn die 
          	Kritik im "Zu bearbeiten"-Fenster deaktiviert wurde (siehe 
          	<xref linkend="ch.ref.todopane"/>. Eine Kritik ist nur dann wirklich 
          	aktiv, wenn das Markierfeld in der ersten Spalte markiert ist 
          	<emphasis>und</emphasis> die Kritik nicht deaktiviert wurde.
          </para>

          <para>
          	Jede Kritik, bei der das Markierfeld in der ersten Spalte nicht 
          	markiert ist, ist inaktiv und wird nicht ausgelöst. Zusätzlich wird 
          	jedes, mit dieser Kritik verknüpfte "Zu bearbeiten"-Element aus dem 
          	"Zu bearbeiten"-Fenster entfernt.
          </para>

          <para>
          	Die Version 0.26 von ArgoUML umfasst 90 Kritiken, einige davon sind 
          	unvollständig implementiert. Sie sind je Designwichtungskategorie 
          	im Kapitel Kritiken detailliert beschrieben (siehe 
          	<xref linkend="ch.ref.critics"/>).
		  </para>

          <para>
          	Rechts von der Liste gibt es eine Reihe von Feldern, mit 
          	<literal>Details Kritik</literal> bezeichnet, die eine detaillierte 
          	Kontrolle über die einzelnen Kritiken gibt. Das Markieren einer 
          	Kritik in der linken Liste wird die Felder für diese Kritik befüllen.
          </para>

          <para>
          	Das erste Feld rechts ist mit <literal>Klasse:</literal> bezeichnet.
          	Darauf folgt der vollständige Name der Klasse in ArgoUML, welche die 
          	Kritik implementiert. Dieser Name kann aus eindeutiger Bezeichner 
          	für diese Kritik verwendet werden, z.B. bei der Kommunikation über 
          	diese Kritik.
          </para>

          <para>
          	Das erste Feld danach ist ein Textfeld mit der Beschriftung 
          	<literal>Titel:</literal>. Dieses Textfeld beinhaltet den 
          	vollständigen Titel der Kritik (der in der linken Liste abgeschnitten  
          	sein kann).
          </para>

          <note>

            <para>
            	Im Titel können Sie den Text <literal>&lt;ocl&gt;self&lt;/ocl&gt;
            	</literal> sehen, der durch den Namen des in Frage kommenden 
            	Modellelementes ersetzt wird, wenn die Kritik ausgelöst wird. 
            </para>

          </note>

          <para>
          	Das nächste Feld ist ein mit <literal>Priorität</literal> 
          	beschriftetes Pull-down-Menü. Die drei verfügbaren Optionen sind 
          	<literal>Hoch</literal>, <literal>Mittel</literal> und <literal>
          	Niedrig</literal> und spezifizieren die Prioritätskategorie eines 
          	jeden "Zu bearbeiten"-Elementes dieser Kritik. Dies ändert nich die 
          	Priorität bereits existierender "Zu bearbeiten"-Elemente. Nur die 
          	neu generierten. Die Änderung der Priorität einer Kritik wird nicht 
          	dauerhaft gespeichert.
          </para>

          <para>
          	Das nächste Feld ist mit <literal>Mehr Informationen:</literal> 
          	beschriftet und enthält eine URL, die auf weitergehende Informationen 
          	zeigt. Mit der rechts befindlichen Schaltfläche <literal>Gehe zu
          	</literal> können Sie zu dieser URL springen.
          </para>

          <warning>

            <para>
            	In der Version 0.26 von ArgoUML sind keine weitergehende 
            	Informationen verfügbar und die Schaltfläche <literal>Gehe zu
            	</literal> ist deaktiviert.
            </para>

          </warning>

          <para>
          	Das nächste Textfeld ist mit <literal>Beschreibung:</literal> 
          	bezeichnet und ist ein Textbereich mit einer detaillierten 
          	Beschreibung dessen, was die Kritik bedeutet. Ist der Text zu gross 
          	für den Bereich, erscheint auf der rechten Seite ein Schieberegler.
          </para>

          <note>

            <para>
            	In diesem Textbereich können Sie den Text <literal>
            	&lt;ocl&gt;self&lt;/ocl&gt;</literal> vorfinden, der durch den 
            	Namen des in Frage kommenden Modellelementes ersetzt wird, wenn 
            	die Kritik ausgelöst wird.
            </para>

          </note>

          <para>
          	Das letzte Feld ist ein mit <literal>Verwende Kennzeichen:</literal> 
          	beschriftetes Pull-down-Menü, mit drei Optionen: <literal>Immer
          	</literal>, <literal>Wenn, nur eines</literal> und <literal>Nie
          	</literal>.
          </para>

          <para>
          	Kennzeichen sind Symbole und rote Wellenlinien in aktuellen 
          	Diagrammen, um den Artefakt zu kennzeichnen, auf den sich die Kritik 
          	bezieht. Die ursprüngliche Absicht war es, die Verbindung zwischen 
          	den Kritiken und den Kennzeichen etwas flexibler zu machen.
          </para>

          <para>
          	Ein Benutzer möchte z.B. die Kritik <literal>Fehlender Name
          	</literal> mit einem roten Unterstrich angezeigt bekommen, ein 
          	anderer Benutzer möchte die Kennzeichen ausschalten oder mit einer 
          	grünen Wellenlinie oder einem blauen Fragezeichen bezeichnet haben. 
          	Kritiken, bei denen die Kennzeichen ausgeschaltet sind, würden 
          	immer noch im "Zu bearbeiten"-Fenster aufgelistetes Feedback 
          	erzeugen.
          </para>

          <caution>

            <para>
            	In der Release V0.26 von ArgoUML hat diese Auswahl keine 
            	Funktion. Sie ist für die künftige Entwicklung.
            </para>

          </caution>

          <para>
          	Unterhalb der Felder befinden sich zwei Schaltflächen in einer 
          	horizontalen Reihe.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              <literal>Aktivieren</literal>.
              Es ist möglich, eine Kritik im "Zu bearbeiten"-Fenster zu 
              deaktivieren ( siehe <xref linkend="ch.ref.todopane"/>), was die 
              Kritik für eine bestimmte Zeit ausschaltet. Wenn die Kritik 
              deaktiviert wurde, wird diese Schaltfläche aktiviert und wird 
              die Kritik wieder aktivieren. Ansonsten ist sie deaktiviert. 
              </para>

              <tip>

                <para>
                	Sie können eine deaktivierte Kritik erkennen, da dies in der 
                	linken Liste in der dritten Spalte angezeigt wird.
                </para>

              </tip>

            </listitem>

            <listitem>

              <para>
              	<literal>Erweitert</literal>. Diese Schaltfläche veranlasst 
              	ArgoUML einige zusätzliche Spalten in der Tabelle der Kritiken 
              	anzuzeigen. Sie erlauben eine detailliertere Untersuchung der 
              	Eigenschaften einer Kritik.
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Die untere rechte Schaltfläche des Dialoges ist mit <literal>
          	Schliessen</literal> beschriftet. Ein Taste&nbsp;1-Klick schliesst 
          	den Dialog.
          </para>

        </sect2>

      </sect1>

      <sect1>

        <title>Das Menü: Werkzeuge</title>

        <para>
        	Dieses Menü enthält einen generieschen Menüerweiterungspunkt für die 
        	in ArgoUML enthaltenen Plugins. Das Standardsystem hat kein Plugin 
        	und dieser Menüeintrag ist standardmäßig leer.
        </para>

      </sect1>

      <sect1>

        <title>Das Menü: Hilfe</title>

        <para>
        	Diese Menü enthält Hilfen für den Gebrauch von ArgoUML. Es hat 
        	zwei Einträge.
        </para>

        <sect2>

          <title>Systeminformation</title>

          <para>
          	Dieses Menü öffnet den Dialog Systeminformation, siehe 
          	<xref linkend="fig.ref.menu_help_system_info"/>
          </para>

          <figure id="fig.ref.menu_help_system_info">

            <title>Der Dialog für <literal>
            Systeminformation</literal>.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_help_system_info.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Verwenden Sie dieses Menü, um das System für den Systemmanager oder 
          	Entwickler zu beschreiben auf dem ArgoUML läuft. Das Drücken der 
          	Schaltfläche <literal>Starte Speicherbereinigung (GC)</literal> 
          	startet nicht nur den Java Garbage Collector sondern aktualisiert 
          	auch die dargestellten Informationen. Um das Kopieren und Einfügen 
          	in (z.B.) eine E-Mail zu unterstützen, dafür ist die Schaltfläche 
          	<literal>In Zwischenablage kopieren</literal> vorgesehen. Die 
          	Schaltfläche <literal>Schliessen</literal> schließt den Dialog.
          </para>

        </sect2>

        <sect2 id="s2.ref.menu_help_about">

          <title>Über ArgoUML</title>

          <para>
          	Dieser Menüeintrag öffnet das Hilfefenster von ArgoUML (siehe 
          	<xref linkend="fig.ref.menu_help"/>).
		  </para>

          <figure id="fig.ref.menu_help">

            <title>Das Hilfefenster von ArgoUML</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/menu_help.png" format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Das Fenster weist sechs Register auf, die durch einen Taste&nbsp;1-
          	Klick ausgewählt werden können. Standardmäßig wird das erste 
          	Register (<literal>Startfenster</literal>) angezeigt.
		  </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Startfenster</literal>. 
              	Dies zeigt das Bild und die aktuelle Versionsnummer, welche 
              	angezeigt werden, wenn ArgoUML hochfährt.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Version</literal>. 
              	Dieses Register enthält die Versionsinformationen von den 
              	verschiedenen Paketen aus denen ArgoUML besteht, sowie einigen 
              	Betriebssystem- und Umgebungsinformationen.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Anerkennung</literal>.
              	Dieses Register führt alle auf, die ArgoUML erstellt haben, 
              	einschliesslich der Kontaktdaten für die verschiedenen 
              	Modul-Eigentümer. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Kontakt</literal>.
              	Dieses Register enthält die Haupt-Kontaktdaten für ArgoUML-
              	Projekt-Webseite und der Entwickler-Mail-Listen. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Fehler mitteilen</literal>.
              	Dieses Register gibt Ihnen Informationen, wie Sie mit Fehlern 
              	in ArgoUML umgehen sollen. Es ist wichtig, dass alle Fehler 
              	erfasst und jede Kooperation gewürdigt wird. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Recht</literal>. 
              	Ein Auszug der FreeBSD-Lizenz, der die gesamte ArgoUML-Software 
              	unterliegt.
              </para>

              <caution>

                <para>
                	Die verschiedenen Projektdokumentationen unterliegen nicht 
                	alle der FreeBSD-Lizenz (wie es für die Software der Fall 
                	ist). Im speziellen unterliegt dieses Handbuch der 
                	OpenPub-Lizenz (siehe <xref linkend="app.legal"/>).
                </para>

              </caution>

            </listitem>

          </itemizedlist>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.navpane">

      <title>Der Explorer</title>

      <indexterm><primary>Explorer</primary></indexterm>
      <indexterm>
      <primary>Navigation</primary><secondary>Baum</secondary></indexterm>
      <indexterm>
      <primary>Navigation</primary><secondary>Fenster</secondary></indexterm>
      <indexterm>
      <primary>Navigator</primary><secondary>Baum</secondary></indexterm>
      <indexterm>
      <primary>Navigator</primary><secondary>Fenster</secondary></indexterm>
      <para>
      	Der Explorer wurde vorher Navigationsfenster/-baum genannt oder machmal 
      	Navigatorfester/-baum.
      </para>

      <sect1>

        <title>Einleitung</title>

        <para>
        	<xref linkend="fig.ref.navigation_pane" />
        	zeigt das ArgoUML-Fenster mit dem hervorgehobenen Explorer.
        </para>

        <figure id="fig.ref.navigation_pane">
          <!-- This diagram shows the navigation overview. 
          It is a complete ArgoUML
          window, but with all except the explorer grayed out. This was
          done using GIMP with selected areas using Filters->Color->Map->
          Color Range Mapping from black to black & white to HSV 0,0,75.-->
          <title>Überblick über den Explorer</title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
          				fileref="images/reference/navigator_pane.png"
          				format="PNG" />
          		</imageobject>
          	</mediaobject>
          </screenshot>
        </figure>

        <para>
        	Der Explorer erlaubt es dem Anwender, die Struktur des Modelles in 
        	einer Anzahl von vordefinierten Perspektiven zu betrachten. Er 
        	erlaubt es den Anwendern auch, ihre eigenen Perspektiven für das 
        	benutzerspezifische Erkunden des Modelles zu definieren.
        </para>

        <para>
        	Eine wichtige Eigenschaft, bezogen auf die Idee der kognitive 
        	Psychologie in ArgoUML ist, dass nicht alle Modellelemente 
        	notwendigerweise in allen Perspektiven dargestellt werden. Im 
        	Gegenteil, die Perspektiven werden dazu verwendet, uninteressante 
        	Teile des Modelles zu verstecken.
        </para>

      </sect1>

      <sect1 id="s1.ref.nav_mouse">

        <title>Das Verhalten der Maus im Explorer</title>

        <indexterm><primary>Explorer</primary><secondary>Verhalten der  
        Maus</secondary></indexterm>
        <indexterm><primary>Verhalten der Maus</primary><secondary>im  
        Explorer</secondary></indexterm>
        <para>
        	Das generelle Verhalten der Maus und die Benennung der Schaltflächen 
        	ist im Kapitel mit dem Überblick über die Anwenderschnittstelle 
        	ausgeführt (siehe <xref linkend="ch.ref.ui"/>).
		</para>

        <sect2>

          <title>Taste&nbsp;1-Klick</title>

          <para>
          	Elemente, die Subhierarchien haben, werden innerhalb der 
          	hierarchischen Darstellung durch 
		  	<guiicon>
	          <inlinemediaobject>
	          	<imageobject>
	          		<imagedata align="center"
	          			fileref="images/icons/hierarchy_closed.gif" format="GIF" />
	          	</imageobject>
	          </inlinemediaobject>
          	</guiicon>
          	angezeigt, wenn die Hierarchie verborgen ist und 
	          <guiicon>
		          <inlinemediaobject>
		          	<imageobject>
		          		<imagedata align="center"
		          			fileref="images/icons/hierarchy_open.gif" format="GIF" />
		          	</imageobject>
		          </inlinemediaobject>
	          </guiicon> 
          	wenn die Hierarchie geöffnet ist.
          </para>

          <para>
          	Ein Taste&nbsp;1-Klick über dem Namen eines Diagramm-Modellelementes  
          	veranlasst, dass das Diagramm markiert und im Editierfenster 
          	angezeigt wird. Zusätzlich werden seine Details im Detailfenster 
          	dargestellt.
          </para>

          <para>
          	Ein Taste&nbsp;1-Klick im Hauptbereich des Explorers über dem Namen 
          	eines Modellelementes, welches kein Diagramm ist, wird markiert 
          	und seine Details im Detailfenster angezeigt. Ist das Modellelement 
          	Teil eines aktuell im Editierfenster dargestellten Diagrammes, wird 
          	das Modellelement dort hervorgehoben. 
          </para>

          <note>

            <para>
            	Wenn das Modellelement Teil eines, vom aktuell im Editierfenster 
            	angezeigten, abweichenden Diagrammes ist, gibt es <emphasis>
            	keine</emphasis> Änderung des Diagrammes im Editierfenster.
            </para>

          </note>

          <para>
          	Wo der Taste&nbsp;2-Klick verwendet wurde, um ein kontextsensitives 
          	Popup-Menü zu öffnen (siehe nachfolgend), wird der Taste&nbsp;1-
          	Klick dazu verwendet, den gewünschten Menüeintrag auszuwählen. Ein 
          	Taste&nbsp;1-Klick ausserhalb des Menübereiches wird diesen 
          	entfernen.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;1-Doppelklick</title>

          <para>
          	Dies hat den gleichen Effekt wie ein einziger Taste&nbsp;1-Klick. 
          	Wenn das Baumelement kein Blatt ist, wird es zwischen dem Öffnen und 
          	Schliessen der Hierarchie hin- und herwechseln.
          </para>

        </sect2>
        
        <sect2>

          <title>Taste&nbsp;1-Bewegung</title>
          
          <para>
          	Die Taste&nbsp;1-Bewegung bedeutet, dass Sie ein oder mehrere 
          	Modellelemente nehmen und an eine neue Stelle ziehen. Das Loslassen 
          	des Modellelementes bewirkt in ArgoUML die Ausführung einiger 
          	Funktionen. Je nachdem, wo Sie das Modellelement loslassen.
          </para>

          <sect3>
	          <title>Vom Explorer zum Explorer</title>
	          <para>
	          	Das Loslassen der Maustaste über einem Namensraum bewirkt, dass 
	          	das Modellelement Teil dieses Namensraumes wird. In der 
	          	paketorientierten Explorerperspektive bedeutet dies eine 
	          	einfach ziehen-und-loslassen-Funktion.
	          </para>
			  
			  <para>
			  	Verwenden Sie diese ziehen-und-loslassen-Eigenschaft, um z.B. 
			  	Klassen leicht von einem Paket zu einem anderen zu bewegen.
			  </para>
		  </sect3>

          <sect3>
	          <title>Vom Explorer zum Diagramm</title>
	          <para>
	          	Das Loslassen eines Modellelementes in einem Diagramm enspricht 
	          	der Funktion "Zum Diagramm hinzufügen". Aus diesem Grund wird es, 
	          	wenn das Diagramm dieses Modellelement noch nicht darstellt, 
	          	hinzugefügt.
	          </para>
			  
			  <para>
			  	Verwenden Sie diese ziehen-und-loslassen-Eigenschaft, um z.B. 
			  	ein Diagramm aus importierten XMI-Dateien zu erstellen. Dieses 
			  	tun Sie, weil XMI-Dateien zwar alle Modellelemente, aber keine 
			  	Diagramminformation enthalten.
			  </para>
		  </sect3>

        </sect2>
        
        <sect2>

          <title>Taste&nbsp;2-Aktionen</title>

          <para>
          	Wenn sie im Explorer verwendet werden, werden sie ein 
          	auswahlabhängiges Popup-Menü anzeigen. Die Menüeinträge sind 
          	hervorgehoben (aber nicht markiert) und Untermenüs werden durch 
          	nachfolgende Mausbewegungen geöffnet (ohne irgendwelche Tasten). Die 
          	Auswahl der Menüeinträge erfolgt mit der Taste&nbsp;1 oder der 
          	Taste&nbsp;2.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Doppelklick</title>

          <para>
          	Dies hat keinen anderen Effekt als ein einfacher Taste&nbsp;2-Klick.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.explorer_keyboard">

        <title>Verhalten der Tastatur im Explorer</title>

        <para>
        	Alle in einer Baumverzweigung aktiven Tasten weisen ihr normales 
        	Verhalten auf.
        </para>

        <para>
        	Wenn ein Diagramm ausgewählt ist, wird das Drücken von Strg-C das 
        	Diagramm im GIF-Format in die Zwischenablage kopieren.
        </para>

      </sect1>

      <sect1>

        <title>Auswahl der Perspektiven</title>

        <para>
        	Die Modellelemente im ArgoUML-Modell können für die Darstellung in 
        	der Baumansicht für eine Anzahl von Perspektiven konfiguriert 
        	werden. Zu diesem Zweck erlaubt ein Pull-down-Menü im oberen Bereich, 
        	die Auswahl der Explorerperspektive.
        </para>

        <para>
        	Nachfolgend gibt es ein Pull-down-Menü, um die Reihenfolge der 
        	Elemente innerhalb der Hierarchie auszuwählen. Die zwei Möglichkeiten 
        	sind: &quot;Nach Typ und Name&quot; und &quot;Nach Name&quot;. Der 
        	vorherige gruppiert alle Elemente nach ihrem Typ und sortiert diese 
        	alfabetisch nach ihrem Namen. Der letztere sortiert einfach nur nach 
        	dem Namen.
        </para>

        <para>
        	Die folgenden Explorerperspektiven können in dem obigen Pull-down-
        	Menü ausgewählt werden:
        </para>

        <itemizedlist>

          <listitem>

            <para>
            	<literal>Paketorientiert</literal>
            	(der Standard). Die Hierarchie ist anhand der Pakethierarchie 
            	organisiert. Die oberste Ebene zeigt das Modell. Darunter 
            	befinden sich alle auf oberster Ebene befindlichen Pakete des 
            	Modelles und alle Modellelemente, die sich direkt im Namensraum 
            	des Modelles befinden.
            </para>

            <para>
            	Unterhalb eines jeden Paketes befinden sich alle Modellelemente, 
            	die sich innerhalb des Namensraumes dieses Paketes befinden, 
            	einschliesslich aller weiteren Sub-Pakete (die widerum ihre 
            	eigenen Subhierarchien haben können).
            </para>

          </listitem>

          <listitem>

            <para>
            	<literal>Klassenorientiert</literal>. 
            	Zeigt Klassen in deren Pakethierarchie, genauso wie Datentypen 
            	und Elemente von Anwendungsfalldiagrammen. Sie ist der  
            	paketorientierten Sicht sehr ähnlich, aber sie zeigt keine 
            	verbundenen oder verknüpften Elemente.
	            <!-- Got this from 
	            http://www.devshed.com/c/a/Practices/Design-with-ArgoUML/3/ -->
            </para>

          </listitem>

          <listitem>

            <para>
            	<literal>Diagrammorientiert</literal>. 
            	In dieser Sicht umfasst die oberste Ebene alle Diagramme des 
            	Modelles. Unterhalb eines jeden Diagrammes befindet sich eine 
            	flache Liste aller Modellelemente des Diagrammes. Modellelemente, 
            	die Sub-Modellelemente haben, die nicht im Diagramm erscheinen, 
            	haben ihre eigene Hierarchie (zum Beispiel Attribute und 
            	Operationen von Klassen).
            </para>

          </listitem>

          <listitem>

            <para>
            	<literal>Vererbungsorientiert</literal>. 
            	In dieser Sicht zeigt die oberste Ebene das Modell. Unterhalb 
            	dieser Ebene befinden sich alle Modellelemente, die im Modell 
            	keine Generalisierung aufweisen. Modellelemente, die eine 
            	Spezialisierung aufweisen haben eine Sub-Hierarchie, welche die 
            	Spezialisierungen anzeigt.
            </para>

          </listitem>

          <listitem>

            <para>
            	<literal>Klassenassoziationsorientiert</literal>.
            	In dieser Sicht zeigt die oberste Ebene das Modell. Darunter 
            	befinden sich alle Diagramme und alle Klassen. Alle Klassen 
            	mit Assoziationen zeigen die Hierarchie zu den assoziierten 
            	Klassen. 
            </para>

          </listitem>

          <listitem>

            <para>
            	<literal>Hierarchieorientiert</literal>. 
            	In dieser Sicht wird das Modell auf der obersten Ebene 
            	dargestellt, darunter nur Knoten und unter diesen nur 
            	Komponenten, die auf den Knoten basieren. Und unter diesen 
            	Komponenten alle Elemente die auf den Komponenten basieren.
            </para>

          </listitem>

          <listitem>

            <para>
            	<literal>Zustandsorientiert</literal>. 
            	In dieser Sicht zeigt die oberste Ebene alle Zustandsautomaten 
            	und alle, mit Klassen verknüpften Aktivitätsgrafiken.
            </para>

            <para>
            	Unterhalb jedes Zustandsautomaten befindet sich eine Hierarchie, 
            	die alle Zustandsübergangsdiagramme und all deren Zustände 
            	anzeigt.
            </para>

            <para>
            	Unterhalb jeder Aktivitätsgrafik befindet sich eine Hierarchie, 
            	die das Aktivitätsdiagramm und alle seine Aktionszustände 
            	anzeigt. Unterhalb jedes Aktionszustandes befindet sich eine 
            	Liste von in den Aktionszustand ein- und ausgehenden 
            	Übergängen.
            </para>

          </listitem>

          <listitem>

            <para>
				<literal>Übergangsorientiert</literal>. 
				Dies ist sehr ähnlich der <literal>Zustandsorientierten</literal> 
				Sicht, aber unter jedem Zustandsautomaten sind die Diagramme 
				und alle im Diagramm befindlichen Übergange aufgelistet, wobei 
				die Zustände als Subhierarchien unter ihren verknüpften 
				Übergängen dargestellt werden.
            </para>

            <para>
            	Unter jedem Aktivitätsgrafen sind die Diagramme und alle 
            	Übergänge in den Diagrammen aufgelistet, wobei die 
            	Aktionszustände als Subhierarchien unter ihren verknüpften 
            	Übergängen dargestellt werden.
            </para>

          </listitem>
          
          <listitem>

            <para>
            	<literal>Anordnungsorientiert</literal>. 
            	In dieser Sicht werden alle Modellelemente entsprechend ihrer 
            	Anordnung im UML-Metamodell dargestellt.
            </para>

            <para>
            	Diese Perspektive zeigt weit mehr Modellelemente als alle 
            	anderen - sie versteckt nichts. Aus diesem Grund ist diese 
            	Sicht nicht so anwenderfreundlich, aber sehr nützlich für den 
            	UML-Spezialisten.
            </para>

          </listitem>

        </itemizedlist>

      </sect1>

      <sect1 id="s1.ref.configure_perspectives">

        <title>Perspektiven konfigurieren</title>

        <para>
        	Der Explorer ist anwenderkonfigurierbar entworfen worden, um es 
        	dem Designer zu erlauben, alles auf seine oder ihre präferierte Art 
        	und Weise anzeigen zu können.
        </para>

        <sect2>

          <title>Der Dialog Perspektiven konfigurieren</title>

          <para>
          	Ein Taste&nbsp;1-Klick oben links im Explorer auf das Symbol 
          	&quot;Perspektiven konfigurieren&quot; (
	          <guiicon>
	          	<inlinemediaobject>
	          		<imageobject>
	          			<imagedata align="center"
	          				fileref="images/icons/nav_config.gif" format="GIF" />
	          		</imageobject>
	          	</inlinemediaobject></guiicon>)
	          öffnet den Dialog Explorer Perspektiven (siehe 
	          <xref linkend="fig.ref.navigator_pane_perspectives"/>).
          </para>

          <figure id="fig.ref.navigator_pane_perspectives">

            <title>Der Dialog Perspektiven konfigurieren</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/navigator_pane_perspectives.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <para>
          	Die obere Hälfte des Dialoges enthält eine Liste aller aktuell 
          	definierten Perspektiven und rechts davon eine Reihe von 
          	untereinander angeordneten Schaltflächen. Der Taste&nbsp;1-Klick 
          	kann zum Auswählen einer Perspektive verwendet werden. Sie können 
          	gleichzeitig nur jeweils eine Perspektive auswählen.
          </para>

          <para>
          	Das Markieren einer Perspektive füllt ein Textfeld oberhalb der 
          	Liste, in dem der Name der Perspektive editiert werden kann.
          </para>

          <para>
          	Die untere Hälfte des Dialoges enthält zwei Listen. Die eine links,
          	mit <literal>Regelbibliothek</literal> beschriftet, enthält eine 
          	Liste der verfügbaren Regeln, die für das Erstellen einer 
          	Perspektive verwendet werden können. Die eine rechts, mit 
          	<literal>Ausgewählte Regeln</literal> beschriftet, enthält die, 
          	für die in der obigen Liste der Perspektiven markierte Perspektive 
          	aktuell ausgewählten Regeln. In beiden Listen können Sie nur eine 
          	Regel gleichzeitig auswählen.
          </para>

          <para>
          	Als Trennung der beiden Bereiche in der unteren Hälfte des Dialoges 
          	befinden sich Schaltflächen, die mit <literal>&gt;&gt;</literal> und 
          <literal>&lt;&lt;</literal> beschriftet sind. Die erste davon 
          überträgt die in der Biblothek markierte Regel von der linken Liste 
          in die rechte&mdash; z.B. sie fügt der Perspektive eine Regel hinzu. 
          Die zweite überträgt die rechts markierte Regel in die Bibliotheksliste 
          auf der Linken&mdash; z.B. sie entfernt aus der Perspektive eine Regel.
          </para>

          <para>
          	Wenn Sie die Maus über die horizontale Line bewegen, die die zwei 
          	Hälften des Dialoges voneinander trennen, dann sehen Sie den 
          	Änderungscursor, der Ihnen anzeigt, dass Sie diese Linie nehmen und 
          	nach oben oder unten ziehen können.
          </para>

          <para>
          	Alle drei Titel der Listen zeigen die Anzahl der in der Liste 
          	befindlichen Elemente an. ArgoUML Version 0.24 hat 9 
          	Standardperspektiven und 72 Regeln in der Bibliothek, aus den 
          	Perspektiven gebildet werden können.
          </para>

          <para>
          	Die Schaltflächen oben rechts sind nachfolgend erklärt:
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Neu</literal>. 
              	Sie erstellt eine grundlegend neue Perspektive ohne Regeln und 
              	einem automatisch generierten Namen.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Entfernen</literal>. 
              	Sie entfernt die markierte Perspektive.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Duplizieren</literal>. 
              	Sie erstellt eine Kopie der markierten Perspektive, so dass 
              	diese als Basis für eine neue Perspektive genutzt werden kann. 
              	Die neue wird mit &quot;Kopie von&quot; gefolgt vom Originalnamen 
              	bezeichnet.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Nach oben</literal>.
              	Sie bewegt die markierte Perspektive um einen Platz in der Liste 
              	nach oben. Bei der obersten Perspektive ist diese Schaltfläche 
              	deaktiviert.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Nach unten</literal>.
              	Sie bewegt die markierte Perspektive um einen Platz in der Liste 
              	nach unten. Bei der letzten Perspektive ist diese Schaltfläche 
              	deaktiviert. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Standards wiederherstellen</literal>. 
              	Sie stellt alle Perspektiven und deren Regeln auf die eingebauten 
              	Standards von ArgoUML ein.
              </para>

            </listitem>

          </itemizedlist>

          <para>
          	Ganz unten rechts befindet sich eine Schaltfläche mit der 
          	Beschriftung <literal>OK</literal>, die verwendet wird, wenn alle 
          	Änderungen vervollständigt sind. Ein Taste&nbsp;1-Klick auf diese 
          	Schaltfläche wird den Dialog schliessen. Die Änderungen werden 
          	in der Datei <literal>argo.user.properties</literal> gespeichert, 
          	wenn Sie ArgoUML beenden. 
          </para>

          <para>
          	Dann gibt es noch die Schaltfläche <literal>Abbrechen</literal>, die 
          	alle im Dialog durchgeführten Änderungen aufhebt. Das Betätigen des 
          	Dialog-Schliessen-Symboles (normalerweise in der oberen rechten 
          	Ecke) hat den gleichen Effekt, wie das Betätigen der Schaltfläche 
          	Abbrechen.
          </para>

        </sect2>

        <!--sect2>

          <title>The Explorer Panes</title>

          <para>The explorer was conceived as being able to offer 
          multiple views simultaneously, with up to three panels of 
          hierarchy. A dialog offers control of these panels, with an 
          option to show or not show each panel, and the option of the 
          second and third panels to be rooted at the selection on the 
          previous panel, or to show the previously used 
          hierarchy.</para>

          <caution>

            <para>This functionality is not yet implemented in ArgoUML. 
            The dialog is never shown.</para>

          </caution>

          <para>When using the explorer, it is worth bearing in mind 
          that this is a useful visualization of the model, it is not 
          <emphasis>solely</emphasis> for navigation and selection. It 
          is also useful for users to easily (meaning a few mouse 
          clicks without having to arrange a diagram) visualize the 
          model structured according to some perspective. For example, 
          show me the state nesting, or show me the class inheritance 
          tree, or show me the package nesting, or show me the list of 
          actors.</para>

          <para>The idea with the second and third explorer tree panes, 
          is that sometimes it is easier to explore the tree to a 
          certain level in one tree and then continue expanding in a 
          second tree. Since each tree will not be so deep, it will 
          look more like a list.</para>

          <para>For example, look at the way javadocs are viewed with 
          frames: the packages are selected from one list, and 
          interfaces, classes, and exceptions in that package are shown 
          in a second pane. In the case of javadocs, the second pane 
          has a tree with three roots that are always expanded, but it 
          is visually presented as three lists with three 
          headers.</para>

          <para>The other suggested use of a second or third nav panel 
          is to list recently visited model elements. This is simliar 
          to the recently visited files listed on the <literal>
          File</literal> menu of most applications, but for model 
          elements rather than files.</para>

          <para>The motivtion is the fact that designers frequently 
          <quote>interrupt</quote> themselves: they are thinking of 
          working on one part of the design, and then they make a 
          decision that needs a change in some other part, and then 
          that has an implication on some other part, and... and... and... 
          the designer forgets what it was they were originally trying 
          to accomplish. They need to <quote>pop their mental 
          stack</quote> to come back to finish what the started. If 
          they fail to do that, they leave half-finished fragments all 
          over the design which always seem to come out as soon as it 
          is presented to someone else.</para>

          <para>A recently visited list should be LIFO (stack) ordered, 
          or FIFO (queue) ordered. The goal would be to help designers 
          come back to finish what they were doing, or simply to help 
          them switch between two or three related parts of the design. 
          The <literal>Navigate Back</literal> and <literal>Navigate 
          Forward</literal> buttons in the toolbar serve the same basic 
          purpose and use a lot less screen space.</para>

          <para>Tear-off tabs would also help with alternating between 
          views, but sometimes users don&apos;t want to work with so 
          many separate windows.</para>

          <para>This is the theory that motivates the idea of multiple 
          nav panes. For more information see Jason Robbins&apos; PhD 
          dissertation 
          <ulink url="http://argouml.tigris.org/docs/robbins_dissertation/">
          http://argouml.tigris.org/docs/robbins_dissertation/</ulink>. 
          One practical usability concern is available screen space and 
          another is visual complexity. For this reason the multiple 
          panes have yet to be implemented in ArgoUML while more 
          pressing issues are addressed.</para>

        </sect2-->

      </sect1>

      <sect1>

        <title>Das kontextsensitive Menü</title>

        <para>
        	Ein Taste&nbsp;2-Klick über irgendeinem markierten Modellelement im 
        	Hauptbereich des Explorers veranlasst, dass ein Popup-Menü erscheint.
        </para>

        <sect2>
          <title>Erstelle neues</title>
          
          <para>
          	Dieser Eintrag im Popup-Menü öffnet ein Untermenü mit Einträgen für 
          	jeden Diagrammtyp.
          </para>
          <para>
          	Der Namensraum des neuen Diagrammes, wird auf dem markierten 
          	Modellelement basieren.
          </para>
        </sect2>

        <sect2>
          <title>Kopiere das Diagramm als Bild in die Zwischenablage</title>
          
          <para>
          	Dieser Eintrag im Popup-Menü erstellt eine grafische Datei im 
          	Standard-Grafikformat und bringt es in die Zwischenablage Ihres PC. 
          	Die Grafik kann unmittelbar darauf in z.B. ein Anforderungsdokument 
          	in OpenOffice.Org kopiert werden.
          </para>
          
          <para>
          	Das Grafikformat und seine Auflösung werden durch die 
          	Standardeinstellungen von ArgoUML bestimmt: Wählen Sie das Menü 
          	<literal>Bearbeiten</literal>, dann <literal>Einstellungen...
          	</literal> und dann das Register <literal>Umgebung</literal> aus.
          	Die PNG und GIF-Formate und die Auflösung <literal>Standard
          	</literal> werden empfohlen.
          </para>
          
          <tip>
          	<para>
          		Einige Anwendungen (wie z.B. Doors von Telelogic) erfordern es, 
          		dass die Hintergrundfarbe der generierten Grafik angepasst 
          		wird (es sei denn, das Bild ist leer). Dies kann mit einem Tool 
          		wie IrfanView durchgeführt werden; es ist genauso leicht wie 
          		das Klicken dessen Schaltfläche Einfügen und dann dessen 
          		Schaltfläche Kopieren.
          	</para>
          </tip>
        </sect2>
         
        <sect2>

          <title>Zum Diagramm hinzufügen</title>

          <para>
          	Dieser Eintrag im Popup-Menü erscheint bei jedem Modellelement, 
          	welches dem Diagramm im Editierfenster hinzugefügt werden kann.
          </para>

          <para>
          	Das Element kann in ein Diagramm durch Bewegen des Cursors in das 
          	Editierfenster oder ein gedoppeltes Editierfenster (wobei es als 
          	Kreuz erscheint) und klicken mit der Taste&nbsp;1 plaziert werden.
          </para>

          <caution>

            <para>
            	Dieser Menüeintrag erscheint nur dann als nicht deaktiviert, 
            	wenn es das Diagramm im Editierfenster erlaubt, das dieses 
            	Modellelement enthalten sein darf und das Modellelement sich 
            	nicht bereits in dem Diagramm befindet. ArgoUML läßt es nicht 
            	zu, dass Sie mehr als eine Kopie eines bestimmten Modellelementes 
            	in ein Diagramm plazieren.
            </para>

          </caution>

        </sect2>

        <sect2>

          <title>
          	<guiicon>
          		<inlinemediaobject>
          			<imageobject>
          				<imagedata align="center"
          					fileref="images/icons/delete_from_model.gif"
          					format="GIF" />
          			</imageobject>
          		</inlinemediaobject>
          	</guiicon>
          	Aus Modell entfernen
          </title>

          <para>
          	Dieser Eintrag im Popup-Menü erscheint bei jedem Modellelement, 
          	welches aus dem Modell gelöscht werden kann.
          </para>

          <warning>

            <para>
            	Dies löscht das Modellelement vollständig aus dem Modell, nicht 
            	nur aus dem Diagramm. Um das Modellelement nur aus dem Diagramm 
            	zu entfernen, benutzen Sie das Bearbeiten-Menü (siehe 
            	<xref linkend="s2.menu_edit_remove_from_diagram"/>).
            </para>

          </warning>

          <caution>

            <para>
            	Sie können ein Diagramm aus dem Modell entfernen. Je nach Typ 
            	des Diagrammes, kann das alle Modellelemente löschen, die in 
            	dem Diagramm angezeigt werden. Um die Unterschiede zu 
            	illustrieren, betrachten Sie die folgenden Beispiele:
            </para>

            <itemizedlist>

              <listitem>

                <para>
                	Das Löschen eines Klassendiagrammes löscht nicht jedes 
                	Modellelement, das darin angezeigt wird. Alle Modellelemente 
                	die im Diagramm angezeigt werden, bleiben im Modell erhalten.
                	Dies ist so, weil ein Klassendiagramm nicht auf jedes 
                	Modellelement entsprechend dem UML-Standard V1.4 &quot;
                	abgebildet&quot; wird.
                </para>

              </listitem>

              <listitem>

                <para>
                	Das Löschen eines Zustandsdiagrammes löscht auch den 
                	Zustandsautomaten, den es repräsentiert und behandelt auch 
                	alle Modellelemente des Zustandsautomaten auf die gleiche 
                	Weise. Dies ist so, weil ein Zustandsdiagramm entsprechend 
                	dem UML-Standard V1.4 nicht auf einen Zustandsautomaten 
                	&quot;abgebildet&quot; wird.
                </para>

              </listitem>

            </itemizedlist>

          </caution>

        </sect2>

        <sect2>

          <title>Einstellen des Quellpfades... (Noch zu beschreiben)</title>

          <para>Dieser Eintrag im Popup-Menü ...</para>

        </sect2>

        <sect2>

          <title>Paket hinzufügen</title>

          <para>
          	Dieser Eintrag im Popup-Menü ist verfügbar, wannimmer ein 
          	Modellelement markiert ist, das ein Paket enthalten darf, z.B. ein 
          	Paket. Nach dem Aktivieren dieses Menüs wird das Modellelement ein 
          	neues Paket enthalten.
          </para>

        </sect2>

        <sect2>

          <title>Neuer Stereotyp</title>

          <para>Dieser Eintrag im Popup-Menü ist verfügbar ...
          (Noch zu beschreiben)</para>

        </sect2>

        <sect2>

          <title>Alle Klassen im Namensraum hinzufügen</title>

          <para>
          	Dieser Eintrag im Popup-Menü ist nur bei Klassendiagrammen verfügbar. 
          	Das Aktivieren dieses Menüeintrages wird alle Klassen des aktuellen 
          	Namensraumes zum Diagramm hinzufügen. Sie werden in der oberen 
          	linken Ecke angeordnet; offensichtlich eine günstige Gelegenheit, 
          	die im Menü befindliche <quote>Anordnen-&gt;Layout</quote>-Funktion 
          	zu verwenden.
          </para>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.editpane">

      <title>Das Editierfenster</title>

      <sect1>

        <title>Einleitung</title>

        <para>
        	<xref linkend="fig.ref.editing_pane" />
        	zeigt das ArgoUML-Fenster mit dem hervorgehobenen Editierfenster.
        </para>

        <figure id="fig.ref.editing_pane">

          <title>Überblick über das Editierfenster</title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
          				fileref="images/reference/editing_pane.png" format="PNG" />
          		</imageobject>
          	</mediaobject>
          </screenshot>
        </figure>

        <para>
        	Darin werden alle Diagramme gezeichnet. In früheren Versionen von 
        	ArgoUML firmierte dieses Fenster unter verschiedenen Namen. Sie 
        	werden die Begriffe <quote>Zeichenfenster</quote>, <quote>
        	Diagrammfenster</quote> oder <quote>Multi-Editorfenster</quote> in 
        	anderen, noch nicht aktualisierten Dokumentationen vorfinden.
        </para>

        <para>
        	Das Fenster hat oben eine Werkzeugleiste und unten ein einziges 
        	mit <literal>Als Diagramm</literal> beschriftetes Register, das in 
        	Version 0.20 von ArgoUML keine Funktion hat. Der Hauptbereich zeigt 
        	das aktuell ausgewählte Diagramm, dessen Name in der Titelzeile des 
        	Fensters angezeigt wird.
        </para>

      </sect1>

      <sect1 id="s1.ref.edit_mouse">

        <title>Das Verhalten der Maus im Editierfenster</title>

        <para>
        	Das generelle Verhalten der Maus und die Benennung der Tasten ist 
        	im Kapitel Überblick über die Anwenderschnittstelle ausgeführt (
        	siehe <xref linkend="ch.ref.ui"/>).
		</para>

        <sect2>

          <title>Taste&nbsp;1-Klick</title>

          <para>
          	In der Werkzeugleiste des Editierfensters wird der Taste&nbsp;1-Klick 
          	dazu verwendet, ein Werkzeug für das Erstellen eines neuen 
          	Modellelementes auszuwählen und dieses dem Diagramm hinzuzufügen (
          	siehe Doppelklicken zum Erstellen mehrerer Modellelemente). Das 
          	Hinzufügen eines neuen Modellelementes zum Diagramm wird bei den 
          	meisten Werkzeugen durch bewegen der Maus in den Editierbereich und 
          	erneutes klicken bewerkstelligt.
          </para>

          <para>
          	Im Haupteditierbereich wird der Taste&nbsp;1-Klick dazu verwendet, 
          	ein individuelles Modellelement zu markieren.
          </para>

          <para>
          	Viele Modellelemente (z.B. Akteur, Klasse) zeigen spezielle 
          	Verhaltensweisen, wenn sie markiert sind und die Maus darüber fährt. 
          	Diese werden <quote>Auswahl-Aktionsschaltflächen</quote> genannt, 
          	siehe <xref linkend="s1.ref.edit_pane_selection_action_buttons"/>.
          	Sie erscheinen an den Seiten, oben und unten und geben einen 
          	Beziehungstyp an. Klicken auf eine Auswahl-Aktionsschaltfläche 
          	erstellt eine neues Modellelement mit einer Beziehung des angezeigten 
          	Typs. Wenn die Umschalttaste gedrückt ist, wenn die Maus über ein 
          	markiertes Modellelement fährt, werden manchmal unterschiedliche 
          	Griffe angezeigt. Sie stehen für unterschiedliche Beziehungstypen. 
          </para>

          <para>
          	Wo der Taste&nbsp;2-Klick verwendet wurde, um ein kontextsensitives 
          	Popup-Menü zu öffnen (siehe unten), wird der Taste&nbsp;1-Klick 
          	dazu verwendet, den gewünschten Menüeintrag auszuwählen. Das 
          	Popup-Menü wird durch einen beliebigen Taste&nbsp;1-Klick ausserhalb 
          	des Menübereiches entfernt.
          </para>

          <para>
          	Es gibt verschiedene noch detailliertere Effekte, die in den 
          	Beschreibungen der verschiedenen Werkzeuge diskutiert werden (siehe 
	        <xref linkend="s1.ref.edit_pane_tool_bar"/>).
          </para>

        </sect2>

        <sect2 id="s2.ref.edit_button1_double_click">

          <title>Taste&nbsp;1-Doppelklick</title>

          <para>
          	Wenn dies in der Werkzeugleiste mit einem Werkzeug zum Hinzufügen 
          	eines Modellelementes verwendet wird, wird das markierte 
          	Modellelement dem Zeichenbereich mehrmals hinzugefügt. Einmal für 
          	jeden weiteren Tastenklick, bis das Werkzeug erneut markiert oder 
          	ein anderes Werkzeug ausgewählt wird.
          </para>

          <para>
          	Wenn er innerhalb des Zeichenbereiches auf einem Modellelement mit 
          	Subkomponenten verwendet wird, wird der Doppelklick die Subkomponente 
          	zum Editieren auswählen (wenn notwendig, wird eine erstellt).
          </para>

          <para>
          	Das Doppelklicken über einem Operationsbereich einer Klasse wird 
          	die Operation auswählen. Oder eine erstellen, sofern noch keine 
          	vorhanden ist.
          </para>

          <para>
          	Eine spezielle Anwendung gibt es mit Paket-Modellelementen im 
          	Klassendiagramm. Ein Doppelklick auf ein Paket bringt Sie zu dem 
          	mit einem Paket verknüpften Klassendiagramm (das erste wird erstellt, 
          	wenn es mehr als eines gibt) oder bietet Ihnen an, eines für Sie zu 
          	erstellen, wenn keines vorhanden ist. Siehe 
          	<xref linkend="fig.ref.edit_add_class_diagram"/>
          </para>

          <figure id="fig.ref.edit_add_class_diagram">

            <title>
            	Der Dialog für das Hinzufügen eines neuen
            	Klassendiagrammes
            </title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/edit_add_class_diagram.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

        </sect2>

        <sect2>

          <title>Taste&nbsp;1-Bewegung</title>

          <!-- This has never worked AFAIK!
          <para>When adding a model element using the toolbar, button&nbsp;1 
          motion can generally be used to define the size of the new 
          model element. Its dimensions (line ends, diagonal corners of a 
          rectangular model element etc) are defined by button&nbsp;1 down and 
          button&nbsp;1 up.</para>
          -->

          <para>
          	Wo das Modellelement hinzugefügt wurde, wird mit dem Taste&nbsp;1-
          	Klick über dem abschliessenden Modellelement eine besondere Form 
          	eines Verbinders mit seinem Endpunkt angezeigt. Der Taste&nbsp;1-
          	Klick darf auch im Raum zwischen den Modellelementen verwendet 
          	werden, um Verbindungspunkte an einem Verbinder zu erstellen. 
          	Dies ist immer dann nützlich, wo Verbinder auf sich selbst erstellt 
          	werden müssen.
          </para>

          <para>
          	Über grafischen Modellelementen wird die Taste&nbsp;1-Bewegung 
          	das Modellelement an eine neue Position bewegen.
          </para>

          <para>
          	Grafische, markierte Modellelemente zeigen Griffe an den Ecken oder 
          	Enden an. Diese können für Größenänderungen verwendet werden.
          </para>

          <para>
          	Einige Modellelemente (z.B. Akteur, Klasse) zeigen spezielle Griffe 
          	(<quote>Auswahl-Aktionsschaltflächen</quote>, siehe 
          	<xref linkend="s1.ref.edit_pane_selection_action_buttons"/>) 
          	an den Seiten, oben und unten an, die gezogen werden können, um 
          	Beziehungstypen zwischen anderen Modellelementen zu bilden.
          </para>

          <para>
          	Wo das Modellelement eine Form von Verbinder zwischen anderen 
          	Elementen ist, verursacht die Taste&nbsp;1-Bewegung neben den Griffen 
          	die Erstellung eines neuen Griffes, der es dem Verbinder erlaubt, 
          	sich mit diesem Punkt zu verbinden. Dies funktioniert nur, wenn die 
          	verbindende Linie nicht gerade rechtwinklig ist. Solche neuen Griffe 
          	können durch das Bewegen auf das Ende des Verbinders entfernt werden.
          </para>

          <para>
          	Es gibt verschiedene noch detailliertere Effekt, die in den 
          	Beschreibungen der verschiedenen Werkzeuge diskutiert werden (siehe 
          	<xref linkend="s1.ref.edit_pane_tool_bar"/>).
          </para>

        </sect2>

        <sect2>

          <title>Umschalt- und Strg-Taste und die Taste&nbsp;1</title>

          <para>
          	Wo mehrere Markierungen zu erstellen sind, wird die Strg-Taste mit 
          	der Taste&nbsp;1 verwendet, um unmarkierte Modellelemente den 
          	aktuell markierten <emphasis>hinzuzufügen</emphasis>. Wo ein 
          	Modellelement bereits markiert ist, wird es aus der aktuellen 
          	Markierung entfernt.
          </para>

          <para>
          	Klicken auf die Taste&nbsp;1 während die Umschalttaste gedrückt ist, 
          	aktiviert das Werkzeug Besen. Dieses veranlasst, dass die markierten 
          	Modellelemente (und alles andere mitbewegt wird) durch den Besen 
          	verschoben wird (siehe <xref linkend="s2.ref.edit_layout"/>).
		  </para>

        </sect2>

        <sect2>

          <title>Alt Gr mit Taste&nbsp;1-Bewegung</title>

          <para>
          	Das Drücken der Taste&nbsp;1 im Diagramm, während die "ALT Gr"-Taste 
          	gedrückt ist, erlaubt es, die Leinwand mit der Taste&nbsp;1-
          	Bewegung in alle Richtungen zu scrollen.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Aktionen</title>

          <para>
          	Wenn sie über Modellelementen im Editierfenster verwendet wird, wird 
          	ein kontextabhäniges Popup-Menü erscheinen. Die Menüeinträge sind 
          	aktiviert (aber nicht ausgewählt) und die Untermenüs werden durch 
          	die fortgesetzte Mausbewegung aufgeblendet (ohne irgend eine Taste). 
          	Die Menüeinträge werden mit Taste&nbsp;1 oder Taste&nbsp;2 ausgewählt. 
          	Details über die spezifischen Popup-Menüs siehe 
          	<xref linkend="s1.ref.edit_pane_pop_up"/>.
          </para>

          <para>
          	Für den Fall, dass mehrere Elemente markiert sind, erscheint das 
          	Popup-Menü nur, wenn alle Elemente von der gleichen Art sind. In 
          	diesem Fall, wirken die Funktionen auf alle markierten Elemente.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Doppelklick</title>

          <para>
          	Dies hat keinen anderen Effekt als der einfache Taste&nbsp;2-Klick.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Bewegung</title>

          <para>
          	Sie wird verwendet, um Elemente in einem mit Hilfe eines 
          	Taste&nbsp;2-Klicks geöffneten kontextsensitiven Menü zu markieren.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.edit_pane_keyboard">

        <title>Das Verhalten der Tastatur im Editierfenster</title>

        <para>
        	Viele Tastenkürzel können verwendet werden, wenn das Editierfenster 
        	aktiv ist. Hauptsächlich, um die Markierung zu ändern oder sich 
        	durch die Modellelemente zu bewegen.
        </para>

        <sect2>

          <title>Schrittweises bewegen eines Modellelementes</title>

          <para>
          	Sie können ein Gebilde durch das markieren eines Elementes und die 
          	Verwendung der Pfeiltasten schrittweise bewegen. Das gedrückt 
          	halten der Umschalt- oder Alt-Taste wird eine grössere Bewegung 
          	produzieren.
          </para>

        </sect2>

        <sect2>

          <title>Durch die Modellelemente bewegen</title>

          <para>
          	Sie können das dem markierten am nächsten stehende Modellelement 
          	markieren, indem Sie die Pfeiltasten verwenden, während Sie die 
          	rechte Maustaste anklicken. Sie können auch das nächste Modellelement 
          	mit Hilfe der Tab-Taste markieren oder das vorhergehende mit Hilfe 
          	der Strg+Tab-Tasten.
          </para>

        </sect2>

      </sect1>
      
      <sect1 id="s1.ref.edit_pane_tool_bar">

        <title>Die Werkzeugleiste</title>

        <para>
        	Die Werkzeugleiste im oberen Bereich des Editierfensters enthält die 
        	Hauptfunktionen des Fensters. Das Standardwerkzeug ist das <literal>
        	Auswahl</literal>-Werkzeug (
        	<guiicon>
        		<inlinemediaobject>
        			<imageobject>
        				<imagedata align="center"
        					fileref="images/icons/select.gif" format="GIF" />
        			</imageobject>
        		</inlinemediaobject>
        	</guiicon>).
        	Generell wählt ein Taste&nbsp;1-Klick auf irgendein Werkzeug dieses 
        	für die einmalige Verwendung aus, bevor es zum Standardwerkzeug 
        	zurückkehrt. Und ein Taste&nbsp;1-Doppelklick wählt ein Werkzeug für 
        	die wiederholte Nutzung aus.  
        </para>

        <para>Die Werkzeuge fallen in vier Kategorien.</para>

        <itemizedlist>

          <listitem>

            <para>
            	<emphasis>Layout-Werkzeuge.</emphasis>
            	Geben Unterstützung bei der Anordnung der Modellelemente im 
            	Diagramm.
            </para>

          </listitem>

          <listitem>

            <para>
            	<emphasis>Kommentierungswerkzeuge.</emphasis>
            	Werden zum Kommentieren von Modellelementen im Diagramm verwendet.
            </para>

          </listitem>

          <listitem>

            <para>
            	<emphasis>Zeichen-Werkzeuge.</emphasis>
            	Werden zum Hinzufügen grafischer Objekte in Diagrammen verwendet.
            </para>

          </listitem>

          <listitem>

            <para>
            	<emphasis>Diagrammspezifische Werkzeuge.</emphasis>
            	Werden zum Hinzufügen von diagrammspezifischen 
            	UML-Modellelementen in das Diagramm verwendet.
            </para>

          </listitem>

        </itemizedlist>
        
        <para>
        	Einige Werkzeuge, die normalerweise nicht so oft verwendet werden, 
        	sind in ein Pulldown-Menü aufgenommen worden, damit sie in der 
        	Werkzeugleiste weniger Platz beanspruchen. Siehe z.B. 
			<xref linkend="fig.ref.edit_graphical_tools"/>.
			Das Drücken des Symboles auf der rechten Seite des Werkzeuges öffnet 
			das Pulldown-Menü. Diese Pulldown-Werkzeuge erinnern sich dauerhaft, 
			welches Werkzeug zuletzt verwendet wurde. Das heißt, wenn ArgoUML 
			startet zeigen sie das zuletzt aktivierte Werkzeug an.
        </para>

        <sect2 id="s2.ref.edit_layout">

          <title>Layout-Werkzeuges</title>

          <para>
          	Die folgenden beiden Werkzeuge werden in allen Diagrammen dieser 
          	Kategorie vorausgesetzt.
          </para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/select.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Auswählen</literal>. 
	              Dieses Werkzeug sorgt für die generelle Auswahl von 
	              Modellelementen im Diagramm. Der Taste&nbsp;1-Klick wird ein 
	              Modellelement markieren. Strg und die Taste&nbsp;1 kann dazu 
	              verwendet werden, mehrere Modellelemente zu markieren (oder 
	              die Markierung aufzuheben). Die Taste&nbsp;1-Bewegung wird 
	              markierte 2D-Elemente bewegen oder hinzufügen und bewegen 
	              eines neuen Griffes auf einer Verknüpfung. Die 
	              Taste&nbsp;1-Bewegung auf einem markierten Griff einer 
	              Komponente wird die Form der Komponente dehnen. 
			  </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/broom.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <emphasis>Besen</emphasis>. Die Taste&nbsp;1-Bewegung mit 
	              diesem Werkzeug liefert einen <quote>Besen</quote>, 
	              der alle Modellelemente mitnimmt. Dies ist ein sehr schneller 
	              Weg, Dinge auszurichten. 
              </para>

              <para>
              	Der Besen kann auch durch die Umschalttaste mit der 
              	Taste&nbsp;1-Bewegung ausgelöst werden, wenn das Werkzeug 
              	<literal>Auswählen</literal> aktiv ist.
              </para>

              <para>
              	Der Besen wird ausführlich in seinem eigenen Kapitel diskutiert, 
              	siehe <xref linkend="s1.ref.edit_pane_broom"/>
              </para>

            </listitem>

          </itemizedlist>

          <tip>

            <para>
            	Zusätzliche Beeinflussungsmöglichkeiten des Modellelementelayout 
            	sind über das Menü <literal>Anordnen</literal> verfügbar (siehe  
            	<xref linkend="s1.ref.menu_arrange"/>).
            </para>

          </tip>

        </sect2>

        <sect2>

          <title>Kommentierungs-Werkzeug</title>

          <para>
          	  Das Kommentierungs-Werkzeug <literal>Kommentar</literal> (
	          <guiicon>
	          	<inlinemediaobject>
	          		<imageobject>
	          			<imagedata align="center"
	          				fileref="images/icons/note.gif" format="GIF" />
	          		</imageobject>
	          	</inlinemediaobject>
	          </guiicon>)
	          wird dazu verwendt, einen Kommentar zu einem markierten UML-
	          Modellelement hinzuzufügen. 
          </para>

          <caution>

            <para>
            	Wie bei den meisten anderen Werkzeugen verwenden Sie das 
            	Werkzeug <literal>Auswählen</literal>, um ein Modellelement zu 
            	markieren und dann den Taste&nbsp;1-Klick auf <literal>Kommentar
            	</literal>, um einen Kommentar zu erstellen. Wenn kein Element 
            	markiert ist, wenn das Werkzeug Kommentar angeklickt wird, dann 
            	wird der Kommetar erstellt und in die linke obere Ecke plaziert.
            </para>

          </caution>

          <para>
          	Der Kommetar wird neben dem markierten Modellelement erstellt und 
          	ist standardmäßig leer. Die Texteingabe kann mit einem Taste&nbsp;1-
          	Doppelklick aktiviert und der Text anschliessend mit Hilfe 
          	der Tastatur eingegeben werden.
          </para>

          <para>
          	Der UML-Standard erlaubt es, Kommentare zu jedem Modellelement 
          	hinzuzufügen.
          </para>

          <para>
          	Sie können jeden Kommentar mit weiteren Elementen mit Hilfe des 
          	Werkzeuges <literal>Neue Kommentar-Verknüpfung</literal> (
	          <guiicon>
	          	<inlinemediaobject>
	          		<imageobject>
	          			<imagedata align="center"
	          				fileref="images/icons/commentlink.gif" format="GIF" />
	          		</imageobject>
	          	</inlinemediaobject>
	          </guiicon>) 
          	verbinden.
          </para>

        </sect2>

        <sect2 id="s2.ref.edit_pane_drawing_tools">

          <title>Zeichen-Werkzeuge</title>

          <para>
          	Dies sind eine Reihe von Werkzeugen, die grafische Zusätze zu 
          	Diagrammen liefern. Obwohl sie keine UML-Modellelemente sind, erlaubt 
          	der UML-Standard solche Ausschmückungen, um die Lesbarkeit der 
          	Diagramme zu verbessern.
          </para>

          <tip>

            <para>
            	Diese Zeichen-Werkzeuge stellen einen nützlichen Weg dar, 
            	einige der in der aktuellen Release von ArgoUML fehlenden 
            	UML-Eigenschaften (wie z.B. generelle Zweck-Hinweise )teilweise 
            	zu unterstützen.
            </para>

          </tip>

          <para>
          	Acht Werkzeuge sind vorhanden, alle in einem Pulldown-Menü gruppiert. 
          	Siehe <xref linkend="fig.ref.edit_graphical_tools"/>. Ein 
          	Taste&nbsp;1-Klick auf das Diagramm wird eine Instanz des grafischen 
          	Elementes in der gleichen Größe wie das letzte plazieren. Die 
          	Größe kann durch eine Taste&nbsp;1-Bewegung während des Plazierens 
          	eingestellt werden. Eine Seite oder Ende des Elementes wird durch 
          	Taste&nbsp;1-gedrückt die andere Seite oder Ende durch Taste&nbsp;1-
          	loslassen beeinflusst. Nachdem sie im Diagramm plaziert wurden, 
          	können die grafischen Elemente mit dem Werkzeug <literal>Auswählen
          	</literal> und der Taste&nbsp;1 verschoben und in der Größe durch 
          	eine Taste&nbsp;1-Bewegung über die Griffe nach dem markieren 
          	verändert werden.
          </para>

          <figure id="fig.ref.edit_graphical_tools">

            <title>Die Zeichen-Werkzeuge auswählen.</title>

            <screenshot>
            	<mediaobject>
            		<imageobject>
            			<imagedata align="center"
            				fileref="images/reference/edit_graphical_tools.png"
            				format="PNG" />
            		</imageobject>
            	</mediaobject>
            </screenshot>
          </figure>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/rectangle.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
              	<literal>Rechteck</literal>. Erzeugt ein Rechteck.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/rounded_rectangle.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Abgerundetes Rechteck</literal>. Erzeugt ein Rechteck 
	              mit abgerundeten Ecken. Der Grad der Rundung kann nicht 
	              eingestellt werden. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/circle.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Kreis</literal>. Erzeugt einen Kreis.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/line.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Gerade</literal>. Erzeugt eine Gerade.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/text.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Text</literal>. Erzeugt ein Textfeld. Der Text wird 
	              durch markieren des Feldes und schreiben eingegeben. Der 
	              Text wird nach der Eingabe horizontal zentriert. Das Feld 
	              passt sich an die Größe des Textes an. Es kann jedoch in der 
	              Größe durch ziehen an den Ecken verändert werden.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/polygon.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Polygon</literal>. Erzeugt ein Polygon. Die Punkte 
	              des Polygons werden durch Taste&nbsp;1-Klicks markiert. Das 
	              Polygon wird durch einen Taste&nbsp;1-Doppelklick 
	              abgeschlossen (dies verbindet den letzten mit dem ersten 
	              Punkt).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/spline.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Segmentierte Linie</literal>. Erzeugt eine 
	              segmentierte Linie. Die Punkte der segmentierten Linie werden 
	              mit Taste&nbsp;1-Klicks markiert und der letzte Punkt mit 
	              einem Taste&nbsp;1-Doppelklick ausgewählt.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/ink.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Punktierte Linie</literal>. Erzeugt eine punktierte 
	              Linie. Die Punkte werden durch eine Taste&nbsp;1-Bewegung 
	              erzeugt. 
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Anwendungsfalldiagrammspezifische Werkzeuge</title>

          <para>
          	Verschiedene Werkzeuge sind speziell für UML-Modellelemente in 
          	Anwendungsfalldiagrammen vorhanden. Die detaillierten Eigenschaften 
          	dieser Modellelemente sind im Abschnitt über Modellelemente von 
          	Anwendungsfalldiagrammen beschrieben (siehe 
			<xref linkend="ch.ref.entusecase"/>).
		  </para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/actor.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Akteur</literal>. Für dem Diagramm einen Akteur 
	              hinzu. Wenn sich die Maus über einem markierten Akteur 
	              befindet, werden aus Gründen des Komforts links und rechts 
	              zwei Griffe angezeigt, die gezogen werden können, um 
	              Assoziationsbeziehungen herzustellen.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/use_case.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Anwendungsfall</literal>. Fügt dem Diagramm einen 
	              Anwendungsfall hinzu. Wenn sich die Maus über einem markierten 
				  Anwendungsfall befindet, werden aus Gründen des Komforts links 
				  und rechts zwei Griffe angezeigt, die gezogen werden können, 
				  um Assoziationsbeziehungen herzustellen und zwei Griffe oben 
				  und unten, die gezogen werden können, um Generalisierungen und 
				  Spezialisierungen herzustellen.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/association_plain.gif"
	             				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Assoziation</literal>. Fügt zwischen zwei 
	              Modellelementen eine Assoziation mit Hilfe einer Taste&nbsp;1-
	              Bewegung ein (vom ersten bis zum zweiten Modellelement). Es 
	              werden hier 6 Assoziationstypen angeboten, siehe 
	              <xref linkend="fig.ref.edit_association_tools"/>: 
	              <literal>Assoziation</literal>, <literal>
	              Aggregation</literal> und <literal>Komposition</literal>, 
	              und all diese drei können <literal>
	              bidirektional</literal> oder <literal>
	              unidirektional</literal> sein.
              </para>

              <figure id="fig.ref.edit_association_tools">

                <title>Die Assoziations-Werkzeuge auswählen.</title>

                <screenshot>
                	<mediaobject>
                		<imageobject>
                			<imagedata align="center"
                				fileref="images/reference/edit_association_tools.png"
                				format="PNG" />
                		</imageobject>
                	</mediaobject>
                </screenshot>
              </figure>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/dependency.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Abhängigkeit</literal>. Fügt eine Abhängigkeit 
	              zwischen zwei Modellelementen mit Hilfe der Taste&nbsp;1-
	              Bewegung ein (vom abhängigen Modellelement).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/generalization.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Generalisierung</literal>. Fügt eine Generalisierung 
	              zwischen zwei Modellelementen mit Hilfe der Taste&nbsp;1-
	              Bewegung ein (vom Kind zu den Eltern).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/extend.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Extend</literal>. Fügt eine Extend-Beziehung 
	              zwischen zwei Modellelementen mit Hilfe der Taste&nbsp;1-
	              Bewegung ein (vom erweiterten zum zu erweiternden 
	              Anwendungsfall). 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/include.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Include</literal>. Fügt eine Include-Beziehung  
	              zwischen zwei Modellelementen mit Hilfe der Taste&nbsp;1-
	              Bewegung ein (vom einschliessenden zum eingeschlossenen 
	              Anwendungsfall). 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/extension_point.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Erweiterungspunkt hinzufügen</literal>. Einen 
	              Erweiterungspunkt zu einem markierten Anwendungsfall 
	              hinzufügen. Dem Erweiterungspunkt wird der Standardname 
	              <literal>neuerEP</literal> gegeben und der Ort <literal>ort
	              </literal>. Wo ein Erweiterungspunktbereich angezeigt wird, 
	              kann der Erweiterungspunkt mit Hilfe eines Taste&nbsp;1-
	              Doppelklicks und der Tastatur, oder durch markieren mit einem 
	              Taste&nbsp;1-Klick (nachdem der Anwendungsfall markiert wurde) 
	              und Verwendung des Registers Eigenschaften editiert werden. 
	              Ansonsten kann es über sein Register Eigenschaften editiert 
	              werden, welches über das Register Eigenschaften des 
	              besitzenden Anwendungsfalles ausgewählt wird.
              </para>

              <note>

                <para>
                	Dieses Werkzeug ist deaktiviert, es sei denn, ein 
                	Anwendungsfall ist markiert.
                </para>

              </note>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Klassendiagrammspezifische Werkzeuge</title>

          <para>
          	Einige Werkzeuge sind speziell für UML-Modellelemente in 
          	Klassendiagrammen gedacht. Die detaillierten Eigenschaften dieser 
          	Modellelemente sind im Abschnitt über Klassendiagramm-Modellelemente 
          	beschrieben (siehe <xref linkend="ch.ref.entclass"/>).
          </para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/package.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Paket</literal>. Fügt dem Diagramm ein Paket hinzu.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/class.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Klasse</literal>. Fügt dem Diagramm eine Klasse hinzu. 
	              Wenn sich die Maus über einer markierten Klasse befindet, 
	              werden links und rechts zwei Griffe angezeigt, die angeklickt 
	              oder gezogen werden können, um eine Assoziations-Beziehung 
	              herzustellen (oder eine Komposition, sofern die Umschalt-Taste 
	              gedrückt wurde) und oben und unten zwei Griffe, die angeklickt 
	              oder gezogen werden können, um eine Generalisierungs- und 
	              Spezialisierungs-Beziehung herzustellen.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/association_plain.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Assoziation</literal>. Fügt zwischen zwei 
	              Modellelemente mit Hilfe einer Taste&nbsp;1-Bewegung eine 
	              Assoziation ein (vom ersten Modellelement zum zweiten). Es 
	              werden hier 2 Typen von Assoziationen angeboten, die 
	              <literal>bidirektionale</literal> oder die <literal>
	              unidirektionale</literal>.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/aggregation_plain.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Aggregation</literal>. Fügt zwischen zwei 
	              Modellelemente mit Hilfe einer Taste&nbsp;1-Bewegung eine 
	              Aggregation ein (vom ersten Modellelement zum zweiten). Es 
	              werden hier 2 Typen von Aggregationen angeboten, die 
	              <literal>bidirektionale</literal> oder die <literal>
	              unidirektionale</literal>.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/composition_plain.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Komposition</literal>. Fügt zwischen zwei 
	              Modellelemente mit Hilfe einer Taste&nbsp;1-Bewegung eine 
	              Komposition ein (vom ersten Modellelement zum zweiten). Es 
	              werden hier 2 Typen von Kompositionen angeboten, die 
	              <literal>bidirektionale</literal> oder die <literal>
	              unidirektionale</literal>.

              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/association_end.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Assoziationsende</literal>. Fügt mit Hilfe der 
	              Taste&nbsp;1 ein anderes Ende zu einer bereits existierenden 
	              Assoziation ein (von der Assoziation einer Klasse, oder 
	              umgekehrt). Auf diesem Weg werden sogenannte N-wertige 
	              Assoziationen erstellt. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/generalization.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Generalisierung</literal>. Fügt mit Hilfe der 
	              Taste&nbsp;1 zwischen zwei Modellelementen eine Generalisierung 
	              ein (vom Kind zum Vater). 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/interface.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Schnittstelle</literal>. Fügt in das Diagramm eine 
	              Schnittstelle ein. Wenn sich die Maus über einer markierten 
	              Schnittstelle befindet, wird unten ein Griff angezeigt, der 
	              gezogen werden kann, um eine Realisierungs-Beziehung 
	              herzustellen (das Ziel wird die zu realisierende Klasse). 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/realization.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Realisierung</literal>. Fügt eine Realisierung mit 
	              Hilfe einer Taste&nbsp;1-Bewegung zwischen eine Klasse und 
	              einer Schnittstelle ein (von der realisierenden Klasse zur 
	              realisierten Schnittstelle).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/dependency.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Abhängigkeit</literal>. Fügt eine Abhängigkeit mit 
	              Hilfe einer Taste&nbsp;1-Bewegung  zwischen zwei 
	              Modellelementen ein (vom abhängigen Modellelement). Es werden 
	              hier auch 2 spezielle Typen von Abhängigkeiten angeboten, 
	              <literal>Erlaubnis</literal>
	              Add a dependency between 
	              two model elements selected using button&nbsp;1 motion (from the 
	              dependent model element). There are also 2 special types of 
	              dependency offered here, <literal>Permission</literal> (
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/permission.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>) 
	              und <literal>Verwendung</literal> (
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/usage.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>).
	              Eine <literal>Erlaubnis</literal> wird standardmäßig mit dem 
	              Stereotyp <literal>Import</literal> erstellt und wird 
	              verwendet, um Elemente von einem Paket in ein anderes zu 
	              importieren.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/attribute.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Attribut</literal>. Fügt ein Attribut zu der aktuell 
	              markierten Klasse hinzu. Das Attribut erhält den Standardnamen 
	              <literal>neuesAttr</literal> vom Typ <literal>int</literal> 
	              und kann durch einen Taste&nbsp;1-Doppelklick und der Tastatur 
	              editiert werden oder durch auswählen mit einem Taste&nbsp;1-
	              Klick (nachdem die Klasse markiert wurde) und anschliessender 
	              Nutzung des Registers Eigenschaften.
              </para>

              <note>

                <para>
                	Dieses Werkzeug ist deaktiviert, außer wenn eine Klasse 
                	markiert ist.
                </para>

              </note>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/operation.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Operation</literal>. Fügt der aktuell markierten 
	              Klasse oder Schnittstelle eine Operation hinzu. Die Operation 
	              erhält den Standardnamen <literal>neueOperation</literal> ohne 
	              Argumente und dem Rückgabewert <literal>void</literal> und 
	              kann mit Hilfe eines Taste&nbsp;1-Doppelklicks und der 
	              Tastatur editiert werden, oder durch auswählen mit einem 
	              Taste&nbsp;1-Klick (nachdem die Klasse markiert wurde) und der 
	              Nutzung des Registers Eigenschaften.
              </para>

              <note>

                <para>
                	Dieses Werkzeug ist deaktiviert, es sei denn, eine Klasse 
                	oder eine Schnittstelle ist markiert.
                </para>

              </note>

            </listitem>
            
            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/associationclass.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Assoziationsklasse</literal>. Fügt eine neue 
	              Assoziationsklasse mit Hilfe einer Taste&nbsp;1-Bewegung 
	              zwischen zwei Modellelemente ein (vom ersten Modellelement 
	              zum zweiten).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/datatype.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Datentyp</literal>. Fügt in das Diagramm einen 
	              Datentyp ein. Wenn sich eine Maus über einem markierten 
	              Datentyp befindet werden oben und unten Griffe angezeigt, die 
	              angeklickt oder gezogen werden können, um eine 
	              Generalisierungs-Beziehung herzustellen (das Ziel kann ein 
	              anderer Datentyp sein). Es sind hier 2 andere Elemente 
	              verfügbar, 
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/enumeration.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon> 
	              <literal>Aufzählung</literal>
	              und
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/stereotype.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon> 
	              <literal>Stereotyp</literal>.
	              Diese haben identische Griffe, außer dem oben an einem 
	              Stereotyp  befindlichen: wenn er angeklickt wird, erstellt er 
	              eine Metaklasse, die über eine mit &laquo;stereotype&raquo; 
	              markierte Abhängigkeit verknüpft ist. Dies erleichtert die 
	              Erstellung von "Stereotyp-Deklarations"-Diagrammen - näheres 
	              entnehmen Sie bitte der Literatur.
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Sequenzdiagrammspezifische Werkzeuge</title>

          <para>
          	Sieben Werkzeuge sind speziell für UML-Modellelemente in 
          	Sequenzdiagrammen vorhanden. Die detaillierten Eigenschaften dieser 
          	Modellelemente sind im Abschnitt über Sequenzdiagramm-Modellelemente 
          	beschrieben (siehe <xref linkend="ch.ref.entseq"/>).
		  </para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/classifierrole_sd.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Klassifizierte Rolle</literal>. Fügt dem Diagramm 
	              eine klassifizierte Rolle hinzu. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/call_action.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Nachricht mit Aufruf einer Aktion</literal>. Fügt 
	              eine Aufruf-Nachricht zwischen zwei klassifizierten Rollen 
	              mit Hilfe einer Taste&nbsp;1-Bewegung ein (von der 
	              verursachenden klassifizierten Rolle zur empfangenden 
	              klassifizierten Rolle).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/return_action.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Nachricht mit Antwort-Aktion</literal>. Fügt eine 
	              Antwort-Nachricht mit Hilfe einer Taste&nbsp;1-Bewegung 
	              zwischen zwei klassifizierten Rollen ein (von der 
	              verursachenden klassifizierten Rolle zur empfangenden 
	              klassifizierten Rolle).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/create_action.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Nachricht mit einer Erzeugen-Aktion</literal>. Fügt 
	              eine Erzeugungs-Nachricht mit Hilfe einer Taste&nbsp;1-Bewegung 
	              zwischen zwei klassifizierten Rollen ein (von der 
	              verursachenden klassifizierten Rolle zur empfangenden 
	              klassifizierten Rolle).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/destroy_action.gif"
	              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Nachricht mit Destruktions-Aktion</literal>. Fügt eine 
              Destruktions-Nachricht mit Hilfe einer Taste&nbsp;1-Bewegung 
              zwischen zwei klassifizierten Rollen ein (von der verursachenden 
              klassifizierten Rolle zur empfangenden klassifizierten Rolle).
              </para>

            </listitem>

            <listitem>

              <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/sequence_expand.gif"
              				format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>Vertikalen Zwischenraum in Diagramm einfügen</literal>. 
              Fügen Sie vertikalen Zwischenraum in ein Diagramm ein, indem Sie 
              alle nachfolgenden Nachrichten nach unten 
              verschieben. Klicken Sie mit der Maus auf den Punkt, wo Sie den 
              Zwischenraum einfügen wollen und ziehen Sie auf dem Bildschirm 
              vertikal um den Abstand nach unten, der der Höhe des gewünschten 
              hinzuzufügenden Zwischenraumes entspricht.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/sequence_contract.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Vertikalen Zwischenraum im Diagramm entfernen
	              </literal>. Entfernt den vertikalen Zwischenraum im Diagramm 
	              und bewegt alle nachfolgenden Elemente vertikal nach oben. 
	              Klicken und ziehen Sie die Maus vertikal über den Zwischenraum, 
	              den Sie löschen wollen.
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Kollaborationsdiagrammspezifische Werkzeuge</title>

          <para>
          	Drei Werkzeuge sind speziell für UML-Modellelemente in 
          	Kollaborationsdiagrammen vorhanden. Die detaillierten Eigenschaften 
          	dieser Modellelemente sind im Abschnitt über Kollaborationsdiagramm-
          	Modellelemente beschrieben (siehe <xref linkend="ch.ref.entcollab"/>
          	).
          </para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/classifier_role.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Klassifizierte Rolle</literal>. Fügt dem Diagramm 
	              eine klassifizierte Rolle hinzu.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/association_plain.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Assoziation</literal>. Fügt eine 
	              Assoziation mit Hilfe einer Taste&nbsp;1-Bewegung 
	              zwischen zwei klassifizierten Rollen ein (von der 
	              verursachenden Rolle zur empfangenden Rolle). Es werden hier 
	              6 Typen von Assoziationen angeboten, siehe 
	              <xref linkend="fig.ref.edit_association_tools"/>: 
	              <literal>Assoziation</literal>, <literal>
	              Aggregation</literal> und <literal>Komposition</literal>, 
	              und all diese drei können <literal>
	              bidirektional</literal> oderr <literal>
	              unidirektional</literal> sein.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/generalization.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Generalisierung</literal>. Fügt eine Generalisierung 
	              zwischen zwei Modellelementen ein, die mit der Taste&nbsp;1 
	              markiert wurden (von Kind zum Vater).
              </para>

            </listitem>

            <listitem>

              <para>
	            <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/dependency.gif" format="GIF" />
	              		</imageobject>
              		</inlinemediaobject>
              	</guiicon>
              	<literal>Abhängigkeit</literal>. Fügt eine Abhängigkeit 
              	zwischen zwei Modellelementen ein, die mit einer Taste&nbsp;1-
              	Bewegung markiert wurden (vom abhängigen Modellelement). 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/message.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Nachricht hinzufügen</literal>. Fügt zum markierten 
	              Assoziatationstyp eine Nachricht hinzu. 
              </para>

              <note>

                <para>
                	Dieses Werkzeug ist deaktiviert, es sei denn, eine 
                	Assoziation ist markiert.
                </para>

              </note>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Zustandsdiagrammspezifische Werkzeuge</title>

          <para>
          	Elf Werkzeuge speziell für UML-Modellelemente in Zustandsdiagrammen 
          	sind vorhanden. Die detaillierten Eigenschaften dieser Modellelemente 
          	sind im Abschnitt Zustandsdiagramm-Modellelemente beschrieben (siehe 
          	<xref linkend="ch.ref.entstate"/>).
		  </para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/state.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Zustand</literal>. Fügt dem Diagramm einen 
	              Zustand hinzu. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/composite_state.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Zusammengesetzter Zustand</literal>. Fügt dem Diagramm 
	              einen zusammengesetzten Zustand hinzu. Alle Modellelemente 
	              die nachfolgend im Diagramm auf dem zusammengesetzten Zustand 
	              plaziert werden, werden Teil des zusammengesetzten Zustandes. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/transition.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Transition (Übergang)</literal>. Fügt eine Transition 
	              (einen Übergang) mit Hilfe einer Taste&nbsp;1-Bewegung 
	              zwischen zwei Zuständen ein (von dem verursachenden Zustand zu 
	              dem empfangenden Zustand). 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/synchstate.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Synchronistations-Zustand</literal>. Fügt dem 
	              Diagramm einen Synchronisations-Zustand hinzu. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/submachinestate.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Teilautomatenzustand</literal>. Fügt dem Diagramm 
	              einen Teilautomatenzustand hinzu. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/stubstate.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Teilzustand</literal>. Fügt dem Diagramm einen 
	              Teilzustand hinzu. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/initial_state.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Startzustand</literal>. Fügt in das Diagramm einen 
	              Pseudo-Startzustand ein. 
              </para>

              <caution>

                <para>
                	Es gibt nichts zu stoppen, wenn Sie dem Diagramm mehr als 
                	einen Startzustand oder zusammengesetzten Zustand hinzufügen. 
                	So etwas zu tun ist bedeutungslos und es wird eine der 
                	Kritiken erscheinen.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/final_state.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Endzustand</literal>. Fügt in das Diagramm einen 
	              Endzustand ein. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/junction.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Kreuzung</literal>. Fügt in das Diagramm einen 
	              Pseudo-Kreuzungszustand ein. 
              </para>

              <caution>

                <para>
                	Eine wohlgeformte Kreuzung sollte mindestens eine kommende 
                	und mindestens ein ausgehende Transition haben. ArgoUML 
                	erzwingt dies nicht, aber es erscheint eine Kritik bei 
                	jeder Kreuzung, die dieser Regel nicht folgt.
                </para>

              </caution>
            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/branch.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Entscheidung</literal>. Fügt in das Diagramm einen 
	              Entscheidungs-Pseudozustand ein. 
              </para>

              <caution>

                <para>
                	Eine wohlgeformte Entscheidung sollte mindestens eine kommende 
                	und mindestens ein ausgehende Transition haben. ArgoUML 
                	erzwingt dies nicht, aber es erscheint eine Kritik bei 
                	jeder Entscheidung, die dieser Regel nicht folgt.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/fork.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Gabelung</literal>. Fügt in das Diagramm einen 
	              Gabelungs-Pseudozustand ein. 
              </para>

              <caution>

                <para>
                	Eine wohlgeformte Gabelung sollte genau eine kommende 
                	und und zwei oder mehr ausgehende Transitionen haben. ArgoUML 
                	erzwingt dies nicht, aber es erscheint eine Kritik bei 
                	jeder Gabelung, die dieser Regel nicht folgt.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/join.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Vereinigung</literal>. Fügt in das Diagramm einen 
	              Vereinigungs-Pseudozustand ein. 
              </para>

              <caution>

                <para>
                	Eine wohlgeformte Vereinigung sollte genau eine kommende 
                	und zwei oder mehr ausgehende Transitionen haben. ArgoUML 
                	erzwingt dies nicht, aber es erscheint eine Kritik bei 
                	jeder Vereinigung, die dieser Regel nicht folgt.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	          	<guiicon>
	              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/shallow_history.gif"
              				format="GIF" />
              		</imageobject>
              	   </inlinemediaobject>
                </guiicon>
              	<literal>Flache Historie</literal>. Fügt in ein Diagramm 
              	eine flache Historie ein. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/deep_history.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Tiefgehende Historie</literal>. Fügt in das Diagramm 
	              eine tiefgehende Historie ein. 
              </para>

            </listitem>
            
            <listitem>

              <para>
	          	  <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/call_event.gif" format="GIF" />
	              		</imageobject>
              	    </inlinemediaobject>
              	  </guiicon>
	              <literal>Aufruf-Ereignis</literal>. Fügt einer Transition 
	              ein Aufruf-Ereignis als Trigger hinzu. Es werden hier 4 
	              Ereignisarten angeboten: 
	              <literal>Aufruf-Ereignis</literal>, <literal>
	              Änderungs-Ereignis</literal>, 
	              <literal>Signal-Ereignis</literal> und <literal>
	              Zeit-Ereignis</literal>.
	              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/guard.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Wächter</literal>. Fügt einer Transition einen 
	              Wächter hinzu. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/call_action.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Aufruf-Aktion</literal>. Fügt einer Transition 
	              (z.B. einem Effekt) eine Aufruf-Aktion hinzu. Es werden hier 
	              7 Arten von Aktionen angeboten: 
	              <literal>Aufruf-Aktion</literal>, 
	              <literal>Erzeugungs-Aktion</literal>, 
	              <literal>Zerstören-Aktion</literal>, 
	              <literal>Antwort-Aktion</literal>, 
	              <literal>Sende-Aktion</literal>, 
	              <literal>Beenden-Aktion</literal>, 
	              <literal>Uninterpretierte Aktion</literal> und 
	              <literal>Aktionsfolge</literal>.
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Aktivitätsdiagrammspezifische Werkzeuge</title>

          <para>
            Es sind sieben Werkzeuge vorhanden, die speziell für UML-
            Modellelemente in Aktivitätsdiagrammen geschaffen wurden. Die 
            detaillierten Eigenschaften dieser Modellelemente werden im Abschnitt 
            Modellelemente in Aktivitätsdiagrammen beschrieben (siehe  
			<xref linkend="ch.ref.entactiv"/>).
		  </para>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/action_state.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Aktion</literal>. Sie fügen dem Diagramm eine 
	              Aktion hinzu.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/transition.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Transition</literal>. Sie fügen mit Hilfe einer 
	              Taste&nbsp;1-Bewegung eine Transition zwischen zwei markierten 
	              Aktionen ein (von der verursachenden 
	              Aktion zur empfangenden Aktion).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/initial_state.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Startknoten</literal>. Sie fügen dem Diagramm einen 
	              Startknoten hinzu. 
              </para>

              <caution>

                <para>
                	Es gibt nichts, was Sie daran hindert, dem Diagramm mehr 
                	als einen Startknoten hinzuzufügen. Wenn Sie es doch tun, 
                	ist es bedeutunglos und es wird eine der Kritiken ausgelöst.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/final_state.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Endknoten</literal>. Sie fügen dem Diagramm einen 
	              Endknoten hinzu.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/junction.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Entscheidungs-/Verbindungsknoten</literal>. Sie fügen 
	              dem Diagramm einen Entscheidungs-/Verbindungsknoten 
	              (Entscheidung) hinzu.
              </para>

              <caution>

                <para>
                	Ein wohlgeformter Entscheidungs-/Verbindungsknoten sollte 
                	eine eingehende Transition und zwei oder mehrere ausgehende 
                	Transitionen aufweisen. ArgoUML erzwingt dies nicht, aber 
                	es wird eine ArgoUML-Kritik bei jedem Entscheidungs-/
                	Verbindungsknoten ausgelöst, der dieser Regel nicht 
                	entspricht.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/fork.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Gabelung</literal>. Sie fügen dem Diagramm eine
	              Gabelung hinzu.
              </para>

              <caution>

                <para>
                	Ein wohlgeformte Gabelung sollte eine eingehende Transition 
                	und zwei oder mehrere ausgehende Transitionen aufweisen. 
                	ArgoUML erzwingt dies nicht, aber es wird eine ArgoUML-
                	Kritik bei jeder Gabelung ausgelöst, die dieser Regel nicht 
                	entspricht.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/join.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Vereinigung</literal>. Sie fügen dem Diagramm eine
	              Vereinigung hinzu. 
              </para>

              <caution>

                <para>
                	Ein wohlgeformte Vereinigung sollte eine eingehende Transition 
                	und zwei oder mehrere ausgehende Transitionen aufweisen. 
                	ArgoUML erzwingt dies nicht, aber es wird eine ArgoUML-
                	Kritik bei jeder Vereinigung ausgelöst, die dieser Regel nicht 
                	entspricht.
                </para>

              </caution>

            </listitem>
            
            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/callstate.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Aufrufknoten</literal>. Sie fügen dem Diagramm einen 
	              Aufrufknoten hinzu.
	              Ein Aufrufknoten ist eine Aktion, die eine einzelne 
	              Operation aufruft. Folglich wird der Name der aufzurufenden 
	              Operation, zusammen mit dem in Klammern stehenden Namen des 
	              Klassifizierers, der die Operation ausführt, in das Symbol 
	              geschrieben.
              </para>

            </listitem>
            
            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/objectflowstate.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Objektknoten</literal>. Sie fügen dem Diagramm einen 
	              Objektknoten hinzu.
	              Ein Objektknoten ist ein Objekt, das Eingabe oder 
	              Ausgabe einer Aktion ist. 
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Verteilungsdiagrammspezifische Werkzeuge</title>

          <para>
          	Zehn Werkzeuge sind speziell für UML-Modellelemente in 
          	Verteilungsdiagrammen vorhanden. Die detaillierten Eigenschaften 
          	dieser Modellelemente sind im Abschnitt über Modellelemente in 
          	Verteilungsdiagrammen beschrieben (siehe 
			<xref linkend="ch.ref.entdeploy"/>).
 		  </para>

          <note>

            <para>
            	Erinnern Sie sich daran, dass ArgoUML&apos;s Verteilungsdiagramme 
            	auch als Komponentendiagramme verwendet werden.
            </para>

          </note>

          <itemizedlist>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/node.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Knoten</literal>. Sie fügen dem Diagramm einen 
	              Knoten hinzu. Befindet sich die Maus über einem markierten 
	              Knoten, zeigt dieser vier Griffe, jeweils einer links, rechts, 
	              oben und unten. Diese Griffe können auf andere Objekte gezogen 
	              werden, um Assoziationen einzurichten. 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/node_instance.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Knoteninstanz</literal>. Sie fügen dem Diagramm eine 
	              Knoteninstanz hinzu. Befindet sich die Maus über einer 
	              markierten Knoteninstanz, zeigt diese vier Griffe, jeweils 
	              einer links, rechts, oben und unten. Diese Griffe können auf 
	              andere Objekte gezogen werden, um Verknüpfungen einzurichten.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/component.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Komponente</literal>. Sie fügen dem Diagramm eine 
	              Komponente hinzu. Befindet sich die Maus über einer markierten 
	              Komponente, zeigt diese vier Griffe, jeweils einer links, rechts, 
	              oben und unten. Diese Griffe können auf andere Objekte gezogen 
	              werden, um Abhänigkeiten einzurichten.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/component_instance.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Komponenteninstanz</literal>. Sie fügen dem Diagramm 
	              eine Komponenteninstanz hinzu. Befindet sich die Maus über 
	              einer markierten Komponenteninstanz, zeigt diese vier Griffe, 
	              jeweils einer links, rechts, oben und unten. Diese Griffe 
	              können auf andere Objekte gezogen werden, um Abhängigkeiten 
	              einzurichten.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/generalization.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Generalisierung</literal>. Sie fügen eine 
	              Generalisierung zwischen zwei, mit der Taste&nbsp;1 markierten 
	              Modellelementen ein (vom Kind zur Mutter).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/realization.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Realisierung</literal>. Sie fügen eine Realisierung 
	              zwischen einer Klasse und einer Schnittstelle ein (von der 
	              realisierenden Klasse zur realisierten Schnittstelle). 
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/dependency.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Abhängigkeit</literal>. Sie fügen eine Abhängigkeit 
	              zwischen zwei Modellelementen ein (vom abhängigen 
	              Modellelement).
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/association_plain.gif"
	              				format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Assoziation</literal>. Sie fügen eine Assoziation 
	              zwischen zwei Modellelementen (Knoten, Komponente, Klasse 
	              oder Schnittstelle) ein (vom ersten Modellelement zum 
	              zweiten Modellelement) Es gibt 6 Arten von Assoziationen, die 
	              hier angeboten werden. Siehe  
	              <xref linkend="fig.ref.edit_association_tools"/>: 
	              <literal>Assoziation</literal>, <literal>
	              Aggregation</literal> und <literal>Komposition</literal>, 
	              und alle diese drei können <literal>
	              bidirektional</literal> oder <literal>
	              unidirektional</literal> sein.
              </para>

              <caution>

                <para>
                	Die Randbedingung, dass Assoziationen zwischen Klassen und 
                	Schnittstellen <emphasis>von</emphasis> der Schnittstelle 
                	nicht navigierbar sein dürfen, gilt auch in 
                	Verteilungsdiagrammen.
                </para>

              </caution>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/object.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Objekt</literal>. Sie fügen dem Diagramm ein Objekt 
	              hinzu. Befindet sich die Maus über 
	              einem markierten Objekt, zeigt dieses vier Griffe, 
	              jeweils einer links, rechts, oben und unten. Diese Griffe 
	              können auf andere Objekte gezogen werden, um Verknüpfungen 
	              einzurichten.
              </para>

            </listitem>

            <listitem>

              <para>
	              <guiicon>
	              	<inlinemediaobject>
	              		<imageobject>
	              			<imagedata align="center"
	              				fileref="images/icons/link.gif" format="GIF" />
	              		</imageobject>
	              	</inlinemediaobject>
	              </guiicon>
	              <literal>Verknüpfung</literal>. Sie fügen eine Verknüpfung 
	              zwischen zwei Modellelementen (Knoteninstanz, 
	              Komponenteninstanz oder Objekt) ein. 
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.edit_pane_broom">

        <title>Der Besen</title>

        <para>
        	ArgoUML&apos;s Besen-Ausrichtungswerkzeug ist spezialisiert darauf, 
        	die Bedürfnisse von Designern hinsichtlich der Ausrichtung von 
        	Modellelementen in UML-Diagrammen zu unterstützen.
        	Häufig richten Designer Objekte beim Erzeugen grob aus oder tun dies 
        	über einfache Bewegungskommandos. Der Besen ist ein einfacher Weg, 
        	grob ausgerichtete Objekte präzise auszurichten. Darüber hinaus sind 
        	die Verteilungsoptionen des Besen&apos;s auf die Bedürfnisse von 
        	Designern zugeschnitten: zusammengehörende Objekte haben einen gleich 
        	grossen Zwischenraum, bündelt Objekte, um Diagrammplatz einzusparen, 
        	und schafft Platz für neue Objekte. Der Besen macht es auch einfach, 
        	von der horizontalen in die vertikale Ausrichtung oder von 
        	linksbündiger zu rechtsbündiger Ausrichtung zu wechseln.
        </para>

        <para>
        	Das T-förmige Symbol in ArgoUML&apos;s Diagrammwerkzeugleiste ruft 
        	das Besen-Ausrichtungswerkzeug auf. Wird die Maustaste&nbsp;1 im 
        	Besenmodus gedrückt, wird die erste Mausbewegung des Designers den 
        	Besen in einer der vier Richtungen: Norden, Süden, Osten oder 
        	Westen ausrichten. Danach verursachen Mausbewegungen, dass der Besen 
        	sich in die gewählte Richtung vorwärts, rückwärts oder seitwärts 
        	bewegt. Wie ein Schieber in der realen Welt, verschiebt das Besen-
        	Werkzeug Diagrammelemente, die mit ihm in Kontakt kommen. Dies hat 
        	zur Folge, dass die Objekte entsprechend der Besenvorderseite 
        	ausgerichtet werden und dies unmittelbar visualisiert wird (siehe 
        	nachfolgendes Bild). Im Gegensatz zu einem Besen in der realen Welt, 
        	erlaubt die Rückwärtsbewegung, dass Diagrammelemente in ihre 
        	ursprüngliche Position zurückkehren können. Das Vergrößern des 
        	Besens macht es möglich, Objekte, die nicht nahe beieinander sind, 
        	auszurichten. Wird die Maustaste losgelassen, verschwindet der Besen 
        	, die Objekte bleiben markiert, um diese weiterhin verändern zu 
        	können. 
        </para>

        <figure id="fig.ref.editpane_broom">

          <title>Der Besen.</title>

          <informaltable frame="none">

            <tgroup cols="2">

              <tbody>

                <row><entry><screenshot><mediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/reference/edit_broom1.png"
                 format="PNG"/></imageobject></mediaobject></screenshot></entry><entry><screenshot><mediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/reference/edit_broom2.png"
                 format="PNG"/></imageobject></mediaobject></screenshot></entry></row>

                <row><entry><screenshot><mediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/reference/edit_broom3.png"
                 format="PNG"/></imageobject></mediaobject></screenshot></entry><entry><screenshot><mediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/reference/edit_broom4.png"
                 format="PNG"/></imageobject></mediaobject></screenshot></entry></row>

              </tbody>

            </tgroup>

          </informaltable>

        </figure>

        <para>
        	Wenn der Designer die <emphasis>Leertaste</emphasis> während der 
        	Nutzung des Besens 
        	drückt, werden die Objekte an der Vorderseite des Besens gleichmäßig 
        	verteilt (z.B. gleichmäßiger Zwischenraum). ArgoUML&apos;s Besen 
        	unterstützt drei Verteilungsmodi: Objekte können gleichmäßig auf den 
        	Raum, den sie nutzen, verteilt werden, Objekte können gepackt werden, 
        	nur mit einem kleinen Zwischenraum dazwischen, oder Objekte können 
        	gleichmäßig über die gesamte Länge der Besenvorderseite verteilt 
        	werden. Wiederholtes Drücken der Leertaste wechselt zwischen diesen 
        	drei Verteilungsmodi und gibt eine Kurzinformation aus, welche 
        	Operation gerade ausgeführt wird: Gleichmäßiger Zwischenraum, 
        	komprimieren, spreizen und Ursprung.
        </para>

        
        <para>
        	Wenn der Designer die Taste <emphasis>Enter</emphasis> während der 
        	Nutzung des Besens drückt, wird der Besen rot (anstelle des normalen 
        	blau) und es werden keine Objekte während der Vorwärtsbewegung des 
        	Besens mitgenommen. Dies wirkt wie das Anheben des Besens. Durch 
        	erneutes Drücken der Taste Enter kehrt man in den normalen Modus 
        	zurück.
        </para>
        
        <para>
        	Das Betätigen der Taste <emphasis>Tab</emphasis> arbeitet genauso 
        	wie die Taste Enter.
        </para>
      </sect1>

      <sect1 id="s1.ref.edit_pane_selection_action_buttons">

        <title>Auswahl-Aktionsschaltflächen</title>

        <para>
        	Wenn der Anwender ein Modellelement in einem UML-Diagramm markiert, 
        	dann werden mehrere Griffe dargestellt, um anzuzeigen, dass es 
        	markiert ist und um die Anwenderschnittstelle mit der Fähigkeit zu 
        	versehen, die Größe des Knotens zu verändern.
        	ArgoUML zeigt auch einige <quote>Auswahl-Aktionsschaltflächen</quote> 
        	entlang des markierten Modellelementes an. In den nachfolgenden 
        	Bildern sehen Sie einige Beispiele von Griffen und <quote>Auswahl-
        	Aktionsschaltflächen</quote>. Die beiden Bilder für eine Klasse 
        	unterscheiden sich, weil beim Erzeugen der zweiten Klasse die 
        	Umschalt-Taste gedrückt wurde.
        </para>

        <figure id="fig.ref.editpane_selection_action_buttons">

          <title>
			Einige Beispiele für <quote>Auswahl-Aktionsschaltflächen</quote>.
		  </title>

          <informaltable frame="none">

            <tgroup cols="3">

              <tbody>

                <row>
					<entry>
						<screenshot>
							<mediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/edit_selection_action_buttons1.png"
										format="PNG" />
								</imageobject>
							</mediaobject>
						</screenshot>
					</entry>
					<entry>
						<screenshot>
							<mediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/edit_selection_action_buttons2.png"
										format="PNG" />
								</imageobject>
							</mediaobject>
						</screenshot>
					</entry>
					<entry>
						<screenshot>
							<mediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/edit_selection_action_buttons3.png"
										format="PNG" />
								</imageobject>
							</mediaobject>
						</screenshot>
					</entry>
				</row>
				<row>
					<entry>
						<screenshot>
							<mediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/edit_selection_action_buttons4.png"
										format="PNG" />
								</imageobject>
							</mediaobject>
						</screenshot>
					</entry>
					<entry>
						<screenshot>
							<mediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/edit_selection_action_buttons5.png"
										format="PNG" />
								</imageobject>
							</mediaobject>
						</screenshot>
					</entry>
					<entry>
						<screenshot>
							<mediaobject>
								<imageobject>
									<imagedata align="center"
										fileref="images/reference/edit_selection_action_buttons6.png"
										format="PNG" />
								</imageobject>
							</mediaobject>
						</screenshot>
					</entry>
				</row>

              </tbody>

            </tgroup>

          </informaltable>

        </figure>

        <para>
        	Auswahl-Aktionsschaltflächen bieten häufig erforderliche Operationen 
        	auf das markierte Objekt an. Zum Beispiel: Eine Klasse hat eine 
        	Schaltfläche bei 12 Uhr, um eine Superklasse hinzufügen zu können; 
        	eine bei 6 Uhr, um eine Subklasse hinzuzufügen und Schaltflächen bei 
        	der 3 Uhr- und 9 Uhr-Position, um Assoziationen hinzufügen zu können.
        	Diese Schaltflächen unterstützen eine &quot;Klick und Ziehen&quot;-
        	Interaktion: Ein einziger Klick erzeugt eine neue verknüpfte Klasse 
        	an der Standardposition, relativ zur Originalklasse und erzeugt eine 
        	Vererbung oder eine Assoziation; das Ziehen von der Schaltfläche zu 
        	einer existierenden Klasse erzeugt nur eine Vererbung oder 
        	Assoziation; und das Ziehen in einen leeren Raum des Diagrammes 
        	erzeugt eine neue Klasse an der Mausposition mit der Vererbung oder 
        	Assoziation. ArgoUML enthält eine automatische Layout-Unterstützung, 
        	so daß das Klicken auf die Schaltfläche Subklasse die neue Klasse 
        	an einer Stelle positioniert, so dass sie sich nicht überlappen.
        </para>

        <para>
        	Auswahl-Aktionsschaltflächen sind transparent. Sie haben einen 
        	sichtbaren rechteckigen Rahmen und enthalten ein Symbol, welches dem 
        	Symbol des entsprechenden Designelementes in der Standard-Symbolleiste 
        	entspricht. Diese Symbole sind jedoch ungefüllte Zeilen-Symbole mit
        	vielen transparenten Pixeln. Dies erlaubt es, daß 
        	Auswahl-Aktionsschaltflächen die Zeichenfläche überlappen, ohne das 
        	Diagramm zu verdecken. Aus diesem Grund werden die 
        	Schaltflächen nur angezeigt, wenn sich die Maus über dem Symbol 
        	des markierten Modellelementes befindet; wenn ein Teil des 
        	Diagrammes verdeckt ist, kann die Maus einfach fortbewegt werden, um 
        	eine klarere Sicht auf das Diagramm zu erhalten. 
        </para>

      </sect1>

      <sect1>

        <title>Erläuterungen (Clarifiers)</title>

        <para>
        	Eine Schlüsseleigenschaft von ArgoUML sind die Kritiken, die parallel 
        	zum ArgoUML-Werkzeug arbeiten. Wenn diese ein Problem finden, 
        	erzeugen sie ein Zu-Bearbeiten-Element und heben das Problem im 
        	Editierfenster hervor. Die für das Hervorheben verwendete grafische 
        	Technik wird <emphasis>Erläuterungen</emphasis> genannt.
        </para>

        <itemizedlist>

          <listitem>

            <para>
            	Hinweis-Symbol (
            	<guiicon>
            		<inlinemediaobject>
            			<imageobject>
            				<imagedata align="center" fileref="images/icons/note.gif"
             						   format="GIF"/>
             			</imageobject>
             		</inlinemediaobject>
             	</guiicon>).
            Wird in der oberen linken Ecke eines Modellelementes angezeigt und 
            signalisiert eine Kritik zu diesem Modellelement. Das Bewegen der 
            Maus über dieses Symbol blendet die Überschrift der Kritik ein. 
		    </para>

          </listitem>

          <listitem>

            <para>
            	Farbige Wellen-Linie (
            	<guiicon>
            		<inlinemediaobject>
            			<imageobject>
            				<imagedata align="center"
             						   fileref="images/reference/wavy_line.png"
             						   format="PNG"/>
             			</imageobject>
             		</inlinemediaobject>
             	</guiicon>). 
             	Wird für Kritiken verwendet, die spezifisch für Subkomponenten 
             	von grafischen Modellelementen sind. Zum Beispiel unterstreichen 
             	sie die Attribute einer Klasse mit einem Problem.
            </para>

          </listitem>

          <listitem>

            <para>
            	Durchgehende farbige Linie (
            	<guiicon>
            		<inlinemediaobject>
            			<imageobject>
            				<imagedata align="center"
             						   fileref="images/reference/solid_line.png"
             						   format="PNG"/>
             				</imageobject>
             			</inlinemediaobject>
             		</guiicon>). 
             	Nicht sichtbar beim normalen editieren, wird aber verwendet, 
             	wenn ein Zu-Bearbeiten-Element im Zu-Bearbeiten-Fenster 
             	(siehe <xref linkend="ch.ref.todopane"/>) durch einen 
             	Taste&nbsp;1 Doppelklick hervorgehoben wird.
             	Die durchgehende Linie kennzeichnet alle von der Kritik 
             	betroffenen Modellelemente. Zum Beispiel alle Stimuli, die sich 
             	außerhalb der Reihenfolge befinden.
			</para>

          </listitem>

        </itemizedlist>

      </sect1>

      <sect1>

        <title>Das Zeichengitter</title>

        <para>
        	Das Editierfenster ist mit einem Hintergrundgitter ausgestattet, 
        	das auf verschiedene Arten über das Menü (siehe 
        	<xref linkend="s2.ref.menu_adjust_grid"/>) eingestellt oder auch 
        	ausgeschaltet werden kann.
        </para>

        <para>
        	Welches Gitter auch immer aktuell eingestellt ist, das Plazieren 
        	der Elemente im Diagramm wird immer durch die Einstellungen der 
        	Gitterrastung bestimmt, die sich im Bereich zwischen 4 und 32 
        	Pixeln bewegt. (siehe 
        	<xref linkend="s2.ref.menu_grid_snap"/>).
        </para>

      </sect1>

      <sect1>

        <title>Der Reiter Diagramm</title>

        <para>
        	Unterhalb des Editierfensters befindet sich ein kleiner Reiter, der 
        	mit <literal>Als Diagramm</literal> beschriftet ist. Das Konzept ist, 
        	daß ein UML-Diagramm auf unterschiedliche Art und Weise dargestellt 
        	werden kann. Zum Beispiel als grafisches Diagramm oder als Tabelle. 
        	Jede Darstellung hätte seinen eigenen Reiter und kann durch einen 
        	Taste&nbsp;1-Klick auf den Reiter ausgewählt werden.
        </para>

        <para>
        	Frühere Versionen von ArgoUML implementierten eine tabellarische 
        	Darstellung, das aktuelle Release aber unterstützt nur die 
        	Diagramm-Darstellung, so daß dieser Reiter keinerlei Funktion hat.
        </para>

      </sect1>

      <sect1 id="s1.ref.edit_pane_pop_up">

        <title>Pop-Up Menü's</title>

        <para>
        	Ein Taste&nbsp;2-Klick über einem Modellelement im Editierfenster 
        	öffnet ein Pop-up-Menü mit Menüelementen, viele davon mit einem 
        	Untermenü.
        </para>

        <sect2>

          <title>Kritiken</title>

          <para>
          	Dieses Untermenü gibt eine Liste aller Kritiken aus, die von diesem 
          	Modellelement ausgelöst wurden. Die Auswahl eines der Menüeinträge 
          	bewirkt, daß der Eintrag im Zu-Bearbeiten-Fenster hervorgehoben 
          	und die ausführliche Erläuterung im Detailfenster des 
          	<literal>Zu-Bearbeiten</literal>-Reiters plaziert wird. Eine 
          	durchgezogene farbige Linie markiert das entsprechende Element. 
          </para>

        </sect2>

        <sect2>

          <title>Reihenfolge</title>

          <para>
          	Dieses Menü steuert die Reihenfolge der sich überlappenden 
          	Modellelemente im Diagramm. Es entspricht dem Untermenü 
          	<literal>Reihenfolge</literal> des Menüs <literal>Anordnen</literal>
			(siehe <xref linkend="s2.ref.menu_reorder"/>). Es enthält vier 
			Einträge.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<guiicon>
              		<inlinemediaobject>
              			<imageobject>
              				<imagedata align="center"
               						   fileref="images/icons/forward.gif"
               						   format="GIF"/>
               			</imageobject>
               		</inlinemediaobject>
               	</guiicon> 
                <literal>Nach vorne</literal>. Das markierte Modellelement wird 
                hinsichtlich der es überlappenden Modellelemente in der 
                Reihenfolgenhierarchie eine Ebene nach oben bewegt.
              </para>

            </listitem>

            <listitem>

              <para>
              	<guiicon>
              		<inlinemediaobject>
              			<imageobject>
              				<imagedata align="center"
               						   fileref="images/icons/backward.gif"
               						   format="GIF"/>
               			</imageobject>
               		</inlinemediaobject>
               	</guiicon> 
              	<literal>Nach hinten</literal>. Das markierte Modellelement wird 
                hinsichtlich der es überlappenden Modellelemente in der 
                Reihenfolgenhierarchie eine Ebene nach unten bewegt.</para>

            </listitem>

            <listitem>

              <para>
              	<guiicon>
              		<inlinemediaobject>
              			<imageobject>
              				<imagedata align="center"
               						   fileref="images/icons/to_front.gif"
               						   format="GIF"/>
               			</imageobject>
               		</inlinemediaobject>
               	</guiicon> 
              	<literal>In den Vordergrund</literal>. Das markierte 
              	Modellelement wird hinsichtlich der es überlappenden anderen 
              	Modellelemente an die vorderste Stelle bewegt. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<guiicon>
              		<inlinemediaobject>
              			<imageobject>
              				<imagedata align="center"
               						   fileref="images/icons/to_back.gif"
               						   format="GIF"/>
               			</imageobject>
               		</inlinemediaobject>
               	</guiicon> 
                <literal>In den Hintergrund</literal>. Das markierte 
                Modellelement wird hinsichtlich der es überlappenden anderen
                Modellelemente an die hinterste Stelle bewegt. 
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Hinzufügen</title>

          <para>
          	Dieses Untermenü erscheint nur bei Modellelementen, denen 
          	Erläuterungen hinzugefügt werden können (Klassen, Schnittstellen, 
          	Objekte, Zustände, Pseudozustände) oder denen Methoden oder Attribute 
          	hinzugefügt wurden (Klassen, Schnittstellen).
          	Es hat meistens drei Einträge. 
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<guiicon>
              		<inlinemediaobject>
              			<imageobject>
              				<imagedata align="center"
               						   fileref="images/icons/attribute.gif"
               					       format="GIF"/>
               			</imageobject>
               		</inlinemediaobject>
               	</guiicon> 
              	<literal>Neues Attribut</literal>. Erscheint nur, wenn das 
              	markierte Modellelement eine Klasse ist. Es erzeugt ein neues 
              	Attribut im Modellelement. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<guiicon>
              		<inlinemediaobject>
              			<imageobject>
              				<imagedata align="center"
               						   fileref="images/icons/operation.gif"
               						   format="GIF"/>
               			</imageobject>
               		</inlinemediaobject>
               	</guiicon> 
              	<literal>Neue Methode</literal>. Erscheint nur, wenn das 
              	markierte Modellelement eine Klasse oder eine Schnittstelle ist. 
              	Erzeugt eine neue Methode im Modellelement. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<guiicon>
              		<inlinemediaobject>
              			<imageobject>
              				<imagedata align="center" fileref="images/icons/note.gif"
               						   format="GIF"/>
               			</imageobject>
               		</inlinemediaobject>
               	</guiicon> 
              	<literal>Neuer Kommentar</literal>. Fügt zu dem markierten 
              	Modellelement einen Kommentar hinzu. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Alle Assoziationen hinzufügen</literal>.
              	Erscheint nur, wenn das markierte Element eine Klasse oder eine 
              	Schnittstelle ist. Macht alle im Modell existierenden Beziehungen 
              	sichtbar, die mit dem markierten Modellelement verknüpft sind.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Alle Assoziationen entfernen</literal>.
              	Erscheint nur, wenn das markierte Modellelement eine Klasse oder 
              	eine Schnittstelle ist. Entfernt alle verknüpften Beziehungen 
              	aus dem Diagramm (ohne sie aus dem Modell zu entfernen). 
              </para>

            </listitem>
          </itemizedlist>

        </sect2>

        <sect2>

          <title>Darstellung</title>

          <para>
          	Dieses Untermenü erscheint nur bei bestimmten Modellelementen. Es 
          	ist vollständig kontextabhängig. Es gibt viele mögliche Einträge, je 
          	nach markiertem Modellelement und dessen Zustand.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Erweiterungspunkte ausblenden</literal>. 
              	Erscheint nur, wenn der Erweiterungspunkt eines 
              	Anwendungsfalles eingeblendet ist. Blendet den Erweiterungspunkt 
              	aus.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Erweiterungspunkte einblenden</literal>. 
              	Erscheint nur, wenn der Erweiterungspunkt eines 
              	Anwendungsfalles ausgeblendet ist. Blendet den Erweiterungspunkt 
              	ein.
			  </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Alles ausblenden</literal>. 
              	Erscheint nur, wenn Attribut- und Methoden-Bereiche einer 
              	Klasse oder eines Objektes angezeigt werden. Verbirgt beide 
              	Bereiche.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Alles einblenden</literal>. 
              	Erscheint nur, wenn Attribut- und Methoden-Bereiche einer 
              	Klasse oder eines Objektes ausgeblendet sind. Blendet beide 
              	Bereiche ein. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Attribute ausblenden</literal>. 
              	Erscheint nur, wenn die Attribute einer Klasse oder eines 
              	Objektes eingeblendet sind. Blendet die Attribute aus. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Attribute einblenden</literal>. 
              	Erscheint nur, wenn die Attribute einer Klasse oder eines 
              	Objektes ausgeblendet sind. Blendet die Attribute ein. 
               </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Operationen ausblenden</literal>. 
              	Erscheint nur, wenn die Operationen einer Klasse oder eines 
              	Objektes eingeblendet sind. Blendet die Operationen aus. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Operationen einblenden</literal>. 
              	Erscheint nur, wenn die Operationen einer Klasse oder eines 
              	Objektes ausgeblendet sind. Blendet die Operationen ein. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Aufzählung ausblenden</literal>. 
              	Erscheint nur, wenn die Aufzählung eingeblendet ist. Blendet die 
              	Aufzählung aus. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Aufzählung einblenden</literal>. 
              	Erscheint nur, wenn die Aufzählung ausgeblendet ist. Blendet 
              	die Aufzählung ein. 
              </para>

            </listitem>
            
            <listitem>

              <para>
              	<literal>Alle Kanten einblenden</literal>. 
              	Erscheint nur bei Klassen. Blendet alle Assoziationen ein (zu 
              	angezeigten Modellelementen) die aktuell nicht eingeblendet sind. 
              	Dies ist die selbe Funktion wie &quot;Zum Diagramm hinzufügen
              	&quot; einer Assoziation im Explorer-Kontextmenü. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Alle Kanten ausblenden</literal>. Erscheint nur bei 
              	Klassen.  Blendet alle Assoziationen aus. Dies ist die gleiche 
              	Funktion wie die Funktion <quote>Aus Diagramm entfernen</quote>
              	auf alle Assoziationen dieser Klasse. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Stereotypen ausblenden</literal>. Erscheint nur, wenn 
                die Stereotypen eines Paketes eingeblendet sind. Blendet die 
                Stereotypen aus. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Stereotypen einblenden</literal>. Erscheint nur, wenn 
              	die Stereotypen eines Paketes ausgeblendet sind. Blendet die 
              	Stereotypen ein. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Sichtbarkeit ausblenden</literal>. Erscheint nur, wenn 
              	die Sichtbarkeit eines Paketes eingeblendet ist. Blendet die 
              	Sichtbarkeit aus. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Sichtbarkeit einblenden</literal>. Erscheint nur, wenn 
              	die Sichtbarkeit eines Paketes ausgeblendet ist. Blendet die 
              	Sichtbarkeit ein. 
              </para>

            </listitem>
          </itemizedlist>

        </sect2>

        <sect2>

          <title>Modifikatoren</title>

          <para>
          	Dieses Untermenü erscheint nur bei Klassen, Schnittstellen, Paketen 
          	und Anwendungsfall-Modellelementen. Es wird verwendet, um die 
          	Werte verschiedener verfügbarer Modifikatoren einzustellen oder 
          	zu löschen. 
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>Abstrakt</literal>. Wird bei einem abstrakten 
              	Modellelement eingestellt. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Blatt</literal>. Wird bei einem abschliessendem 
              	Modellelement gesetzt. Zum Beispiel eines ohne Sub-Modellelemente.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Wurzel</literal>. Wird bei einem Wurzel-Modellelement 
                gesetzt. Zum Beispiel eines ohne übergeordnetes Modellelement. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Aktiv</literal>. Wird bei einem Modellelement mit
              	dynamischem Verhalten gesetzt. 
              </para>

              <note>

                <para>
                	Dies sollte natürlich automatisch bei Modellelementen 
                	mit Zustandsautomaten oder Aktivitätsdiagrammen gesetzt 
                	werden.
                </para>

              </note>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Kardinalität</title>

          <para>
          	Dieses Untermenü erscheint nur bei Assoziations-Modellelementen, 
          	beim Anklicken eines Assoziationsendes. Es wird dazu verwendet, 
          	die Kardinalität am dem Assoziationsende zu steuern, das dem 
          	Mausklick am nächsten liegt. Es gibt nur vier Einträge, eine 
          	Untermenge einer Menge von Kardinalitäten, die über die 
          	Eigenschaftstabelle eines Assoziationsendes verfügbar sind (siehe 
          	<xref linkend="s1.ref.association_end_use_case"/>).
          </para>

          <itemizedlist>

            <listitem>

              <para><literal>1</literal></para>

            </listitem>

            <listitem>

              <para><literal>0..1</literal></para>

            </listitem>

            <listitem>

              <para><literal>1..*</literal></para>

            </listitem>

            <listitem>

              <para><literal>0..*</literal></para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Aggregation</title>

          <para>
          	Dieses Untermenü erscheint nur bei Assoziations-Modellelementen, 
          	beim Anklicken eines Assoziationsendes. Es wird dazu verwendet, die 
          	Aggregation an dem Assoziationsende zu steuern, das dem Mausklick 
          	am nächsten liegt. Es gibt drei Einträge.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>keine</literal>. Entfernt alle Aggregationen.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>Aggregation</literal>. Macht dieses Ende zu einer 
              	Aggregation (gewöhnlich als <quote>Aggregation</quote> 
              bekannt).
              </para>

            </listitem>

            <listitem>

              <para><literal>Komposition</literal>. Macht dieses Ende zu 
              einer untrennbaren Aggregation (gewöhnlich als  
              <quote>Komposition</quote> bekannt).</para>

            </listitem>

          </itemizedlist>

          <caution>

            <para>
            	UML fordert, dass ein Ende einer Komposition die Kardinalität 1 
            	aufweisen muss (der Standard).
            </para>

          </caution>

        </sect2>

        <sect2>

          <title>Navigierbarkeit</title>

          <para>
          	Dieses Untermenü erscheint nur bei Assoziations-Modellelementen beim 
          	Anklicken auf ein Assoziationsende. Es wird verwendet, um die 
          	Navigierbarkeit der Assoziation zu steuern. Es gibt drei Einträge.
          </para>

          <itemizedlist>

            <listitem>

              <para>
              	<literal>bidirektional</literal>. Macht die Assoziation in 
              	beide Richtungen navigierbar. 
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>&lt;Klasse1&gt; nach &lt;Klasse2&gt;</literal>. Macht 
              	die Assoziation nur von &lt;Klasse1&gt; nach &lt;Klasse2&gt; 
              	navigierbar. Mit anderen Worten, &lt;Klasse1&gt; kann die 
              	&lt;Klasse2&gt; referenzieren, aber nicht umgekehrt.
              </para>

            </listitem>

            <listitem>

              <para>
              	<literal>&lt;Klasse2&gt; nach 
              &lt;Klasse1&gt;</literal>. Macht 
              	die Assoziation nur von &lt;Klasse2&gt; nach &lt;Klasse1&gt; 
              	navigierbar. Mit anderen Worten, &lt;Klasse2&gt; kann die 
              	&lt;Klasse1&gt; referenzieren, aber nicht umgekehrt.
              </para>

            </listitem>

          </itemizedlist>

          <note>

            <para>
            	UML erlaubt keine nicht-navigierbaren Assoziation in beide 
            	Richtungen. ArgoUML wird dies zulassen, aber Sie müssen die 
            	Navigationseigenschaft aller über den Reiter Eigenschaften der 
            	Assoziation erreichbaren Assoziationsenden einstellen - und das 
            	Diagramm wird in diesem Fall keine Pfeile anzeigen.  
            </para>

            <para>
              Dies wird als schlechte Design-Praxis betrachtet (es wird in 
              ArgoUML eine Kritik auslösen), so dass dies nur von theoretischem 
              Interesse ist.
            </para>

          </note>

          <note>

            <para>
            	UML erlaubt keine Navigierbarkeit von einer Schnittstelle zu 
            	einer Klasse. ArgoUML verhindert dies nicht.
            </para>

          </note>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.notation">

        <title>Notation</title>

        <para>
        	Eine Notation ist die textuelle Darstellung in einem Diagramm eines 
        	Modellelementes oder seiner Eigenschaften.
        </para>

        <sect2>
        <title>Notation Sprachen</title>
        <para>
          ArgoUML unterstützt die Darstellung der Notation in unterschiedlichen 
          Sprachen. Standardmäßig wird jeder Text in UML-Notation dargestellt, 
          Menüs erhalten jedoch einen Eintrag um zwischen UML und Java 
		  auswählen zu können.
		  Über Plugin-Module ist es auch möglich andere Sprachen auszuwählen; 
		  wie zum Beispiel C++.
        </para>
        
        <para>
        	<xref linkend="fig.ref.notation_uml"/>
        	zeigt eine Klasse in UML-Notation, während
        	<xref linkend="fig.ref.notation_java"/>
        	die gleiche Klasse in Java-Notation darstellt.
        </para>

        <figure id="fig.ref.notation_uml">

          <title>Eine Klasse in UML-Notation</title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
           					   fileref="images/reference/notation_uml.png"
           					   format="PNG"/>
           		</imageobject>
           	</mediaobject>
           </screenshot>
        </figure>
        
        <figure id="fig.ref.notation_java">

          <title>Eine Klasse in Java-Notation</title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
           					   fileref="images/reference/notation_java.png"
           					   format="PNG"/>
           		</imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        </sect2>

        <sect2>
        <title>Editieren im Diagramm</title>

        <para>
          Der in einem Diagramm gezeigte Text kann durch einen Doppelklick auf 
          den Text editiert werden. Dies blendet ein Editierfenster mit dem 
          zuvor markierten Text auf, in dem der Text geändert werden kann.
        </para>

        <para>
          Zusätzlich zeigt die Statuszeile von ArgoUML (z.B. der kleine Bereich 
          unten im ArgoUML-Fenster) einen Hilfetext an, der die Syntax des 
          einzugebenden Textes beschreibt. Die Texteingabe kann durch Drücken 
          der Taste F2, oder bei einzeiligen Felder durch Drücken der Taste 
          Return abgeschlossen werden.
          Zusätzlich kann das Editieren durch Anklicken eines Bereiches 
          ausserhalb des Diagrammes beendet werden.
        </para>
        
        <para>
          Das Editieren im Diagramm ist eine sehr leistungsfähige Art und Weise 
          eine Menge Modellinformationen auf kompakte Art einzugeben. Es ist 
          zum Beispiel möglich, eine Operation, den Stereotypen, alle Parameter 
          und deren Typen, sowie die Eigenschaften der Operationen (Sichtbarkeit, 
          Gleichzeitigkeit) auf einmal einzugeben:
        </para>
        
        <programlisting>+Auftrag(kundenID : int,positionen : List) : void {sequential}</programlisting>
        
        <para>
          Eine Assoziation (z.B. zwischen zwei Klassen) zeigt viele Texte in der 
          Nähe seiner Mitte und der Enden an, die zusätzliche Erläuterungen 
          liefern.
          <xref linkend="fig.ref.notation_association"/> zeigt zwei 
          Assoziationen, um folgendes zu erläutern:
        </para>

        <figure id="fig.ref.notation_association">

          <title>Eine Menge von Assoziationen mit Eingabefeldern</title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
           					   fileref="images/reference/notation_association.png"
           					   format="PNG"/>
           		</imageobject>
           	</mediaobject>
           </screenshot>
        </figure>        

        <para>
          Die rechte Assoziation zeigt, dass unsichtbare Felder in die Text 
          eingegeben werden kann sichtbar werden, wenn das Modellelement markiert 
          wird. Die Felder sind als blaue Rechtecke gekennzeichnet - ein 
          Doppelklick auf diese Felder mit der rechten Maustaste&nbsp;1 ermöglicht 
          das Editieren.
        </para>
        
        <para>
          Die Sichtbarkeit (das +, -, # oder ~) wird im Zusammenhang mit dem 
          Namen des Assoziationsendes angezeigt. Bei unbenannten 
          Assoziationsenden wird sie nicht angezeigt.
        </para>
        
        <para>
          Die Kardinalität wird nicht angezeigt, wenn sie 1 ist, es sei denn, 
          die Einstellung <literal>"1" Kardinalitäten anzeigen</literal> im Menü 
          <literal>Datei=&gt;Projekteigenschaften</literal> ist markiert.
        </para>
        
        <para>
          Das Beispiel-Bild demonstriert dies nicht, weil Stereotypen einer 
          Assoziation im Diagramm angezeigt werden, aber nicht editierbar sind.
          Und Stereotypen von Assoziationsenden werden zusammen mit dem Namen 
          des Assoziationsendes angezeigt.
        </para>
        
        </sect2>

        <sect2>
        <title>Parsen</title>
        <para>(noch zu beschreiben)</para>
        <!-- TODO: Describe all Notation providers' syntax. -->
        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.detpane">

      <title>Der Bereich Details</title>

      <sect1>

        <title>Einleitung</title>

        <para>
        	<xref linkend="fig.ref.details_pane"/> zeigt das ArgoUML-Fenster mit
        	dem hervorgehobenen Bereich Details.
        </para>

        <figure id="fig.ref.details_pane">

          <title>Überblick über den Bereich Details</title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
           					   fileref="images/reference/details_pane.png"
           					   format="PNG"/>
           		</imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <para>
        	Für jedes Modellelement innerhalb des Systems, werden alle mit ihm 
        	verknüpften Daten innerhalb dieses Bereiches  angezeigt und 
        	eingegeben.
        </para>

        <para>
          Der Bereich enthält eine Reihe von Registern, die mit einem 
          Taste&nbsp;1-Klick ausgewählt werden. Der Rumpf des Reiters ist ein 
          Menü von Einträgen, die je nach ausgewähltem Register markiert, 
          ausgewählt oder eingegeben werden, .
        </para>

        <para>
          Von diesen, ist das Register <literal>Eigenschaften</literal> das 
          komplexeste. Mit unterschiedlichen Darstellungen für jedes 
          Modellelement im System. Die detaillierte Beschreibung des Registers 
          Eigenschaften für jedes Modellelement ist Inhalt separater Kapitel, 
          welche die Modellelemente beschreiben, die in den verschiedenen 
          Diagrammen erscheinen können (siehe  <xref linkend="ch.ref.entities"/> 
          bis <xref linkend="ch.ref.entdeploy"/>).
        </para>

      </sect1>

      <sect1 id="s1.ref.to_do">

        <title>Das Register &quot;Zu Bearbeiten&quot;</title>

        <para>
          Dieses Register erlaubt die Steuerung über die verschiedenen, vom 
          Anwender erzeugten Zu-Bearbeiten-Einträge oder automatisch von ArgoUML 
          generierten Kritiken (wird detaillierter im Abschnitt <literal>
          Kritiken</literal>-Menü diskutiert. Siehe 
          <xref linkend="s1.ref.menu_critique"/>). 
          <xref linkend="fig.ref.details_to_do"/> zeigt einen typischen 
          Ausschnitt. 
          Das Zu-Bearbeiten-Element wird mit der Taste&nbsp;1 im Detailbereich 
          markiert (siehe <xref linkend="ch.ref.todopane"/>) oder mit Hilfe des 
          kontextsensitiven Popup-Menüs <literal>Kritiken</literal> im 
          Editierfenster. 
        </para>

        <figure id="fig.ref.details_to_do">

          <title>Beispiel eines <literal>Zu-Bearbeiten-Elementes</literal></title>

          <screenshot>
          	<mediaobject>
          		<imageobject>
          			<imagedata align="center"
           					   fileref="images/reference/details_to_do.png"
           					   format="PNG"/>
           		</imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <para>
          Benutzerspezifische Anpassungen des Verhaltens von Kritiken ist über 
          das <literal>Kritiken anzeigen...</literal>-Menü möglich (siehe
          <xref linkend="s2.ref.menu_browse_critics"/>).
        </para>

        <para>
          Der Rumpf des Registers beschreibt das Problem und beschreibt, wie es 
          gelöst werden kann. Links befinden sich vier Schaltflächen.
        </para>

        <itemizedlist>

          <listitem>

            <para>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
            			<imagedata align="center"
             					   fileref="images/icons/new_to_do_item.gif"
             					   format="GIF"/>
             		</imageobject>
             	</inlinemediaobject>
              </guiicon> 
              <literal>Neue Kritik...</literal> Öffnet ein Dialogfenster (siehe  
              <xref linkend="fig.ref.details_new_to_do"/>), das es Ihnen erlaubt, 
              Ihre eigene Kritik zu schreiben, mit eigener Überschrift (die im 
              Zu-Bearbeiten-Bereich erscheint), eigener Priorität für den 
              Zu-Bearbeiten-Bereich, Referenz-URL und detaillierter Beschreibung 
              für weitere Informationen.
            </para>

            <figure id="fig.ref.details_new_to_do">

              <title>Dialogfenster für <literal>
              Neue Kritik</literal></title>

              <screenshot>
              	<mediaobject>
              		<imageobject>
              			<imagedata align="center"
               					   fileref="images/reference/details_new_to_do.png"
               					   format="PNG"/>
               		</imageobject>
               	</mediaobject>
              </screenshot>
            </figure>

          </listitem>

          <listitem>

            <para>
              <guiicon>
              	<inlinemediaobject>
              	  <imageobject>
            		<imagedata align="center"
             				   fileref="images/icons/resolve_item.gif"
                			   format="GIF"/>
                  </imageobject>
                 </inlinemediaobject>
              </guiicon> 
              <literal>Kritik auflösen...</literal> Öffnet einen Dialog, der 
              es dem Anwender ermöglicht, das markierte Zu-Bearbeiten-Element 
              aufzulösen (siehe <xref linkend="fig.ref.details_resolve_to_do"/>). 
              Dies ist ein wichtiger Dialog, weil er es erlaubt, die 
              Zu-Bearbeiten-Elemente auf andere Art und Weise zu behandeln, wie 
              im Zu-Bearbeiten-Element empfohlen (was der Grund ihrer Existenz 
              ist). 
            </para>

            <para>
              Dieses Dialogfenster ist für folgende Fälle gedacht: Löschen von 
              Zu-Bearbeiten-Elementen, die manuell erzeugt wurden, verhindern, 
              dass sich eine Kritik nur auf ein Objekt bezieht und auflösen von 
              ganzen Kategorien von Zu-Bearbeiten-Elementen durch herabstufen 
              von Designbedingungen oder Designzielen. 
            </para>

            <figure id="fig.ref.details_resolve_to_do">

              <title>Dialogfenster für <literal>
              Kritik auflösen</literal></title>

              <screenshot>
              	<mediaobject>
              	  <imageobject>
              		<imagedata align="center"
               				   fileref="images/reference/details_resolve_to_do.png"
               				   format="PNG"/>
               	  </imageobject>
               	</mediaobject>
              </screenshot>
            </figure>

            <para>
              Oben befinden sich drei Auswahlfelder, von denen das letzte 
              standardmäßig markiert ist. Sie sind wie folgt bezeichnet: 
              1) <literal>es ist für meine Ziele nicht relevant</literal>, 2) 
              <literal>es ist Momentan nicht von Belang</literal> und 3) 
              <literal>die Gründe sind nachfolgend beschrieben</literal>.
              Wenn Sie die 3. Option auswählen, sollten Sie die Gründe in dem 
              nachfolgendem Textbereich beschreiben.
            </para>

            <tip>

              <para>
                Wenn Sie ein Zu-Bearbeiten-Element auflösen wollen (das durch 
                eine Kritik generiert wurde) indem Sie dessen Empfehlung folgen, 
                dann führen Sie die empfohlenen Änderungen durch und das Zu-
                Bearbeiten-Element wird von selbst verschwinden. Es gibt dann 
                keine Notwendigkeit, diesen Dialog zu verwenden.
              </para>

            </tip>

            <warning>

              <para>
                Die Version V0.20 der ArgoUML-Implementierung ist unvollständig: 
                Die angegebenen Gründe werden beim Speichern des Projektes nicht 
                mitgespeichert. Und es gibt keinen Weg, die aufgelösten 
                Zu-Bearbeiten-Elemente wiederherzustellen. Aus diesem Grund ist 
                es aktuell nicht ratsam eine Begründung einzugeben.
              </para>

              <para>
                Wenn eine generiertes Zu-Bearbeiten-Element aufgelöst wird, dann 
                gibt es keinen Weg dies ungeschehen zu machen (es sei denn, 
                durch erneutes erzeugen des Kritik-auslösenden Objektes).
              </para>

            </warning>

          </listitem>

          <listitem>

            <para>
              <guiicon>
              	<inlinemediaobject>
              	  <imageobject>
            		<imagedata align="center"
             				   fileref="images/icons/snooze_critic.gif"
             				   format="GIF"/>
             	  </imageobject>
             	</inlinemediaobject>
              </guiicon> 
              <literal>Kritik deaktivieren</literal> Dies unterdrückt die 
              Aktivität der Kritik, die das aktuelle Zu-Bearbeiten-Element 
              generiert. Das Zu-Bearbeiten-Element (und alle anderen von der 
              Kritik generierten Zu-Bearbeiten-Elemente) werden aus dem Bereich 
              Zu-Bearbeiten verschwinden.
            </para>

            <para>
              Die Kritik wird nach einer gewissen Zeit wieder aufleben. Zu Beginn 
              ist diese Periode auf 10 Minuten eingestellt, aber sie wird bei 
              jedem Anklicken der Schaltfläche verdoppelt. Die Kritik kann 
              ausdrücklich durch <literal>Kritiken &gt; Kritiken anzeigen...
              </literal> wieder zum Leben erweckt werden (siehe 
              <xref linkend="s2.ref.menu_browse_critics"/>).
            </para>

            <tip>

              <para>
                Einige Kritiken können während der gesamten Erstellungszeit eines 
                grossen Diagrammes erscheinen. Einige Anwender finden es daher 
                nützlich, diese Kritiken zu deaktivieren bis das Diagramm 
                vollständig ist.
              </para>

            </tip>

          </listitem>

        </itemizedlist>

        <sect2>

          <title>Assistenten</title>

          <para>
            Einige der am häufigsten vorkommenden Kritiken haben einen 
          <quote>Assistenten</quote>, der dabei hilft, das Problem zu lösen.
          Der Assistent umfasst im <literal>Zu-Bearbeiten-Element</literal> eine 
          Reihe von Seiten (eine oder mehrere), die Sie Schritt für Schritt 
          durch die Änderungen führen. Sie starten den Assistenten durch 
          Anklicken der Schaltfläche <literal>Weiter &gt;&gt;</literal>.
          </para>

          <figure id="fig.ref.details_wizard">

            <title>Beispiel eines <literal>Assistenten</literal></title>

            <screenshot>
              <mediaobject>
              	<imageobject>
            	  <imagedata align="center"
             				 fileref="images/reference/details_wizard.png"
             				 format="PNG"/>
             	</imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para>
            Der Assistent wird durch die ersten drei Schaltflächen im unteren 
            Bereich des <literal>Zu-Bearbeiten-Elementes</literal> gesteuert.
          </para>

          <itemizedlist>

            <listitem>

              <para>
                <literal>&lt;&lt; Zurück</literal>. Dies bringt Sie in der 
                vorhergehenden Schritt des Assistenten zurück. Die Schaltfläche 
                ist deaktiviert, wenn es sich um den 1. Schritt handelt. 
              </para>

            </listitem>

            <listitem>

              <para>
                <literal>Weiter &gt;&gt;</literal>. Dies bringt Sie zum 
                nächsten Schritt des Assistenten. Wenn es sich um den letzten 
                Schritt des Assistenten handelt, ist diese Schaltfläche 
                deaktiviert. 
              </para>

            </listitem>

            <listitem>

              <para>
                <literal>Fertigstellen</literal>. Dieser Schritt vollzieht die 
                von Ihnen im Assistenten in den vorhergehenden Schritten 
                vorgenommenen Änderungen und/oder verwendet die Standardwerte 
                für alle folgenden Schritte. 
              </para>

            </listitem>

          </itemizedlist>

          <note>

            <para>
              Nicht alle Zu-Bearbeiten-Elemente haben Assistenten. Wenn es 
              keinen Assistenten gibt, sind alle drei Schaltflächen deaktiviert.
            </para>

          </note>
          
          <para>
            Die ArgoUML-Assistenten sind <emphasis>nicht-model</emphasis>, d.h. 
            einmal gestartet, können Sie andere Zu-Bearbeiten-Elemente auswählen 
            oder andere Aktionen ausführen. Und dies alles, während sich der 
            Assistent daran erinnert, wo er war. Sie können somit zu diesem 
            Zu-Bearbeiten-Element zurückkehren und der Assistent wird mit dem 
            gleichen Schritt fortfahren, in dem er war, bevor Sie ihn verlassen 
            haben.
          </para>

        </sect2>

        <sect2>

          <title>Die Schaltfläche Hilfe</title>

          <para>
            Es gibt noch eine verbliebene Schaltfläche im unteren Bereich des  
            Registers <literal>Zu-Bearbeiten-Element</literal>, mit <literal>
            Hilfe</literal> bezeichnet. Diese wird künftig einen Browser öffnen, 
            mit einer URL für eine weitergehende Hilfe.
          </para>

          <!--warning>

            <para>In the V0.20 release of ArgoUML the URLs are 
            generally invalid. The few that are valid have no 
            information.</para>

          </warning-->

        </sect2>

      </sect1>

      <sect1 id="s1.ref.proptab">

        <title>Das Register Eigenschaften</title>

        <para>
          Über dieses Register werden die Eigenschaften eines im Explorer oder 
          im Editierbereich markierten Modellelementes eingestellt. Die 
          Eigenschaften eines Modellelementes können auf folgende Art und Weise 
          angezeigt werden:
        </para>

        <orderedlist>

          <listitem>

            <para>
              Markieren des Modellelementes im Explorer oder im Editierbereich, 
              gefolgt von der Auswahl des Registers Eigenschaften im Bereich 
              Details; oder
            </para>

          </listitem>

          <listitem>

            <para>
              Über die Navigationsschaltflächen werden unterschiedliche 
              Modellelemente markiert. Zum Beispiel, die Schaltfläche 
              <literal>Nach oben</literal> im Register Eigenschaften, die 
              Schaltflächen <literal>Zurück</literal> und <literal>Vorwärts
              </literal> in der Symbolleiste und die verschiedenen Menüeinträge 
              unter <literal>Bearbeiten - Markieren</literal>.
            </para>

          </listitem>

        </orderedlist>

        <para>
          <xref linkend="fig.ref.details_properties"/> zeigt ein typisches 
          Register Eigenschaften für ein Modellelement in ArgoUML (in diesem 
          Fall eine Klasse).
        </para>

        <figure id="fig.ref.details_properties">

          <title>
            Ein typisches Register <literal>Eigenschaften</literal> im 
            Bereich Details
          </title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_properties.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <para>
          Oben links befindet sich das Symbol und der Name des Modellelement-Typs 
          (z.B. die UML-Metaklasse, nicht der aktuelle Name dieses bestimmten 
          Modellelementes). In diesem Beispiel ist es das Register Eigenschaften 
          für eine Klasse.
        </para>

        <para>
          Rechts davon befindet sich eine Symbolleiste mit Symbolen, die in 
          diesem Register Eigenschaften relevant sind. Das Erste ist immer die 
          Schaltfläche <literal>Nach oben</literal>. Das Letzte ist immer die 
          Schaltfläche <literal>Löschen</literal>, um das markierte Modellelement 
          aus dem Modell zu löschen. Die Symbole dazwischen, hängen vom jeweiligen 
          Modellelement ab. 
        </para>

        <para>
          Der Rest des Registers enthält Felder, die in zwei oder drei Spalten 
          angeordnet sind. Jedes Feld ist links davon bezeichnet. Die Felder 
          können Textfelder, Textbereiche, DropDown-Felder, Auswahlfelder oder 
          Markierfelder sein. In den meisten (aber nicht in allen Fällen) Fällen 
          können die Werte geändert werden. Bei Textfeldern ist dies manchmal nur
          das Eingeben des erforderlichen Wertes.
        </para>

        <para>
          Jedoch bei vielen Textfeldern und Textbereichen erfolgt die 
          Dateneingabe über ein kontextsensitives Popup-Menü (mit Hilfe des 
          Taste&nbsp;2-Klicks), welches die Optionen anbietet, um neue Einträge 
          hinzuzufügen, einen Eintrag zu löschen oder Einträge nach oben oder 
          nach unten zu bewegen (in Textbereichen mit Mehrfach-Einträgen).
        </para>

        <para>
          Das erste Feld ist meist immer ein Textfeld mit der Bezeichnung 
          <literal>Name</literal>, wo der Name des spezifischen Modellelementes 
          eingegeben werden kann. Die verbleibenden Felder variieren, je nach 
          markiertem Modellelement.
        </para>

        <para>
          Die detaillierten Eigenschaftstabellen für alle ArgoUML-Modellelemente 
          werden in separaten Kapiteln für jeden Diagrammtyp diskutiert (
          Anwendungsfalldiagramm (<xref linkend="ch.ref.entusecase"/>, 
          Klassendiagramm (<xref linkend="ch.ref.entclass"/>, Sequenzdiagramm 
          (<xref linkend="ch.ref.entseq"/>, Zustandsdiagramm (
          <xref linkend="ch.ref.entstate"/>, Kollaborationsdiagramm (
          <xref linkend="ch.ref.entcollab"/>, Aktivitätsdiagramm (
          <xref linkend="ch.ref.entactiv"/>, Verteilungsdiagramm (
          <xref linkend="ch.ref.entdeploy"/>). Eigenschaftstabellen für 
          Modellelemente, die sehr häufig in allen Diagrammtypen erscheinen, 
          haben ihr eigenes Kapitel (<xref linkend="ch.ref.entities"/>).
        </para>

        <caution>

          <para>
            ArgoUML wird immer versuchen, alle Felder auf dem Register 
            Eigenschaften auszugeben. Ist die Größe des Registers Eigenschaften 
            zu klein, wird es unhandlich. Die Lösung ist, entweder das Register 
            Eigenschaften durch vergrößern des Hauptfensters oder durch 
            verschieben der Bereichsteiler nach links und nach oben ebenfalls zu 
            vergrößern 
          </para>

        </caution>

      </sect1>

      <sect1 id="s2.ref.documentation_tab">

        <title>Das Register Dokumentation</title>

        <para>
          Innerhalb des UML&nbsp;1.4-Standards sind alle Modellelemente 
          Subelemente der Metaklasse <literal>Element</literal>. Die Metaklasse 
          <literal>Element</literal> definiert einen gekennzeichneten Wert 
          <literal>Dokumentation</literal> für einen Kommentar, eine Beschreibung 
          oder eine Erläuterung eines jeden Elementes. Da dieser gekennzeichnete 
          Wert zu jedem Modellelement gehört, hat er sein eigenes Register im 
          Bereich Details erhalten und nicht im Bereich 
          <literal>Eigenschaftswerte</literal>.
        </para>

        <para>
          <xref linkend="fig.ref.details_documentation"/> zeigt ein typisches 
          Register Dokumentation für ein Modellelement in ArgoUML.
        </para>

        <figure id="fig.ref.details_documentation">

          <title>Ein typisches Register <literal>Dokumentation</literal> im 
          Bereich Details</title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_documentation.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <para>
          Wie Sie sehen können, wurden sehr viel mehr Felder dem 
          Dokumentationsfeld hinzugefügt. Die anderen Felder speichern Ihre 
          Informationen gewöhnlich unter Eigenschaftswerte: 
          <literal>Autor</literal>,
          <literal>Version</literal>, 
          <literal>Seit</literal>, 
          <literal>Veraltet</literal>, 
          <literal>Siehe</literal>.
        </para>
        
        <para>
          Die Felder in diesem Register sind für alle Modellelemente die 
          gleichen.
        </para>

        <para>
          Da UML-Kommentare eine Art von Dokumentation sind, werden sie auch in 
          diesem Register mit ihrem Namen und Erläuterungen angezeigt.
        </para>

        <itemizedlist>

          <listitem>

            <para>
              <literal>Autor:</literal> Ein Textfeld für den Autor der 
              Dokumentation.
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Version:</literal> Ein Textfeld für die Version dieser 
              Dokumentation. 
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Seit:</literal> Ein Textfeld, das angibt, seit wann die 
              Dokumentation gültig ist. 
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Veraltet:</literal> Ein Markierfeld, das angibt, ob das 
              Modellelement veraltet ist (z.B. soll in künftigen Versionen des 
              Designmodelles entfernt werden).
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Siehe:</literal> Referenzen auf Dokumentationen ausserhalb 
              dieses Systems. 
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Dokumentation:</literal> Der Text einer Dokumentation.
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Kommentarbezeichnung:</literal> Die Namen aller 
              Kommentare, die diesem Modellelement hinzugefügt wurden.
            </para>

          </listitem>
          
          <listitem>

            <para>
              <literal>Kommentar:</literal> 
              Die diesem Modellelement hinzugefügten Kommentare.
            </para>

          </listitem>
          
        </itemizedlist>

        <tip>

          <para>
            ArgoUML ist primär kein Dokumentationssystem. Bei Modellelementen, 
            die eine umfangreiche Dokumentation erfordern, zum Beispiel 
            Anwendungsfälle, verwenden Sie das Feld <literal>Siehe:</literal>, 
            um auf externe Dokumente zu verweisen. Dies ist praktischer.
          </para>

        </tip>

      </sect1>

      <sect1>

        <title>Das Register Darstellung</title>

        <para>
          Dieses Register enthält eine begrenzte Steuerung der grafischen 
          Darstellung von Modellelementen im Diagramm des Editierbereiches. 
        </para>

        <para>
          Modellelemente, die keine spezifische grafische Repräsentation auf 
          dem Bildschirm (neben ihrer Textbeschreibung) haben, weisen keine 
          Register Darstellung auf. Die Darstellungs-Tabelle einer Operation 
          einer Klasse, zum Beispiel, wird deaktiviert.  
        </para>

        <para>
          Darstellungstabellen variieren etwas von Modellelement zu Modellelement, 
          aber <xref linkend="fig.ref.details_style"/> zeigt ein typisches 
          Register Darstellung für ein Modellelement in ArgoUML (in diesem Fall 
          eine Klasse).
        </para>

        <figure id="fig.ref.details_style">

          <title>
            Eine typisches Register <literal>Darstellung</literal> im 
            Bereich Details
          </title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_style.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <para>
          In einigen Fällen können weitere Felder vorhanden sein, z.B. für ein 
          Paket. Aber die meisten Felder sind den Modellelementen gemeinsam.
        </para>

        <itemizedlist>

          <listitem>
            <para>
              <literal>Pfad</literal>
              Dieses Markierfeld erlaubt es, den Pfad vor dem Namen des 
              Modellelementes auszugeben oder nicht. Er wird in der UML-Notation 
              durch <literal>::</literal>-Trenner dargestellt. Zum Beispiel würde 
              die Klasse Main von ArgoUML wie folgt angezeigt:
              <literal>org::argouml::application::Main</literal>.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Attribute</literal>
              Dieses Markierfeld erlaubt es, den Attributbereich einer Klasse 
              ein- und auszublenden.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Operation</literal>
              Dieses Markierfeld erlaubt es, den Operationsbereich einer Klasse 
              oder einer Schnittstelle ein- und auszublenden.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Stereotyp</literal>
              Dieses Markierfeld erlaubt es, die über dem Namen dargestellten 
              Stereotypen eines Paketes ein- und auszublenden.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Sichtbarkeit</literal>
              Dieses Markierfeld erlaubt es, die Sichtbarkeit eines Paketes ein- 
              und auszublenden.
              Die Sichtbarkeit wird in der UML-Notation als  +, -, # oder ~ 
              dargestellt.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Erweiterungspunkte</literal>
              Das Markierfeld erlaubt es Ihnen, die Erweiterungspunkte von 
              Anwendungsfällen ein- und auszublenden.
            </para>
          </listitem>

          <listitem>
            <para>
              <literal>Begrenzung:</literal> Sie definiert die Ecken des 
              2D-Modellelementes. Es besteht aus vier, durch Kommas separierte 
              Nummern. Diese vier Nummern sind: i) die X-Koordinate der linken 
              oberen Ecke; ii) die Y-Koordinate der linken oberen Ecke; iii) 
              die Breite des Feldes und iv) die Höhe des Feldes. Alle Einheiten 
              sind Pixel im Editierbereiches. 
            </para>

            <para>
              Dieses Feld hat bei 1D-Modellelementen, die andere Modellelemente 
              verbinden (Assoziationen, Vererbungen, usw.) keine Auswirkung, da 
              deren Position durch ihre Verbindungspartner bestimmt wird. In 
              diesem Fall ist dieses Feld deaktiviert.
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Füllfarbe:</literal> Diese DropDown-Auswahl bestimmt die 
              Füllfarbe der 2D-Modellelemente. Sie ist bei Linien-Modellelementen 
              nicht vorhanden. Die Auswahl <literal>Keine Füllfarbe</literal> 
              macht das Modellelement transparent. Die Auswahl <literal>
              Benutzerdefiniert</literal> erlaubt es andere Farben auszuwählen, 
              als die derzeit aufgelisteten. Die Auswahl dieses Eintrages öffnet 
              den Farbauswahl-Dialog, siehe 
              <xref linkend="fig.ref.details_style_colorpicker1"/>.
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Linienfarbe:</literal> Diese DropDown-Auswahl bestimmt die 
              Linienfarbe der Modellelemente. Die Auswahl <literal>Keine 
              Linienfarbe</literal> macht das Modellelement transparent. Die 
              Auswahl <literal>Benutzerdefiniert</literal> erlaubt es andere 
              Farben auszuwählen, als die derzeit aufgelisteten. Die Auswahl 
              dieses Eintrages öffnet den Farbauswahl-Dialog, siehe
              <xref linkend="fig.ref.details_style_colorpicker1"/>.
            </para>

          </listitem>

        </itemizedlist>

        <figure id="fig.ref.details_style_colorpicker1">

          <title>
            Der Dialog <literal>Benutzerdefinierte Füll-/Linienfarbe</literal>
          </title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_style_colorpicker1.png"
           				   format="PNG"/>
           		</imageobject>
           	  </mediaobject>
           	</screenshot>
        </figure>

        <figure id="fig.ref.details_style_colorpicker2">

          <title>
            Der Dialog <literal>Benutzerdefinierte Füll-/Linienfarbe</literal> 
          </title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_style_colorpicker2.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <figure id="fig.ref.details_style_colorpicker3">

          <title>
            Der Dialog <literal>Benutzerdefinierte Füll-/Linienfarbe</literal> 
          </title>

          <screenshot>
          	<mediaobject>
          	  <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_style_colorpicker3.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

      </sect1>

      <sect1>

        <title>Das Register Quellcode</title>

        <para>
          Dieses Register zeigt den Quellcode, der für dieses Modellelement in 
          der ausgewählten Sprache generiert wurde. ArgoUML generiert den Code 
          zum Beispiel für Klassen und Schnittstellen. Der hier gezeigte Code 
          kann in den angezeigten Dateien mit Hilfe der Funktionen im Menü 
          Generieren gespeichert werden. 
        </para>

        <figure id="fig.ref.details_source">

          <title>Das Register Quellcode einer Klasse.</title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_source.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>
        
        <para>
          Jeder von Ihnen hinzugefügte Code geht verloren - das ist nicht die 
          Absicht von ArgoUML - verwenden Sie stattdessen eine IDE.
        </para>
        
        <para>
          Das rechte Auswahlfeld erlaubt die Auswahl der Ausgabedatei. Diese 
          Funktion ist nicht sehr sinnvoll für Sprachen, die den gesamten Code 
          einer Klasse in einer Datei speichern, aber sie erfüllt seinen Zweck 
          für z.B. C++, wo eine .h und .cpp-Datei generiert wird. Sie 
          nachfolgendes Bild.
        </para>
         
        <figure id="fig.ref.details_source_cpp">

          <title>Ein C++ Beispiel.</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata align="center"
           				   fileref="images/reference/details_source_cpp.png"
           				   format="PNG"/>
           		</imageobject>
           	  </mediaobject>
           	</screenshot>
        </figure>
        
      </sect1>

      <sect1 id="s1.ref.details_constraints">

        <title>Das Register Randbedingungen</title>

        <para>
          Randbedingungen sind einer der in UML enthaltenen 
          Erweiterungsmechanismen. ArgoUML ist mit einem leistungsfähigen 
          Randbedingungseditor ausgerüstet, der auf der im UML&nbsp;1.4-Standard 
          definierten <emphasis>Objekt Randbedingungssprache (Object Constraint 
          Language; OCL)</emphasis> basiert.
        </para>

        <caution>

          <para>
            Die OCL-Editorimplementierung für ArgoUML V0.24 unterstützt keine 
            OCL-Randbedingungen außer Klassen und Eigenschaften.
          </para>

          <para>
            Dies ist machmal eine sehr starke Einschränkung von OCL. Obwohl die 
            UML-Spezifikation bestimmt, dass es für jedes Modellelement 
            Randbedingungen geben kann, spezifiziert die OCL-Spezifikation diese 
            nur für Klassen/Schnittstellen und Operationen im zulässigen Kontext.
          </para>

          <para>
            Vor OCL 2.0 wird keine generellere Definition von erlaubten Kontexten 
            eingeführt. Der Schlüssel ist, dass Sie für jede benötigte 
            Kontextdefinition einen kontextspezifischen Klassifizierer definieren 
            müssen. Zum Beispiel einen Klassifizierer, der mit dem gleichen 
            Schlüsselwort verknüpft wird. Die Ersteller der OCL-Spezifikation 
            führen aus, dass dies kein Fehler der OCL-Spezifikation ist, aber 
            selbst für UML einige Integrationsschritte erfordert. Es sieht so 
            aus, das die Personen, die UML spezifizierten dachten, das dies in 
            OCL spezifiziert wird (aus diesem Grund tun wir einen ersten Schritt 
            in Richtung OCL 2.0). 
          </para>

          <para>
            Um die Geschichte abzukürzen, scheint es so, dass es im Moment die 
            einfachste Lösung für ArgoUML ist, den OCL-Eigenschaftsbereich nur 
            für solche Modellelemente freizugeben, für die es aktuell eine 
            Definition der kontextsensitiven Klassifizierer in der OCL 1.4 gibt. 
            Dies sind (siehe oben) Klassen/Schnittstellen und Eigenschaften.
          </para>

        </caution>

        <para>
          Der Standard definierte eine kleine Anzahl von Randbedingungen vor (
          zum Beispiel die Bedingung <literal>xor</literal> über einen Satz von 
          Assoziationen, was anzeigt, dass nur einer in einer bestimmten Instanz 
          bekannt ist).
        </para>

        <para>
          Der Standard hat auch eine Anzahl von Umständen im Auge, in denen 
          generelle Randbedingungen hilfreich sein können:
        </para>

        <itemizedlist>

          <listitem>

            <para>
              Um zu kennzeichenen, dass sich Klassen und Typen im Klassenmodell 
              nicht ändern (Invarianz);
            </para>

          </listitem>

          <listitem>

            <para>
              Um zu kennzeichnen, dass sich Typen von Stereotypen nicht 
              ändern (Invarianz);
            </para>

          </listitem>

          <listitem>

            <para>
              Um Vor- und Nachbedingungen in Operationen und Methoden 
              zu beschreiben;
            </para>

          </listitem>

          <listitem>

            <para>Um Wächter zu beschreiben;</para>

          </listitem>

          <listitem>

            <para>Als Sprachnavigation; und</para>

          </listitem>

          <listitem>

            <para>um Bedingungen in Operationen zu spezifizieren.</para>

          </listitem>

        </itemizedlist>

        <para>
          <xref linkend="fig.ref.details_constraints"/> zeigt ein typisches 
          Register Randbedingungen für ein Modellelement in ArgoUML (in diesem 
          Fall eine Klasse). 
        </para>

        <figure id="fig.ref.details_constraints">

          <title>
            Ein typisches Register <literal>Randbedingungen</literal> im 
            Bereich Details
          </title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/details_constraints.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <para>
          Im oberen Bereich des Registers befinden sich eine Reihe von Symbolen.
		</para>

        <itemizedlist>

          <listitem>

            <para>
              <guiicon>
                <inlinemediaobject>
                  <imageobject>
                    <imagedata align="center"
             				   fileref="images/icons/new_constraint.gif"
             				   format="GIF"/>
             	  </imageobject>
             	</inlinemediaobject>
              </guiicon> 
              <literal>Neue Randbedingung</literal>. Erzeugt eine neue 
              Randbedingung und startet den Bedingungseditor im <literal>
              Register Randbedingung</literal> für diese neue Randbedingung (
              siehe <xref linkend="s2.ref.details_constraint_editor"/>).
              Die neue Randbedingung wird mit einer Kontextdeklaration für das 
              aktuell markierte Modellelement erstellt. 
            </para>

            <warning>

              <para>
                Es scheint logisch, dass eine neue erstellte Randbedingung 
                editiert werden muss. Aber ArgoUML V0.24 läuft beim Starten des 
                OCL-Editors auf einen Fehler; sie müssen dies wie folgt tun: 
                Erstens: die neue Randbedingung zuerst markieren, Zweitens: 
                diese umbenennen und Drittens: die Schaltfläche <literal>
                Bearbeiten Randbedingung</literal> drücken. Es ist wesentlich 
                für das erfolgreiche Erzeugen einer Randbedingung diesen vier 
                Schritt akkurat zu folgen: erzeugen, markieren, umbenennen und 
                editieren. Der Schritt des Umbenennens ist notwendig, weil die 
                Gültigkeitsprüfung diese Randbedingung ablehnt, weil ihr Name 
                von dem im Randbedingungstext benannten Namen abweicht. Aus dem 
                gleichen Grund ist eine spätere Umbenennung einer Bedingung 
                nicht möglich. 
              </para>

            </warning>

          </listitem>

          <listitem>

            <para>
              <guiicon>
                <inlinemediaobject>
                  <imageobject>
             		<imagedata align="center"
             				   fileref="images/icons/delete_constraint.gif"
             				   format="GIF"/>
             	  </imageobject>
             	</inlinemediaobject>
              </guiicon> 
              <literal>Bedingung löschen</literal>. Die aktuell im Feld 
              <literal>Name der Bedingung</literal> markierte Bedingung (siehe 
              unten) wird gelöscht. 
            </para>

            <caution>

              <para>
                In der V0.24 von ArgoUML wird diese Schaltfläche nicht deaktiviert, 
                wenn sie inaktiv ist, z.B., wenn keine Bedingung markiert ist.
              </para>

            </caution>

          </listitem>

          <listitem>

            <para>
              <guiicon>
                <inlinemediaobject>
                  <imageobject>
            		<imagedata align="center"
             				   fileref="images/icons/edit_constraint.gif"
             				   format="GIF"/>
             	  </imageobject>
             	</inlinemediaobject>
               </guiicon> 
              <literal>Bedingung editieren</literal>. Dies startet den 
              Bedingungseditor im Register <literal>Randbedingungen</literal> 
              (siehe <xref linkend="s2.ref.details_constraint_editor"/>).
              Der Editor wird mit dem aktuell im Feld <literal>Name Bedingung
              </literal> markierten Randbedingung aufgerufen. 
            </para>

            <caution>

              <para>
                In der V0.24 von ArgoUML wird diese Schaltfläche nicht deaktiviert, 
                wenn sie inaktiv ist, z.B., wenn keine Bedingung markiert ist.
              </para>

            </caution>

          </listitem>

          <listitem>

            <para>
              <guiicon>
                <inlinemediaobject>
                  <imageobject>
            		<imagedata align="center"
             				   fileref="images/icons/configure_constraints.gif"
             				   format="GIF"/>
             	  </imageobject>
             	</inlinemediaobject>
              </guiicon> 
              <literal>Bedingungseditor konfigurieren</literal>. Dies ist ein 
              Dialog, um die Optionen des Bedingungseditors zu konfigurieren 
              (siehe <xref linkend="fig.ref.details_constraints_dialog"/>).
            </para>

            <figure id="fig.ref.details_constraints_dialog">

              <title>Dialog zum Konfigurieren von Bedingungen</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
              		<imagedata align="center"
               				   fileref="images/reference/details_constraints_dialog.png"
               				   format="PNG"/>
               	  </imageobject>
               	</mediaobject>
              </screenshot>
            </figure>

            <para>
              Der Dialog hat ein Markierfeld für die folgende Option.
            </para>

            <itemizedlist>

              <listitem>

                <para>
                  <literal>Typkonformität von OCL-Bedingungen prüfen 
                  </literal>. OCL ist strikt typisiert. Zu frühen 
                  Designzeitpunkten kann es hilfreich sein, die Typprüfung 
                  auszuschalten. Dies ist besser, als allen benötigten, 
                  detaillierten Spezifikationen zu folgen, die erforderlich sind 
                  um Typkonsistenz zu erreichen. 
                </para>

              </listitem>

            </itemizedlist>

            <para>
              Am unteren Ende befinden sich zwei Schaltflächen, die mit 
              <literal>OK</literal> (um die Optionsänderungen zu akzeptieren) 
              und <literal>Abbrechen</literal> (um die Änderungen rückgängig 
              zu machen).
            </para>

          </listitem>

        </itemizedlist>

        <para>
          Der Rumpf des Registers Randbedingungen enthält zwei Felder, ein 
          kleineres auf der linken Seite und ein grösseres auf der rechten Seite. 
          Die beiden sind durch zwei kleine Pfeil-Schaltflächen getrennt, 
          welche die Grösse der Felder steuern.
        </para>

        <itemizedlist>

          <listitem>

            <para>
              <guiicon>
                <inlinemediaobject>
                  <imageobject>
            	    <imagedata align="center"
             				   fileref="images/icons/constraints_left.gif"
             				   format="GIF"/>
             	  </imageobject>
             	</inlinemediaobject>
              </guiicon> 
              <literal>Linkes Feld verkleinern</literal>. Ein Taste&nbsp;1-Klick 
              auf dieses Symbol verkleinert das linke Feld. Dieser 
              Effekt kann durch die Schaltfläche <literal>Rechtes Feld 
              verkleinern</literal> aufgehoben werden (siehe unten). 
            </para>

          </listitem>

          <listitem>

            <para>
              <guiicon>
                <inlinemediaobject>
                  <imageobject>
            		<imagedata align="center"
             				   fileref="images/icons/constraints_right.gif"
             				   format="GIF"/>
             	  </imageobject>
             	</inlinemediaobject>
              </guiicon> 
              <literal>Rechtes Feld verkleinern</literal>. Ein Taste&nbsp;1-Klick 
              auf dieses Symbol verkleinert das rechte Feld. Dieser 
              Effekt kann durch die Schaltfläche <literal>Linkes Feld verkleinern
              </literal> aufgehoben werden (siehe oben).
			</para>

          </listitem>

        </itemizedlist>

        <para>
          Eine feiner abgestimmte Steuerung kann durch eine Taste&nbsp;1-
          Bewegung erfolgen, indem Sie die Trennungsleiste nach links und nach 
          rechts verschieben.
        </para>

        <para>
          Das linke Feld ist mit <literal>Name Bedingung</literal> bezeichnet 
          und listet alle Bedingungen auf (wenn es welche gibt) so weit sie 
          für das markierte Modellelement definiert wurden. Eine Bedingung kann 
          durch einen Taste&nbsp;1-Klick markiert werden.
        </para>

        <para>
          Das rechte Feld ist mit <literal>Vorschau</literal> bezeichnet und 
          enthält den Text der Bedingung. Dieses Feld zeigt nur einen Inhalt an, 
          wenn eine Bedingung markiert wurde. Ist eine Bedingung für das Feld 
          zu groß, erscheint rechts eine Scrollleiste.
        </para>

        <sect2 id="s2.ref.details_constraint_editor">

          <title>Der Bedingungs-Editor</title>

          <para>
            Dieser wird durch die Schaltfläche <literal>Editiere Bedingung
            </literal> im Register <literal>Bedingungen</literal> aufgerufen. 
            Der Bedingungseditor nimmt das ganze Register ein (siehe 
            <xref linkend="fig.ref.details_constraint_editor"/>).
          </para>

          <figure id="fig.ref.details_constraint_editor">

            <title>Dialog für das Konfigurieren der Bedingungen</title>

            <screenshot>
              <mediaobject>
                <imageobject>
            	  <imagedata align="center"
             				 fileref="images/reference/details_constraint_editor.png"
             				 format="PNG"/>
             	</imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para>
            Im oberen Bereich des Registers befinden sich eine Reihe von 
            Symbolen.
          </para>

          <itemizedlist>

            <listitem>

              <para>
                <guiicon>
                  <inlinemediaobject>
                    <imageobject>
              		  <imagedata align="center"
               					 fileref="images/icons/cancel_edit_constraint.gif"
               					 format="GIF"/>
               		</imageobject>
               	  </inlinemediaobject>
               	</guiicon> 
                <literal>Editieren abbrechen</literal>. Dies beendet den 
                Bedingungseditor ohne die Änderungen abzuspeichern und kehrt 
                zum Haupt-<literal>Bedingungen</literal>-Register zurück.
              </para>

            </listitem>

            <listitem>

              <para>
                <guiicon>
                  <inlinemediaobject>
                    <imageobject>
              		  <imagedata align="center"
               					 fileref="images/icons/check_constraint.gif"
               					 format="GIF"/>
               		</imageobject>
               	  </inlinemediaobject>
               	</guiicon> 
                <literal>Prüfe OCL-Syntax</literal>. Diese Schaltfläche ruft 
                eine vollständige Syntaxprüfung der im Editor geschriebenen OCL 
                auf. Ist die Syntax gültig, wird die Bedingung gespeichert und 
                kehrt zum Haupt-<literal>Bedingungen</literal>-Register zurück. 
                Wenn die Syntax ungültig ist, erläutert ein Dialogfenster das 
                Problem. 
              </para>

              <warning>

                <para>
                  Ob die Typprüfung eingebunden wird, sollte mit der Schaltfläche 
                  <literal>Bedingungseditor konfigurieren</literal> einstellbar 
                  sein (siehe unten). ArgoUML V0.20 prüft aber immer und lehnt 
                  jede Bedingung mit dem kleinsten Fehler ab.
                </para>

              </warning>

            </listitem>

            <listitem>

              <para>
                <guiicon>
                  <inlinemediaobject>
                    <imageobject>
              		  <imagedata align="center"
               					 fileref="images/icons/configure_constraints.gif"
               					 format="GIF"/>
               		</imageobject>
               	  </inlinemediaobject>
               	</guiicon> 
                <literal>Bedingungseditor konfigurieren</literal>. Dies ist 
                ein Dialog, um die Optionen des Bedingungseditors zu 
                konfigurieren. Er ist auch im Haupt-<literal>Bedingungen
                </literal>-Register verfügbar und wird dort detailliert 
                beschrieben (siehe <xref linkend="s1.ref.details_constraints"/>
                ).
              </para>

            </listitem>

          </itemizedlist>

          <para>
            Rechts von der Symbolleiste befindet sich ein Markierfeld, das als 
            <literal>Syntaxunterstützung</literal> bezeichnet ist (standardmäßig 
            nicht markiert). Dieses schaltet die Syntaxunterstützung im 
            Bedingungseditor ein.
          </para>

          <para>
            Wenn die Syntaxunterstützung eingeschaltet ist, erscheinen sechs 
            DropDown-Menüs in einer Zeile unmittelbar unterhalb der Symbolleiste. 
            Diese enthalten Standardtemplates für OCL, die in die editierte 
            Bedingung eingefügt werden, sofern sie ausgewählt werden.
          </para>

          <para>
            Die Syntaxunterstützung kann in ein separates Fenster gebracht 
            werden, indem man mit einer Taste&nbsp;1-Bewegung des kleinen, links 
            befindlichen Trenners die Zeile mit den DropDown-Menüs aus dem 
            Fenster bewegt. 
          </para>

          <itemizedlist>

            <listitem>

              <para>
                <literal>Allgemein</literal>. Allgemeine OCL 
                Konstrukte. Einträge: <literal>inv</literal> (fügt eine Invarianz  
                ein); <literal>pre</literal> (fügt eine Vorbedingung ein); 
                <literal>post</literal> (fügt eine Nachbedingung ein); 
                <literal>self</literal> (fügt eine Referenz auf sich selbst ein); 
                <literal>@pre</literal> (fügt eine Referenz auf einen Wert beim 
                Start einer Operation ein); und 
                <literal>result</literal> (fügt eine Referenz auf ein 
                vorhergehendes Ergebnis ein).
              </para>

            </listitem>

            <listitem>

              <para>
                <literal>Operatoren</literal>. Relationale Operatoren und  
                Klammern. Einträge: <literal>=</literal>; 
                <literal>&lt;&gt;</literal>; <literal>&lt;</literal>; 
                <literal>&gt;</literal>; <literal>&lt;=</literal>; 
                <literal>&gt;=</literal>; und <literal>
                ()</literal>.
              </para>

            </listitem>

            <listitem>

              <para>
                <literal>Nummern</literal>. Arithmetische Operatoren und  
                Funktionen. Einträge: <literal>+</literal>; <literal>
                -</literal>; <literal>*</literal>; <literal>/</literal>; 
                <literal>mod</literal>; <literal>div</literal>; <literal>
                abs</literal>; <literal>max</literal>; <literal>
                min</literal>; <literal>round</literal>; und <literal>
                floor</literal>.
              </para>

            </listitem>

            <listitem>

              <para>
                <literal>Zeichenketten</literal>. Funktionen für Zeichenketten. 
                Einträge: <literal>concat</literal>; <literal>
                size</literal>; <literal>toLower</literal>; <literal>
                toUpper</literal>; und <literal>
                substring</literal>.
              </para>

            </listitem>

            <listitem>

              <para>
                <literal>Booleans</literal>. Logische Funktionen. 
                Einträge: <literal>or</literal>; <literal>and</literal>; 
                <literal>xor</literal>; <literal>not</literal>; <literal>
                implies</literal>; und <literal>
                if then else</literal>.
              </para>

            </listitem>

            <listitem>

              <para>
                <literal>Sammlungen</literal>. Operatoren und 
                Funktionen für Sammlungs&mdash;Mengen , Sätzen und Sequenzen. 
                Die grosse Anzahl von Funktionen ist in Untergruppen unterteilt.
              </para>

              <itemizedlist>

                <listitem>

                  <para>
                    <literal>Allgemein</literal>. Funktionen, die auf alle 
                    Sammlungstypen anwendbar sind. Einträge: <literal>
                    Collection {}</literal> (fügt eine neue Sammlung ein); 
                  <literal>Set {}</literal> (fügt einen neuen Satz ein); 
                  <literal>Bag {}</literal> (fügt eine neue Menge ein); 
                  <literal>Sequence {}</literal> (fügt eine neue Sequenz ein); 
                  <literal>size</literal>; <literal>
                  count</literal>; <literal>isEmpty</literal>; <literal>
                  notEmpty</literal>; <literal>includes</literal>; 
                  <literal>includesAll</literal>; <literal>
                  iterate</literal>; <literal>exists</literal>; 
                  <literal>forAll</literal>; <literal>
                  collect</literal>; <literal>select</literal>; 
                  <literal>reject</literal>; <literal>union</literal>; 
                  <literal>intersection</literal>; <literal>
                  including</literal>; <literal>excluding</literal>; 
                  und <literal>sum</literal>.
                  </para>

                </listitem>

                <listitem>

                  <para>
                    <literal>Sätze</literal>. Operatoren und Funktionen die nur
                    auf Sätze anwendbar sind. Einträge: <literal>
                    -</literal> (set difference); und <literal>
                    symmetricDifference</literal>.
                  </para>

                </listitem>

                <listitem>

                  <para>
                    <literal>Sequenzen</literal>. Funktionen, die nur auf  
                    Sequenzen anwendbar sind. Einträge: <literal>
                    first</literal>; <literal>last</literal>; <literal>
                    at</literal>; <literal>append</literal>; <literal>
                    prepend</literal>; und <literal>
                    subSequence</literal>.
                  </para>

                </listitem>

              </itemizedlist>

            </listitem>

          </itemizedlist>

          <para>
            Der Rest des Registers beinhaltet ein beschreibbares Textfeld, 
            welches den zu editierenden Text enthält. Die Maus-Schaltflächen 
            weisen innerhalb des editierbaren Textfeldes ihr Standardverhalten 
            auf (siehe <xref linkend="s1.ref.mouse"/>).
          </para>

          <para>
            Zusätzlich können Ausschneiden-, Kopieren- und Einfügen-Operationen 
            über die Tastenkürzel <literal>Strg-X</literal>, <literal>Strg-C
            </literal> und <literal>Strg-V</literal> aufgerufen werden.
          </para>

          <!--warning>

            <para>There is a known problem with the V0.20 release of 
            ArgoUML. The <literal>Cut</literal>, <literal>
            Copy</literal> and <literal>Paste</literal> functions on 
            the <literal>Edit</literal> menu cannot be used within the 
            constraint editor. If used they will work on the currently 
            selected model element in the editing pane.</para>

          </warning-->

        </sect2>

      </sect1>
      
      <sect1>
      <title>Das Register Stereotypen</title>
      
      <para>
        Dieses Register zeigt die verfügbaren und anwendbaren Stereotypen für 
        das aktuell markierte Modellelement. Es besteht aus zwei Feldern und 
        zwei Schaltflächen. Die Schaltflächen erlauben es, die Stereotypen von 
        einer Liste in die andere zu bewegen.
      </para>
      
      <figure id="fig.ref.detpane_stereotype">

          <title>Ein Beispiel eines Registers Stereotypen für eine Klasse.</title>

          <screenshot>
            <mediaobject>
              <imageobject>
               <imagedata align="center"
           				  fileref="images/reference/detpane_stereotype.png"
           				  format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>
        
        <para>
          In den Listen, zwischen <literal>[]</literal> wird die Basisklasse 
          der Stereotypen angezeigt. Zum Beispiel in dem obigen Bild kann der 
          Stereotyp <literal>thread[Classifier]</literal> auf alle Typen von 
          Klassifizierern wie Klassen, Anwendungsfälle, ... angewendet werden.
        </para>
        
      </sect1>

      <sect1>

        <title>Das Register Eigenschaftswerte</title>

        <para>
          Eigenschaftswerte sind ein anderer Erweiterungsmechanismus der in UML
          enthalten ist. Der Anwender kann Name-Wert-Paare definieren, die mit 
          Modellelementen verknüpft sind und die Eigenschaften dieses Modelles 
          definieren. Die Namen sind als <emphasis>tags</emphasis> bekannt. UML 
          definiert eine Anzahl von Tags vor, die für viele seiner Modellelemente 
          nützlich sind.
        </para>

        <note>

          <para>
            Die Tag-<literal>Dokumentation</literal> ist für die Top-UML-
            Metaklasse <literal>Element</literal> definiert und ist so in allen 
            Modellelementen verfügbar. In ArgoUML sind Dokumentationswerte im 
            Register <literal>Dokumentation</literal> enthalten, so dass diese 
            nicht mit Hilfe der <literal>Eigenschaftswerte</literal> definiert 
            werden müssen. 
          </para>

        </note>

        <para>
          Das Register <literal>Eigenschaftswerte</literal> in ArgoUML umfasst 
          eine zweispaltige Tabelle mit einem Kombinationsfeld links, um die Tag-
          Definition in einem editierbaren Feld auszuwählen und rechts für 
          den damit verknüpften Wert. Es gibt immer mindestens eine leere Zeile, 
          die für einen neuen Tag bereit steht. 
        </para>
        
        <para>
          Die Schaltfläche oben in diesem Register erlaubt das Erzeugen einer 
          neuen Tag-Definition. Nach dem Anklicken dieser Schaltfläche gehen Sie 
          zuerst in das Register Eigenschaften, um den Namen der neuen Tag-
          Definition festzulegen.
          <!-- Why does ArgoUML not do this? TODO: Create issue. -->
        </para>

        <para>
          die Maus-Schaltflächen weisen ihr Standardverhalten innerhalb des 
          editierbaren Wertebereiches auf (siehe <xref linkend="s1.ref.mouse"/>).
          Zusätzlich können Sie auch die Tastenkürzel <literal>
          Strg-X</literal>, <literal>Strg-C</literal> und <literal>
          Strg-V</literal> in einem Wertefeld aufrufen.
        </para>

      </sect1>

      <sect1>

        <title>Das Register Checkliste</title>

        <para>
          Das Durchführen von Designreviews und Inspektionen ist eine der 
          effektivsten Arten Fehler während der Softwareentwicklung zu entdecken.
          Ein Designreview besteht typischerweise aus einer kleinen Zahl von 
          Designern, Implementierern oder anderen Projektbeteiligter, die eine  
          Besprechung durchführen, um ein Stück Softwareentwicklung zu reviewen.
          Viele Entwicklungsorganisationen haben Checklisten  von häufigen 
          Designproblemen für solche Reviews entwickelt. Die Vergangenheit zeigt 
          auf, dass die Reviewer den Code ohne Besprechung mit Hilfe dieser 
          Checklisten überprüfen und dies genauso effektiv ist, wie die Design-
          Reviews in Form einer Besprechung. 
        </para>

        <para>
          Aus diesem Grund wurden ArgoUML Checklisten hinzugefügt, die den 
          Gedanken von der Design-Review-Checkliste unterstützen. Jedoch, sind 
          die ArgoUML-Checklisten in die Anwenderschnittstelle des Design-
          werkzeuges und in die Designarbeit integriert. 
        </para>

        <para>
          Ein Softwaredesigner, der ArgoUML verwendet, kann für jedes 
          Designelement eine Checkliste sehen. Das Register <quote>Checkliste
          </quote> präsentiert eine Liste von unmarkierten Elementen, die zum 
          aktuell markierten Designelement gehören. Zum Beispiel, wenn eine 
          Klasse in einem Designdiagramm markiert ist, zeigt das Register 
          Checklisten Elemente, die zum kritischen Nachdenken über diese Klasse 
          anregen. Siehe nachfolgendes Bild. Designer können Elemente als 
          betrachtet markieren. Markierte Elemente verbleiben in der Liste, um 
          darzustellen, dass Sie bereits betrachtet wurden, während unmarkierte 
          Elemente den Designer auffordern, über diesen neuen Designaspekt 
          nachzudenken. ArgoUML unterstützt unterschiedliche Checklisten mit 
          vielen möglichen Elementen.
        </para>

        <figure id="fig.ref.detpane_checklist">

          <title>Ein Beispiel für eine Checkliste einer Klasse.</title>

          <screenshot>
            <mediaobject>
              <imageobject>
          		<imagedata align="center"
           				   fileref="images/reference/detpane_checklist.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <caution>

          <para>
            In der Release V0.22 von ArgoUML ist dieses Register nicht 
            vollständig implementiert. Zum Beispiel werden die Markierungen 
            nicht gespeichert.
          </para>

        </caution>

      </sect1>

    </chapter>

    <chapter id="ch.ref.todopane">

      <title>Der Bereich Zu-Bearbeiten</title>

      <sect1>

        <title>Einleitung</title>

        <para>
          <xref linkend="fig.ref.todo_pane"/> zeigt das ArgoUML-Fenster mit dem 
          hervorgehobenen Bereich Zu-Bearbeiten.
        </para>

        <figure id="fig.ref.todo_pane">

          <title>Überblick über den Bereich Zu-Bearbeiten</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata align="center"
           				   fileref="images/reference/todo_pane.png"
           				   format="PNG"/>
           	  </imageobject>
           	</mediaobject>
          </screenshot>
        </figure>

        <para>
          Dieser Bereich hat Zugriff auf die Ergebnisse des Kritikenprozesses, 
          der innerhalb von ArgoUML abläuft.
        </para>

        <para>
          Ein Auswahlfeld oben erlaubt die Einstellung, wie die Daten dargestellt 
          werden, eine Schaltfläche erlaubt es, die Darstellung der Hierarchie 
          zu ändern und es gibt eine Anzeige, wie viele Zu-Bearbeiten-Elemente 
          identifiziert wurden.
        </para>

        <para>
          Mehr Informationen über Kritiken können Sie in der Diskussion des 
          <literal>Kritiken</literal>-Menüs (siehe 
          <xref linkend="s1.ref.menu_critique"/>) finden.
        </para>

      </sect1>

      <sect1 id="s1.ref.todo_mouse">

        <title>Das Verhalten der Maus im Bereich Zu-Bearbeiten</title>

        <para>
          Das generelle Verhalten der Maus und die Benennung der Tasten ist im 
          Kapitel über die gesamte Anwenderschnittstelle ausgeführt (siehe 
          <xref linkend="ch.ref.ui"/>).
        </para>

        <sect2>

          <title>Taste&nbsp;1-Klick</title>

          <para>
            Diese Aktion wird generell dazu verwendet, ein Element für darauf 
            folgende Operationen zu markieren.
          </para>

          <para>
            Innerhalb der hierarchischen Anzeige, können Elemente mit Unter-
            Hierarchien durch 
            <guiicon>
          	  <inlinemediaobject>
          	    <imageobject>
          	      <imagedata align="center"
           					 fileref="images/icons/hierarchy_closed.gif"
           					 format="GIF"/>
           		</imageobject>
           	  </inlinemediaobject>
           	</guiicon>
           	angezeigt werden, wenn die Hierarchie versteckt und  
            <guiicon>
          	  <inlinemediaobject>
          	    <imageobject>
          	      <imagedata align="center"
           					 fileref="images/icons/hierarchy_open.gif"
           					 format="GIF"/>
           		</imageobject>
           	  </inlinemediaobject>
           	</guiicon>
           	wenn die Hierarchie geöffnet ist. 
          </para>

          <para>
            Wenn diese Symbole angezeigt werden, wechselt die Anzeige der 
            Hierarchie bei jedem Taste&nbsp;1-Klick auf diese Symbole.
          </para>

          <para>
            Ein Taste&nbsp;1-Klick über der Überschrift eines Zu-Bearbeiten-
            Elementes wird dessen Details im Register <literal>Zu-Bearbeiten-
            Element</literal> des Bereiches Details anzeigen. Dieses Register 
            wird automatisch ausgewählt, wenn es aktuell nicht sichtbar ist.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;1-Doppelklick</title>

          <para>
            Wenn dies auf ein Verzeichnissymbol in der Hierarchie ausgeführt 
            wird, wird sich die Darstellung dieser Hierarchie ändern.
          </para>

          <para>
            Wenn dies auf eine Überschrift ausgeführt wird, wird der Taste&nbsp;
            1-Doppelklick das Diagramm für das Modellelement anzeigen, zu dem 
            das Zu-Bearbeiten-Element gehört und das Modellelement im Diagramm 
            mit Hilfe des entsprechenden Elementes markieren (das Modellelement 
            kann hervorgehoben, mit einer Wellenlinie unterstrichen oder mit 
            einem farbigem Rahmen umgeben sein).
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Aktionen</title>

          <para>
            Es gibt keine Taste&nbsp;2-Funktionen im Bereich Zu-Bearbeiten.
          </para>

        </sect2>

        <sect2>

          <title>Taste&nbsp;2-Doppelklick</title>

          <para>
            Es gibt keine Taste&nbsp;2-Funktionen im Bereich Zu-Bearbeiten.
          </para>

        </sect2>

      </sect1>

      <sect1>

        <title>Auswahl der Darstellung</title>

        <para>
          Oben im Bereich befindet sich ein Kombinationsfeld, was die Darstellung 
          der Zu-Bearbeiten-Elemente steuert. Die Zu-Bearbeiten-Elemente können 
          auf sechs unterschiedliche Arten dargestellt werden. Diese Einstellung 
          wird nicht dauerhaft gespeichert. Zum Beispiel ist sie auf den 
          Standardwert beim Start von ArgoUML eingestellt. 
        </para>

        <itemizedlist>

          <listitem>

            <para>
              <literal>Nach Priorität</literal>. Dies ist die 
              Standardeinstellung. Die Zu-Bearbeiten-Elemente werden nach 
              Priorität in drei Hierarchien organisiert: <literal>Hoch</literal>, 
              <literal>Mittel</literal> und <literal>Niedrig</literal>. 
              Die Priorität, die mit den durch eine bestimmte Kritik generierten 
              Zu-Bearbeiten-Elementen verknüpft sind, können über das Menü 
              <literal>Kritiken &gt; Kritiken anzeigen...</literal> geändert 
              werden (siehe <xref linkend="s2.ref.menu_browse_critics"/>).
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Nach Entscheidung</literal>. Die Zu-Bearbeiten-Elemente 
              sind in 17 Hierarchien anhand von Designmerkmalen organisiert: 
              <literal>Unkategorisiert</literal>, <literal>
              Klassenauswahl</literal>, <literal>Verhalten</literal>, 
              <literal>Benennung</literal>, <literal>Speicher</literal>, 
              <literal>Vererbung</literal>, <literal>
              Containment</literal>, <literal>
              Geplante Erweiterungen</literal>, <literal>
              Zustandsautomaten</literal>, <literal>
              Design Patterns</literal>, <literal>
              Beziehungen</literal>, <literal>Instantiation</literal>, 
              <literal>Modularität</literal>, <literal>
              Expected Usage</literal>, <literal>Methoden</literal>, 
              <literal>Codegenerierung</literal> und <literal>
              Stereotypen</literal>. Die Details der Kritiken in jeder 
              Kategorie werden in <xref linkend="s2.ref.menu_design_issues"/> 
              diskutiert.
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Nach Ziel</literal>. ArgoUML verfolgt das Konzept, dass 
              Kritiken entsprechend der sie beeinflussenden Benutzerziele 
              gruppiert werden. Diese Darstellung gruppiert die Zu-Bearbeiten-
              Elemente in einer Hierarchie entsprechend der Ziele.
            </para>

            <caution>

              <para>
                In der aktuellen Release von ArgoUML gibt es nur ein Ziel 
                <literal>Unspezifiziert</literal>. Alle Zu-Bearbeiten-Elemente 
                werden unter dieser Überschrift erscheinen.
              </para>

            </caution>

          </listitem>

          <listitem>

            <para>
              <literal>Nach Problemen</literal>. Die Zu-Bearbeiten-Elemente 
              werden hierarchisch entsprechend des Modellelementes organisiert, 
              welches das Problem verursachte. Zu-Bearbeiten-Elemente, die 
              manuell mit der Schaltfläche &quot;Neues Zu-Bearbeiten-Element&quot; 
              erzeugt wurden (z.B. nicht durch eine Kritik) werden hier nicht 
              aufgelistet.
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Nach Kurzbezeichnung</literal>. Die Zu-Bearbeiten-Elemente 
              werden danach hierarchisch organisiert, welche Kritik das 
              Zu-Bearbeiten-Element generierte. Der Klassenname der Kritik 
              wird anstelle seiner Überschrift aufgelistet.
            </para>

          </listitem>

          <listitem>

            <para>
              <literal>Nach Wissensgebiet</literal>. ArgoUML hat das Konzept, 
              dass Kritiken einen Ausschnitt eines Wissensgebietes reflektieren.
              Diese Darstellungsoptionen gruppieren die Kritiken entsprechend 
              der Kategorie des Wissensgebietes: <literal>
              Entwurf</literal>, <literal>Korrektheit</literal>, 
              <literal>Vollständigkeit</literal>, <literal>
              Konsistenz</literal>, <literal>Syntax</literal>, <literal>
              Semantik</literal>, <literal>Optimierung</literal>, 
              <literal>Darstellbarkeit</literal>, <literal>
              Organisierbarkeit</literal>, <literal>Experiencial</literal> 
              und <literal>Werkzeug</literal>. Die Hauptkategorie  
              (Entwürfe) enthält die manuell eingegebenen Zu-Bearbeiten-Elemente.
            </para>

          </listitem>

        </itemizedlist>

      </sect1>

      <sect1>

        <title>Element-Zähler</title>

        <para>
          Rechts von der Schaltfläche flach/hierarchisch befindet sich ein 
          Zähler, der die Anzahl der aktuell gefundenen Zu-Bearbeiten-Elemente 
          ausgibt. Er wird gelb hervorgehoben, wenn die Anzahl der Zu-Bearbeiten-
          Elemente auf über 50 Zu-Bearbeiten-Elemente anwächst und rot, wenn 
          es über 100 sind.
        </para>

      </sect1>

    </chapter>

    <chapter id="ch.ref.critics">

      <title>Die Kritiken</title>

      <sect1>

        <title>Einleitung</title>

        <para>
        	Die Schlüsselfunktion, die ArgoUML von anderen UML-Werzeugen 
        	unterscheidet, ist die Verwendung von Konzepten der kognitiven 
        	Psychologie. Die dahinter stehende Theroie ist in Jason Robbins&apos;
        	PhD Dissertation 
        	<ulink url="http://argouml.tigris.org/docs/robbins_dissertation/">
        	http://argouml.tigris.org/docs/robbins_dissertation/</ulink>
        	beschrieben.
        </para>

        <para>
        	Kritiken sind einer der Hauptarten mit denen diese Ideen 
        	implementiert wurden. Im Hintergrund laufend, bieten Sie dem 
        	Designer Ratschläge an, die akzeptiert oder ignoriert werden 
        	können. Der Schlüsselpunkt ist, dass sie keine Entscheidung des 
        	Designers <emphasis>ausschliessen</emphasis>.
        </para>

        <note>

          <para>
          	Die Kritiken sind asynchrone Prozesse, die parallel zu ArgoUML 
          	ablaufen. Änderungen benötigen eine oder zwei Sekunden, bis die 
          	Kritiken erneut erzeugt wurden.
          </para>

        </note>

        <sect2>

          <title>Terminologie</title>

          <para>
          Die <emphasis>Kritiken</emphasis> sind Hintergrundprozesse, die das 
          aktuelle Modell anhand verschiedener <quote>guter</quote> 
          Designkriterien überprüfen. Es gibt eine Kritik für jedes 
          Designkriterium. 
          </para>

          <para>
          	Die Ausgabe einer Kritik ist eine <emphasis>Kritik</emphasis>&mdash; 
          	eine Anweisung über einige Aspekte des Modelles, die nicht der 
          	guten Designpraxis folgen.
          </para>

          <para>
          	Natürlich wird eine Kritik nur vorschlagen, wie der gefundene 
          	Designmangel behoben werden kann, in dem es ein <emphasis>
          	Zu-Bearbeiten-Element</emphasis> erzeugt.
          </para>

        </sect2>

        <sect2>

          <title>Design-Mangel</title>

          <para>
          	ArgoUML kategorisiert Kritiken entsprechend der von ihnen 
          	adressierten Designmängel (einige Kritiken können in mehr als 
          	einer Kategorie erscheinen). Aktuell gibt es 16 solcher Kategorien.
          </para>

          <para>
          	In diesen Handbuch sind die Beschreibungen der Kritiken entsprechend 
          	ihres Designmangels in Abschnitten gruppiert.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_uncategorized">

        <title>Unkategorisiert</title>

        <para>
        	Diese Kritiken passen zu keiner der anderen Kategorien.
        </para>

        <para>
        	ArgoUML hat keine Kritik mit dieser Kategorie. Vielleicht werden 
        	einige in späteren Versionen hinzugefügt.
        </para>

      </sect1>

      <sect1 id="s1.ref.design_issues_class_selection">

        <title>Klassenauswahl</title>

        <para>
        	Dies sind Kritiken, die sich darauf beziehen, wie Klassen ausgewählt 
        	und verwendet wurden.
        </para>

        <para>ArgoUML hat die folgenden Kritiken in dieser Kategorie.</para>

        <sect2 id="critics.CrNonAggDataType">

          <title>Datentyp verbergen</title>

          <para>
          	Datentypen sind innerhalb von UML 1.4 keine vollständigen Klassen. 
          	Sie können nur Aufzählungsliterale als Werte haben und nur 
          	<literal>Abfrage</literal>-Operationen unterstützen (Das sind 
          	Operationen, die nicht den Zustand des Datentyps verändern).
          </para>

          <para>
          	Datentypen können nicht mit Klassen assoziiert werden, es sei denn, 
          	der Datentyp ist Teil einer Komposition (schwarzer Diamant). So 
          	eine Assoziation reflektiert die feste Verbindung einer Sammlung 
          	von Datentyp-Instanzen zu einer Klasseninstanz. In der Konsequenz 
          	ist so ein Datentyp ein Attribut der Klasse mit einer Kardinalität.
          </para>

          <para>
          	Eine gute OOA&amp;D hängt von der richtigen Auswahl der Entities ab, 
          	welche die vollständigen Objekte und welche die Attribute von 
          	Objekten repräsentieren. 
          </para>

          <para>Es gibt zwei Optionen, um dieses Problem zu lösen.</para>

          <itemizedlist>

            <listitem>

              <para>Ersetze den Datentyp durch eine ganze Klasse.</para>

            </listitem>

            <listitem>

              <para>
              	oder ändere die Aggregation in eine Komposition am Ende das 
              	Datentyps.
              </para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2 id="critics.CrTooManyClasses">

          <title>
          	Veringere die Anzahl der Klassen im Namensraum &lt;Namensraum&gt;
          </title>

          <para>
          	Ein Vorschlag, die Verständlichkeit durch weniger Klassen in einem 
          	Namensraum zu verbessern. Wenn ein Namensraum (wie ein Modell, ein 
          	Paket, oder eine Klasse) zu viele Klassen aufweist, wird es für 
          	Menschen sehr schwierig dies zu verstehen. Einen verständlichen Satz 
          	von Namensräumen zu definieren ist ein wichtiger Teil Ihres Designs.
          </para>
          
          <para>
          	Der Assistent dieser Kritik erlaubt das Setzen eines Schwellwertes, 
          	z.B. die maximale Anzahl von Klassen, ab der die Kritik ausgelöst 
          	wird.
          </para>

          <caution>
            <para>
            	Diese Anzahl wird nicht dauerhaft gespeichert und es gibt keinen 
            	Weg, diese zu reduzieren, nachdem sie hochgesetzt wurde. Es sei 
            	denn, man erzeugt mehr Klassen, bis die Kritik erneut ausgelöst 
            	wird. Der Neustart von ArgoUML setzt dieses Anzahl wieder auf 
            	seinen Standardwert: 20.
            </para>
          </caution>

        </sect2>

        <sect2 id="critics.CrNodesOverlap">

          <title>Diagramm aufräumen</title>

          <para>
          	Vorschlag, dass das Diagramm verbessert werden sollte, indem man 
          	sich überlappende Modellelemente auseinander zieht.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_naming">

        <title>Benennung</title>

        <para>
        	Dies sind Kritiken, die sich auf die Benennung von Modellelementen 
        	beziehen. Die aktuelle Version von ArgoUML hat 18 Kritiken in dieser 
        	Kategorie.
        </para>

        <sect2 id="critics.CrAssocNameConflict">

          <title>Löse Assoziations-Namenskonflikt auf</title>

          <para>
          	Hinweis, dass zwei Assoziationen im gleichen Namensraum den 
          	gleichen Namen haben. Dies ist in UML nicht erlaubt.
          </para>

        </sect2>

        <sect2 id="critics.CrAttrNameConflict">

          <title>Überarbeite die Attributnamen, um einen Konflikt zu vermeiden</title>

          <para>
          	Hinweis, dass zwei Attribute einer Klasse den gleichen Namen 
          	haben. Dies ist in UML nicht erlaubt.
          </para>

          <note>

            <para>
            	Das Problem kann durch vererben eines Attributes über eine 
            	Vererbungsbeziehung verursacht werden.
            </para>

          </note>

        </sect2>

        <sect2 id="critics.CrOperNameConflict">

          <title>Ändere Namen oder Signaturen in einem Modellelement</title>

          <para>
          	Zwei Operationen in einem &lt;Modellelement&gt; haben die gleiche 
          	Signatur. Das heißt, die Namen sind gleich und die Liste der 
          	Parameter hat den gleichen Typ.
          </para>

          <para>
          	Wo es Signaturkonflikte gibt, kann kein korrekter Code in den 
          	hauptsächlich verwendeten OO-Sprachen generiert werden. Es führt 
          	auch zu einer sehr unklaren Semantik des Designs. 
          </para>

          <para>Beim Vergleichen von Signaturen betrachtet die Kritik:</para>

          <orderedlist>

            <listitem>

              <para>den Namen;</para>

            </listitem>

            <listitem>

              <para>
              	die Liste der Ein-, Aus- und Ein-Ausgabeparamtertypen in 
              	ihrer <emphasis>Reihenfolge</emphasis>;
              </para>

            </listitem>

          </orderedlist>

          <para>
          	Nur wenn diese sowohl in Typ und Reihenfolge übereinstimmen, wird 
          	die Signatur als gleich betrachtet.
          </para>

          <para>
          	Dies folgt der Linie von Java/C++, welche die Rückgabeparameter 
          	bei der Signatur ignorieren. Dies <emphasis>kann</emphasis> bei 
          	einigen funktionalen OO-Sprachen unvorteilhaft sein.
          </para>

          <note>

            <para>
            	Einige Puristen würden argumentieren, dass der Vergleich 
            	zwischen Ein-, Aus- und Ein-Ausgabeparametern differenzieren 
            	sollte. Jedoch kann keine praktische Programmiersprache so etwas 
            	tun, wenn sie einen überladenen Methodenaufruf auflöst. Aus 
            	diese Grund behandelt diese Kritik sie alle pauschal.
            </para>

          </note>

        </sect2>

        <sect2 id="critics.CrDupRoleNames">

          <title>Doppelte End- (Rollen-) Namen in einer Assoziation</title>

          <para>
          	Die angegebene Assoziation hat zwei (oder mehrere) Enden (Rollen) 
          	mit dem gleichen Namen. Eine der wohlgeformten Regeln für 
          	Assoziationen in UML 1.4 ist, dass alle Enden (Rollen)-Namen 
          	eindeutig sein müssen. 
          </para>

          <para>
          	Dies stellt sicher, dass es keine mehrdeutige Referenz auf die 
          	Enden einer Assoziation geben kann.
          </para>

          <para>
          	Um dies zu beheben, markieren Sie die Assoziation manuell und ändern 
          	die Namen von einer oder mehreren der betroffenen Enden (Rollen) mit 
          	Hilfe des Taste&nbsp;2-Popup-Menüs oder der Eigenschaftstabelle.
          </para>

        </sect2>

        <sect2 id="critics.CrNameConflictAC">

          <title>Rollenname steht im Konflikt mit einem Element</title>

          <para>
          	Ein Hinweis, dass ein gutes Design Rollenname für Assoziationen 
          	verhindert, die mit Attributen oder Operationen der Quellklasse 
          	kollidieren. Rollen können im Code als Attribute oder Operationen 
          	realisiert werden, die dann Codegenerierungsprobleme auslösen.
          </para>

        </sect2>

        <sect2 id="critics.CrMissingClassName">

          <title>Einen Namen auswählen (Klassen und Schnittstellen)</title>

          <para>
          	Der betrachteten Klasse oder Schnittstelle wurde kein Name gegeben 
          	(sie wird im Modell als <literal>Unbenannt</literal> erscheinen). 
          	Hinweis, dass gutes Design fordert, dass alle Schnittstellen und 
          	Klassen benannt werden.
          </para>

        </sect2>

        <sect2 id="critics.CrDisambigClassName">

          <title>
          	Wählen Sie einen eindeutigen Namen für ein Modellelement aus 
          	(Klassen und Schnittstellen)
          </title>

          <para>
          	Hinweis, dass die angegebene Klasse oder Schnittstelle den gleichen 
          	Namen wie eine andere (im Namensraum) aufweist. Dies ist schlechtes 
          	Design und wird eine gültige Codegenerierung verhindern.
          </para>

        </sect2>

        <sect2 id="critics.CrMissingAttrName">

          <title>Wählen Sie einen Namen aus (Attribute)</title>

          <para>
          	Das betrachtete Attribut hat keinen Namen erhalten (es wird im Modell 
          	als <literal>(Unbenanntes Attribute)</literal> erscheinen). 
          	Hinweis, dass gutes Design fordert, dass alle Attribute benannt 
          	werden.
          </para>

        </sect2>

        <sect2 id="critics.CrMissingOperName">

          <title>Wählen Sie einen Namen aus (Operationen)</title>

          <para>
          	Die betrachtete Operation hat keinen Namen erhalten (sie wird im 
          	Modell als <literal>(Unbenannte Operation)</literal> erscheinen). 
          	Hinweis, dass gutes Design fordert, dass alle Operationen benannt 
          	werden.
          </para>

        </sect2>

        <sect2 id="critics.CrMissingStateName">

          <title>Wählen Sie einen Namen aus (Zustände)</title>

          <para>
          	Das betrachtete Zustand hat keinen Namen erhalten (es wird im Modell 
          	als <literal>(Unbenannter Zustand)</literal> erscheinen). 
          	Hinweis, dass gutes Design fordert, dass alle Zustände benannt 
          	werden.
          </para>

        </sect2>

        <sect2 id="critics.CrDisambigStateName">

          <title>Wählen Sie einen eindeutigen Namen für ein (zustandsbehaftetes) 
          Modellelement aus. </title>

          <para>
          	Hinweis, dass der angegebene Zustand den gleichen Namen wie ein 
          	anderer aufweist (im aktuellen Zustandsdiagramm). Dies ist 
          	schlechtes Design und wird die gültige Codegenerierung verhindern.
          </para>

        </sect2>

        <sect2 id="critics.CrNameConfusion">

          <title>Ändern Sie den Namen, um eine Konfusion zu verhindern</title>

          <para>
          	Zwei Namen im gleichen Namensraum haben sehr ähnliche Namen (sie 
          	unterscheiden sich nur durch ein Zeichen voneinander). Hinweis, dass 
          	dies potentiell zu einer Konfusion führt.
          </para>

          <caution>

            <para>
            	Diese Kritik kann manchmal störend sein, da es manchmal nützlich 
            	und gutes Design ist, eine Serie von Modellelemente <literal>
            	var1</literal>, <literal>var2</literal> usw. zu haben.
            </para>

            <para>
            	Es ist wichtig sich daran zu erinnern, dass Kritiken Anleitungen 
            	anbieten, die nicht immer korrekt sein müssen. ArgoUML läßt es 
            	zu, dass Sie die entsprechenden Zu-Bearbeiten-Elemente über den 
            	Zu-Bearbeiten-Bereich verlassen (siehe 
            	<xref linkend="ch.ref.todopane"/>).
            </para>

          </caution>

        </sect2>

        <sect2 id="critics.CrIllegalName">

          <title>Wählen Sie einen legalen Namen aus</title>

          <para>
          	Alle Modellelementnamen in ArgoUML dürfen nur aus Buchstaben, 
          	Ziffern und Unterstrichen bestehen. Diese Kritik weist Sie darauf hin, 
          	dass eine Entität nicht dieser Anforderung entspricht.
          </para>

        </sect2>

        <sect2 id="critics.CrReservedName">

          <title>
          	Ändern Sie den Namen des Modellelementes in ein 
            nicht-reserviertes Wort
          </title>

          <para>
          	Hinweis, dass der Name dieses Modellelementes dem Namen eines in 
          	UML resevierten Wortes entspricht (or within one character of one). 
          	Dies ist nicht erlaubt.
          </para>

        </sect2>

        <sect2 id="critics.CrUnconventionalOperName">

          <title>Wählen Sie einen besseren Namen für die Operation aus</title>

          <para>
          	Hinweis, dass der Name einer Operation nicht der Namenskonvention 
          	entspricht, dass Namen von Operationen mit einem Kleinbuchstaben 
          	beginnen.
          </para>

          <caution>

            <para>
            	Der Java und C++-Konvention folgend, geben die meisten Designer 
            	Ihren Konstruktoren den gleichen Namen wie der Klasse, die mit 
            	einem Grossbuchstaben gebinnt. In ArgoUML wird dies diese 
            	Kritik auslösen, es sei denn, der Konstruktor erhält den 
            	Stereotyp <literal>&laquo;create&raquo;</literal>
            .
            </para>

            <para>
            	Es ist wichtig sich daran zu erinnern, dass Kritiken Anleitungen 
            	anbieten, die nicht immer korrekt sein müssen. ArgoUML läßt es 
            	zu, dass Sie die entsprechenden Zu-Bearbeiten-Elemente über den 
            	Zu-Bearbeiten-Bereich verlassen (siehe 
            	<xref linkend="ch.ref.todopane"/>).
            </para>

          </caution>

        </sect2>

        <sect2 id="critics.CrUnconventionalAttrName">

          <title>Wählen Sie einen besseren Attributnamen aus</title>

          <para>
          	Hinweis, dass ein Attribut nicht der Namenskonvention entspricht, 
          	dass Namen von Attributen mit einem Kleinbuchstaben beginnen.
          </para>

        </sect2>

        <sect2 id="critics.CrUnconventionalClassName">

          <title>Klassenname groß schreiben</title>

          <para>
          	Hinweis, dass eine Klasse nicht der Namenskonvention entspricht, dass 
          	Klassen mit einem Großbuchstaben beginnen.
          </para>

          <note>

            <para>
            	Obwohl sie diese Kritik nicht auslöst, sollte die gleiche 
            	Konvention auf Schnittstellen angewendet werden.
            </para>

          </note>

        </sect2>

        <sect2 id="critics.CrUnconventionalPackName">

          <title>Paketname überarbeiten</title>

          <para>
          	Hinweis, dass ein Paket nicht der Namenskonvention entspricht, dass 
          	Kleinbuchstaben mit Punkten verwendet werden, um Subpakete zu 
          	kennzeichnen.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_storage">

        <title>Speicher</title>

        <para>Kritiken, die sich auf die Attribute von Klassen beziehen.</para>

        <para>
        	Die aktuelle Version von ArgoUML hat in dieser Kategorie die 
        	folgenden Kritiken.
        </para>

        <sect2>

          <title>
          	Überarbeiten Sie die Attributnamen, um einen Konflikt zu vermeiden
          </title>

          <para>
          	Diese Kritik wurde in einer früheren Designmangel-Kategorie 
          	diskutiert (siehe <xref linkend="critics.CrAttrNameConflict"/>).
          </para>

        </sect2>

        <sect2 id="critics.CrNoInstanceVariables">

          <title>Fügen Sie Instanzvariablen zu einer Klasse hinzu</title>

          <para>
          	Hinweis, dass für die angegebene Klasse keine Instanzvariable 
          	spezifiziert wurde. Solche Klassen können erzeugt werden, um 
          	statische Attribute und Methoden zu spezifizieren, aber sie sollten 
          	per Konvention das Stereotyp <literal>&laquo;utility&raquo;</literal> 
          	erhalten.
          </para>

        </sect2>

        <sect2 id="critics.CrConstructorNeeded">

          <title>Fügen Sie der Klasse einen Konstruktor hinzu</title>

          <para>
          	Sie haben bis jetzt keinen Konstruktor für die Klasse <emphasis>
          	Klasse</emphasis> definiert. Konstruktoren initialisieren neue 
          	Instanzen, sodaß deren Attribute gültige Werte aufweisen. Diese 
          	Klasse benötigt wahrscheinlich einen Konstruktor, weil nicht alle 
          	seiner Attribute initiale Werte aufweisen.
          </para>

          <para>
          	Das Definieren guter Konstruktoren ist der Schlüssel für das 
          	Einrichten unveränderlicher Klassen und unveränderliche Klassen sind 
          	eine leistungsfähige Hilfe beim Schreiben soliden Codes.
          </para>

          <para>
          	Um dies zu beheben, fügen Sie manuell einen Konstruktor hinzu, indem 
          	Sie im Explorer auf die <emphasis>Klasse</emphasis> klicken und eine 
          	Operation mit Hilfe des kontextsensitiven Popup-Menüs des 
          	Eigenschaftsregisters hinzufügen, oder die <emphasis>Klasse
          	</emphasis> im Diagramm markieren und das Werkzeug <literal>
          	Operation hinzufügen</literal> verwenden.
          </para>

          <para>
          	Im UML 1.4 Standard ist ein Konstruktor eine Operation mit dem 
          	Stereotypen &laquo;create&raquo;. Obwohl kein strikter Standard, 
          	wird ArgoUML auch &laquo;Create&raquo; als Stereotyp für 
          	Konstruktoren akzeptieren.
          </para>

          <para>
          	Gemäß Java und C++-Konvention hat ein Konstruktor den gleichen 
          	Namen wie die Klasse, ist nicht statisch und gibt keinen Wert 
          	zurück. ArgoUML wird auch jede Operation akzeptieren, die diesen 
          	Konventionen eines Konstruktors folgt, auch wenn sie nicht den 
          	Stereotypen &laquo;create&raquo; aufweist.
          </para>

          <caution>

            <para>
            	Operatoren werden in ArgoUML mit einem Standard-Rückgabeparameter 
            	(<literal>return</literal> genannt) erzeugt. Sie müssen diesen 
            	Parameter entfernen, um der Java/C++-Konvention zu entsprechen.
            </para>

          </caution>

        </sect2>

        <sect2 id="critics.CrTooManyAttr">

          <title>Reduzieren Sie die Zahl der Attribute in der Klasse</title>

          <para>
          	Hinweis, dass die Klasse für ein gutes Design zu viele Attribute 
          	aufweist und das Risiko eines Designengpaß in sich birgt. 
          </para>
          
          <para>
          	Der Assistent dieser Kritik erlaubt das Einstellen eines 
          	Schwellwertes, z.B. die maximal erlaubte Anzahl von Attributen 
          	bevor diese Kritik ausgelöst wird.
          </para>

          <caution>
            <para>
            	Diese Anzahl wird nicht dauerhaft gespeichert und es gibt keinen 
            	Weg, diese zu reduzieren, nachdem sie hochgesetzt wurde. Es sei 
            	denn, man erzeugt mehr Attribute, bis die Kritik erneut ausgelöst 
            	wird. Der Neustart von ArgoUML setzt dieses Anzahl wieder auf 
            	seinen Standardwert: 7.
            </para>
          </caution>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_planned_extensions">

        <title>Geplante Erweiterungen</title>

        <para>Kritiken, die sich auf Schnittstellen und Subklassen beziehen.</para>

        <note>

          <para>
          	Es ist nicht klar, warum diese Kategorie den Namen <quote>Geplante 
          	Erweiterungen</quote> hat.
          </para>

        </note>

        <para>
        	Die aktuelle Version von ArgoUML hat drei Kritiken in dieser 
        	Kategorie.
        </para>

        <sect2 id="critics.CrIntefaceAllPublic">

          <title>Operationen in Schnittstellen müssen public sein</title>

          <para>
          	Hinweis, dass es keinen Punkt gibt, non-public Operationen in 
          	Schnittstellen haben zu müssen, da sie in einer realisierten Klasse 
          	sichtbar sein müssen. 
          </para>

        </sect2>

        <sect2 id="critics.CrInterfaceOperOnly">

          <title>Schnittstellen dürfen nur Operationen haben</title>

          <para>
          	Hinweis, dass in einer Schnittstelle Attribute definiert wurden. 
          	Der UML-Standard definiert Schnittstellen nur mit Operationen.
          </para>

          <caution>

            <para>
            	ArgoUML erlaubt es Ihnen nicht, Schnittstellen Attribute 
            	hinzuzufügen, sodaß dies in einem ArgoUML-Modell niemals 
            	auftreten sollte. Sie kann ausgelöst werden, wenn ein Projekt 
            	mit XMI geladen wurde, die durch ein anderes Werkzeug 
            	erzeugt wurde.
            </para>

          </caution>

        </sect2>

        <sect2 id="critics.CrSubclassReference">

          <title>Entferne die Referenz auf die spezifische Subklasse</title>

          <para>
          	Hinweis, dass eine Klasse in einem guten Design seine Subklassen 
          	nicht direkt über Attribute, Operationen oder Assoziationen 
          	referenzieren soll.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_state_machines">

        <title>Zustandsautomaten</title>

        <para>Kritiken, die sich auf Zustandsautomaten beziehen.</para>

        <para>ArgoUML hat die folgenden Kritiken in dieser Kategorie.</para>

        <sect2 id="critics.CrTooManyTransitions">

          <title>Reduzieren Sie die Anzahl der Transitionen im &lt;Zustand&gt;</title>

          <para>
          	Hinweis, das der angegebene Zustand so viele Transitionen aufweist, 
          	dass er zu einem Leistungsengpass werden dürfte.
          </para>
                    
          <para>
          	Der Assistenz dieser Kritik erlaubt das Einstellen eines 
          	Schwellwertes, z.B. die maximale Anzahl von Transitionen bevor 
          	diese Kritik ausgelöst wird.
          </para>

          <caution>
            <para>
            	Diese Anzahl wird nicht dauerhaft gespeichert und es gibt keinen 
            	Weg, diese zu reduzieren, nachdem sie hochgesetzt wurde. Es sei 
            	denn, man erzeugt mehr Transitionen, bis die Kritik erneut ausgelöst 
            	wird. Der Neustart von ArgoUML setzt dieses Anzahl wieder auf 
            	seinen Standardwert: 10.
            </para>
          </caution>
          

        </sect2>

        <sect2 id="critics.CrTooManyStates">

          <title>
          	Reduzieren Sie die Anzahl der Zustände im Automaten &lt;Automat&gt;
          </title>

          <para>
          	Hinweis, dass der angegebene Zustandsautomat so viele Zustände 
          	aufweist, daß er bereits Konfusion auslöst und vereinfacht ( 
          	vielleicht durch unterteilen in mehrere Automaten, oder durch 
          	Nutzung einer Hierarchie) werden sollte.
          </para>
                    
          <para>
          	Der Assistenz dieser Kritik erlaubt die Einstellung eines 
          	Schwellwertes, z.B. die maximale Anzahl von erlaubten Zuständen 
          	bevor diese Kritik ausgelöst wird.
          </para>

          <caution>
            <para>
            	Diese Anzahl wird nicht dauerhaft gespeichert und es gibt keinen 
            	Weg, diese zu reduzieren, nachdem sie hochgesetzt wurde. Es sei 
            	denn, man erzeugt mehr Zustände, bis die Kritik erneut ausgelöst 
            	wird. Der Neustart von ArgoUML setzt dieses Anzahl wieder auf 
            	seinen Standardwert: 20.
            </para>
          </caution>
          

        </sect2>

        <sect2 id="critics.CrNoTransitions">

          <title>Fügen Sie dem &lt;Zustand&gt; Transitionen hinzu</title>

          <para>
          	Hinweis, daß der angegebene Zustand ankommende und abgehende 
          	Transitionen benötigt.
          </para>

        </sect2>

        <sect2 id="critics.CrNoIncomingTransitions">

          <title>
          	Fügen Sie ankommende Transitionen dem Modellelement 
          	&lt;Modellelement&gt; hinzu
          </title>

          <para>
          	Hinweis, daß der angegebene Zustand ankommende Transitionen 
          	benötigt.
          </para>

        </sect2>

        <sect2 id="critics.CrNoOutgoingTransitions">

          <title>
          	Fügen Sie abgehende Transitionen dem Modellelement 
          	&lt;Modellelement&gt; hinzu
          </title>

          <para>
          	Hinweis, daß der angegebene Zustand abgehende Transitionen 
          	benötigt.
          </para>

        </sect2>

        <sect2 id="critics.CrMultipleInitialStates">

          <title>Entfernen Sie den zusätzlichen Initialzustand</title>

          <para>
          	Hinweis, daß es mehr als einen Initialzustand in dem 
          	Zustandsautomaten oder dem zusammengesetzten Zustand gibt, was in 
          	UML nicht erlaubt ist.
          </para>

        </sect2>

        <sect2 id="critics.CrNoInitialState">

          <title>Fügen Sie einen initialen Zustand ein</title>

          <para>
          	Hinweis, daß es keinen initialien Zustand in dem Zustandsautomaten 
          	oder dem zusammengesetzten Zustand gibt.
          </para>

        </sect2>

        <sect2 id="critics.CrNoTriggerOrGuard">

          <title>Einer Transition ein Signal oder einen Wächter hinzufügen</title>

          <para>
          	Hinweis, dass eine Transition entweder ein Signal oder einen 
          	Wächter vermisst. Einer davon ist mindestens notwendig.
          </para>

        </sect2>

        <sect2 id="critics.CrInvalidJoin">

          <title>Ändere Vereinigungs-Transitionen</title>

          <para>
          	Hinweis, dass der Pseudozustand "Vereinigen" eine ungültige Anzahl 
          	von Transitionen aufweist. Normalerweise sollten es eine abgehende 
          	und zwei oder mehrere ankommende sein.
          </para>

        </sect2>

        <sect2 id="critics.CrInvalidFork">

          <title>Ändere Gabelungs-Transitionen</title>

          <para>
          	Hinweis, dass der Pseudozustand "Gabelung" eine ungültige Anzahl 
          	von Transitionen aufweist. Normalerweise sollten es eine ankommende 
          	und zwei oder mehrere abgehende sein.	
          </para>

        </sect2>

        <sect2 id="critics.CrInvalidBranch">

          <title>Entscheidungs-/Kreuzungstransitionen hinzufügen</title>

          <para>
          	Hinweis, dass der Pseudozustands-Zweig (Entscheidung oder Kreuzung) 
          	eine ungültige Zahl von Transitionen aufweist. Normalerweise 
          	sollten es mindestens eine ankommende Transition und mindestens 
          	eine abgehende Transition sein. 
          </para>

        </sect2>

        <sect2 id="critics.CrNoGuard">

          <title>Einer Transition Wächter hinzufügen</title>

          <para>
          	Hinweis, dass die Transition einen Wächter benötigt.
          </para>

          <caution>

            <para>
            	Es ist nicht klar, ob dies eine gültige Kritik ist. Es ist 
            	sicherlich akzeptabel, eine Transistion ohne Wächter zu haben 
            	&mdash; die Transition wird immer genommen, wenn das Signal 
            	ausgelöst wird.
            </para>

          </caution>

        </sect2>

        <sect2>

          <title>Das Diagramm aufräumen</title>

          <para>
          	Diese Kritik wurde unter einer früheren Design-Kategorie diskutiert 
          	( siehe <xref linkend="critics.CrNodesOverlap"/>).
          </para>

        </sect2>

        <sect2 id="critics.CrZeroLengthEdge">

          <title>Eine Kante sichtbarer machen</title>

          <para>
          	Hinweis, dass ein Kanten-Modellelement, wie zum Beispiel eine 
          	Assoziation oder Abstraktion so kurz ist, dass sie vermisst werden 
          	könnte. Ziehen Sie die verbundenen Modellelemente auseinander, um 
          	die Kanten sichtbarer zu machen.
          </para>

        </sect2>

        <sect2 id="critics.CrMultiComposite">

          <title>Zusammengesetztes Assoziationsende mit der Kardinalität &gt; 
          1</title>

          <para>
          	Eine Instanz kann durch eine Komposition nicht zu mehr als 
          	einer Kompositions-Instanz gehören. Sie müssen die Kardinalität 
          	am zusammengesetzten Ende der Assoziation entweder auf 0..1 oder 
          	1..1 (1) setzen, damit das Modell Sinn macht.
          </para>

          <para>
          	Erinnern Sie sich, dass die Komposition die strengere Aggregationsart 
          	ist und die Aggregation schwächer ist. Das Problem kann mit einem 
          	Modell verglichen werden, in dem ein Finger der integrale Teil von 
          	mehreren Händen gleichzeitig sein kann.
          </para>

          <para>
          	Dies ist die zweite wohlgeformte Regel bei Assoziationsenden in 
          	UML 1.4.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_design_patterns">

        <title>Designmuster</title>

        <para>Kritiken über die Nutzung von Designmustern in ArgoUML.</para>

        <para>
          Diese beziehen sich auf die Nutzung von Mustern, wie sie durch die 
          sogenannte <quote>Viererbande</quote> beschrieben wurden. ArgoUML 
          nutzt diese Kategorie auch für Kritiken, die sich auf Verteilungs- 
          und Sequenzdiagramme beziehen. Die aktuelle Version von ArgoUML hat 
          die folgenden Kritiken in dieser Kategorie.
        </para>

        <sect2 id="critics.CrConsiderSingleton">

          <title>
          	Die Nutzung des Singleton-Musters für eine &lt;class&gt; in Betracht 
          	ziehen.
          </title>

          <para>
          	Die <emphasis>Klasse</emphasis> hat keine nicht-statischen Attribute 
          	noch Assoziationen, die von der Instanz dieser Klasse abgehen. Das 
          	bedeutet, dass jede Instanz dieser Klasse identisch mit jeder anderen 
          	Instanz sein wird, da es nichts über die Instanz gibt, was sie 
          	voneinander unterscheidbar macht.
          </para>

          <para>
          	Unter diesen Umständen sollten sie in Betracht ziehen, dass Sie 
          	genau eine Instanz dieser Klsse haben, indem Sie das Singleton-Muster 
          	verwenden. Die Nutzung des Singleton-Musters kann Zeit und 
          	Speicherplatz einsparen. Innerhalb von ArgoUML kann dies durch 
          	Nutzung des Stereotyps &laquo;singleton&raquo; auf diese Klasse 
          	umgesetzt werden.
          </para>

          <para>
          	Wenn es nicht Ihre Absicht ist nur eine Instanz zu haben, sollten 
          	Sie Instanzvariablen definieren (z.B. nicht-statische Attribute) 
          	und/oder abgehende Assoziationen, welche die Unterschiede zwischen 
          	den Instanzen repräsentieren. 
          </para>

          <para>
          	Wenn Sie eine <emphasis>Klasse</emphasis> als Singleton spezifiziert 
          	haben, müssen Sie die Klasse so definieren, dass sie nur eine 
          	Instanz haben kann. Dies wird die Informationsdarstellung Ihres 
          	Designs vervollständigen. Um dies zu erreichen, müssen Sie folgendes 
          	tun.
          </para>

          <orderedlist>

            <listitem>

              <para>
              	Sie müssen ein statisches Attribut definieren (eine 
              	Klassenvariable), welche die Instanz aufnimmt. Diese muss aus 
              	diesem Grund den Typ <emphasis>Klasse</emphasis> aufweisen.
              </para>

            </listitem>

            <listitem>

              <para>
              	Sie dürfen nur einen privaten Konstruktor haben, so dass keine 
              	neuen Instanzen durch anderen Code erzeugt werden kann. Das 
              	Erzeugen der einzigen Instanz kann durch eine passende 
              	Hilfsoperation erfolgen, die diesen privaten Konstruktor genau 
              	einmals aufruft.
              </para>

            </listitem>

            <listitem>

              <para>
              	Sie müssen mindestens einen Konstruktor haben, um den 
              	Standardkonstruktor zu überschreiben, so dass der 
              	Standardkonstruktor nicht dazu verwendet wird mehrere Instanzen 
              	zu erzeugen.
              </para>

            </listitem>

          </orderedlist>

          <para>
          Die Definition eines Konstruktors gemäß UML-Standard 1.4 und dessen 
          Erweiterungen, so dass die Definition durch ArgoUML akzeptiert wird, 
          siehe <xref linkend="critics.CrConstructorNeeded"/>.
          </para>

        </sect2>

        <sect2 id="critics.CrSingletonViolated">

          <title>Singleton Stereotyp-Verletzung in &lt;Klasse&gt;</title>

          <para>
          	Diese Klasse ist mit dem &laquo;singleton&raquo;-Stereotyp versehen, 
          	stimmt aber nicht mit den für Singletons geltenden Randbedingungen 
          	überein (ArgoUML akzeptiert auch den Stereotyp &laquo;Singleton
          	&raquo; beim Definieren eines Singletons). Eine Singletonklasse 
          	kann maximal eine Instanz haben. Das bedeutet, dass die Klasse den 
          	Designkriterien für ein Singleton entsprechen muss (siehe 
          	<xref linkend="critics.CrConsiderSingleton"/>).
          </para>

          <para>
          	Immer, wenn Sie eine Klasse mit einem Stereotypen kennzeichnen, 
          	sollte die Klasse allen Bedingungen dieses Stereotyps entsprechen. 
          	Die ist ein wichtiger Teil bei der Erstellung eines konsitenten und 
          	verständlichen Designs. Die Nutzung des Singletonmusters kann Zeit 
          	und Speicherplatz einsparen.
          </para>

          <para>
          	Wenn Sie diese Klasse nicht länger als Singleton benötigen, entfernen 
          	Sie den Stereotypen &laquo;singleton&raquo; indem Sie auf die Klasse 
          	klicken und die leere Auswahl im Stereotyp-Kombinationsfeld des 
          	Registers Eigenschaften auswählen. 
          </para>

          <para>
          	Bei der Anwendung eines Singletonmusters sollten Sie den Anweisungen 
          	in <xref linkend="critics.CrConsiderSingleton"/> folgen.
          </para>

        </sect2>

        <sect2 id="critics.CrNodeInsideElement">

          <title>Knoten haben normalerweise keine Hülle</title>

          <para>
          	Ein Hinweis, dass Knoten nicht innerhalb anderer Modellelemente im 
          	Verteilungsdiagramm eingezeichnet werden sollten, da sie ein 
          	autonomes physikalisches Objekt repräsentieren.
          </para>

        </sect2>

        <sect2 id="critics.CrNodeInstanceInsideElement">

          <title>Knoteninstanzen haben normalerweise keine Hülle</title>

          <para>
          	Ein Hinweis, dass Knoteninstanzen nicht innerhalb anderer 
          	Modellelemente im Verteilungsdiagramm eingezeichnet werden sollten, 
          	da sie ein autonomes physikalisches Objekt repräsentieren.
          </para>

        </sect2>

        <sect2 id="critics.CrComponentWithoutNode">

          <title>
          	Komponenten befinden sich normalerweise innerhalb von Knoten
          </title>

          <para>
          	Ein Hinweis, dass Komponenten logische Entitäten innerhalb 
          	physikalischer Knoten repräsentieren und innerhalb eines Knoten 
          	eingezeichnet werden sollten, wobei Knoten in einem 
          	Verteilungsdiagramm dargestellt werden.
          </para>

        </sect2>

        <sect2 id="critics.CrCompInstanceWithoutNode">

          <title>
          	Komponenteninstanzen befinden sich normalerweise innerhalb von Knoten
          </title>

          <para>
          	Ein Hinweis, dass Komponenteninstanzen logische Entitäten innerhalb 
          	physikalischer Knoten repräsentieren und innerhalb einer 
          	Knoteninstanz eingezeichnet werden sollten, wobei Knoteninstanzen 
          	in einem Verteilungsdiagramm dargestellt werden.
          </para>

        </sect2>

        <sect2 id="critics.CrClassWithoutComponent">

          <title>
          	Klassen befinden sich normalerweise innerhalb von Komponenten
          </title>

          <para>
          	Ein Hinweis, dass Klassen als Modellelemente Komponenten bilden und 
          	innerhalb von Komponenten in Verteilungsdiagrammen eingezeichnet 
          	werden sollten.
          </para>

        </sect2>

        <sect2 id="critics.CrInterfaceWithoutComponent">

          <title>
          	Schnittstellen befinden sich normalerweise innerhalb von Komponenten
          </title>

          <para>
          	Ein Hinweis, dass Schnittstellen als Modellelemente Komponenten 
          	bilden und innerhalb von Komponenten in Verteilungsdiagrammen 
          	eingezeichnet werden sollten.
          </para>

        </sect2>

        <sect2 id="critics.CrObjectWithoutComponent">

          <title>
          	Objekte befinden sich normalerweise innerhalb von Komponenten
          </title>

          <para>
          	Ein Hinweis, dass Objekte als Instanzen von Modellelementen 
          	Komponenten bilden, die innerhalb von Komponenten oder 
          	Komponenteninstanzen in Verteilungsdiagrammen eingezeichnet werden 
          	sollten.
          </para>

        </sect2>

        <sect2 id="critics.CrWrongLinkEnds">

          <title>Verknüpfungsenden haben nicht die gleiche Ebene</title>

          <para>
          	Ein Hinweis, dass eine Verknüpfung (z.B. eine Assoziation), die 
          	Objekte in einem Verteilungsdiagramm verbindet, ein Ende in einer 
          	Komponente und das andere Ende in einer Komponenteninstanz (da 
          	Objekte in beiden auftreten können) hat. Dies macht keinen Sinn. 
          </para>

        </sect2>

        <sect2 id="critics.CrInstanceWithoutClassifier">

          <title>Klassifizierung einstellen (Verteilungsdiagramm)</title>

          <para>
          	Hinweis, dass es in einem Verteilungsdiagramm eine Instanz (Objekt) 
          	ohne eine verknüpfte Klassifizierung gibt (Klasse, Datentyp).
          </para>

        </sect2>

        <sect2 id="critics.CrCallWithoutReturn">

          <title>Return-Aktionen werden vermisst</title>

          <para>
          	Hinweis, dass ein Sequenzdiagramm eine Sende- oder Aufrufaktion ohne 
          	entsprechende Return-Aktion enthält.
          </para>

        </sect2>

        <sect2 id="critics.CrReturnWithoutCall">

          <title>Vermisse Aufruf(Sende)-Aktion</title>

          <para>
          	Hinweis, dass ein Sequenzdiagramm eine Return-Aktion enthält, aber 
          	keine vorhergehende Aufruf- oder Sende-Aktion.
          </para>

        </sect2>

        <sect2 id="critics.CrLinkWithoutStimulus">

          <title>Kein Auslöseimpuls bei diesen Verknüpfungen</title>

          <para>
          	Hinweis, dass ein Sequenzdiagramm eine Objekte verbindende 
          	Verknüpfung ohne verknüpften Auslöseimpuls aufweist (ohne den die 
          	Verknüpfung bedeutungslos ist).
          </para>

          <warning>

            <para>
            	Das Auslösen dieser Kritik weist auf schwerwiegendes Probleme hin, 
            	da ArgoUML keine Mechanismen für das Erzeugen einer Verknüpfung 
            	ohne einen Auslöseimpuls enthält. Es weist wahrscheinlich 
            	darauf hin, dass das Diagramm durch Laden eines defekten 
            	Projektes mit einer XMI-Datei erzeugt wurde, welche eine 
            	Verknüpfung ohne Auslöseimpuls beschreibt. Diese wurde 
            	möglicherweise durch ein anderes Werkzeug erzeugt.
            </para>

          </warning>

        </sect2>

        <sect2 id="critics.CrSeqInstanceWithoutClassifier">

          <title>Klassifizierung einstellen (Sequenzdiagramm)</title>

          <para>
          	Hinweis, dass es in einem Sequenzdiagramm ein Objekt ohne eine damit 
          	verknüpfte Klassifizierung (Klasse, Datentyp) gibt.
          </para>

        </sect2>

        <sect2 id="critics.CrStimulusWithWrongPosition">

          <title>Falsche Position dieses Auslöseimpulses</title>

          <para>
          	Hinweis, dass in einem Sequenzdiagramm die Initiierung eines 
          	Sende/Aufruf-Return-Nachrichtaustausches nicht richtig von links 
          	nach rechts initiiert wurde.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_relationships">

        <title>Beziehungen</title>

        <para>Kritiken, die sich in ArgoUML auf Assoziationen beziehen.</para>

        <para>
        	Die aktuelle Version von ArgoUML hat die folgenden Kritiken in 
        	dieser Kategorie.
        </para>

        <sect2 id="critics.CrCircularAssocClass">

          <title>Zirkuläre Assoziation</title>

          <para>
          	Hinweis, dass eine Assoziationsklasse eine Rolle aufweist, die auf 
          	sich selbst verweist. Dies ist nicht erlaubt.
          </para>

          <warning>

            <para>
            	Diese Kritik ist in der V0.14 von ArgoUML bedeutungslos, da 
            	sie Assoziationsklassen nicht unterstützt.
            </para>

          </warning>

        </sect2>

        <sect2 id="critics.CrUnnavigableAssoc">

          <title> &lt;Assoziation&gt; navigierbar machen</title>

          <para>
          	Hinweis, dass die betreffende Assoziation in keine Richtung 
          	navigierbar ist. Dies ist im UML-Standard erlaubt, aber es hat 
          	in einem praktischen Design keinerlei Bedeutung.
          </para>

        </sect2>

        <sect2 id="critics.CrNavFromInterface">

          <title>
          	Entferne die Navigation von der Schnittstelle via 
          	&lt;Assoziation&gt;
          </title>

          <para>
          	Assoziationen die eine Schnittstelle beinhalten können nicht von 
          	der Schnittstelle aus navigierbar sein. Dies ist so, weil 
          	Schnittstellen nur Operationsdeklarationen enthalten und keine 
          	Zeiger auf andere Objekte halten können.
          </para>

          <para>
          	Dieser Teil des Designs sollte geändert werden, bevor Sie Code 
          	von diesem Design generieren. Wenn Sie den Code generieren, bevor 
          	Sie dieses Problem lösen, wird der Code nicht mit dem Design 
          	übereinstimmen.
          </para>

          <para>
          	Um dies zu beheben markieren Sie die Assoziation und nutzen das 
          	Register <literal>Eigenschaften</literal>, um nach und nach jedes 
          	Assoziationsende auszuwählen, das <emphasis>nicht</emphasis> mit 
          	der Schnittstelle verbunden ist. Entfernen Sie die Markierung 
          	<literal>Navigierbar</literal> für jedes dieser Enden.
          </para>

          <para>
          	Die Assoziation sollte dann mit einem Pfeil in Richtung der 
          	Schnittstelle erscheinen.
          </para>

          <para>
          	Wenn eine Assoziation zwischen einer Klasse und einer Schnittstelle 
          	in ArgoUML erzeugt wird, ist diese standardmäßig nur von der Klasse 
          	zur Schnittstelle navigierbar. Jedoch verhindert es ArgoUML nicht, 
          	wenn die Navigierbarkeit danach fehlerhaft geändert wird. Was diese 
          	Kritik auslösen würde.
          </para>

        </sect2>

        <sect2 id="critics.CrNoAssociations">

          <title>Dem &lt;Modellelement&gt; eine Assoziation hinzufügen</title>

          <para>
          	Hinweis, dass das spezifizierte Modellelement (Akteur, Anwendungsfall 
          	oder Klasse) keine verbindenden Assoziationen zu anderen 
          	Modellelementen aufweist. Dies ist aber erforderlich, wenn das 
          	Modellelement in einem Design nützlich sein soll.
          </para>

        </sect2>

        <sect2>

          <title>Referenz auf ein spezifische Subklasse entfernen</title>

          <para>
          	Diese Kritik wird unter einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrSubclassReference"/>).
          </para>

        </sect2>

        <sect2 id="critics.CrTooManyAssoc">

          <title>
          	Reduzieren Sie die Assoziationen des &lt;Modellelementes&gt;
          </title>

          <para>
          	Hinweis, dass das betreffende Modellelement (Akteur, Anwendungsfall, 
          	Klasse oder Schnittstelle) so viele Assoziationen aufweist, dass 
          	diese zu einem Wartungsengpass führen können.
          </para>
          
          <para>
          	Der Assistent dieser Kritik erlaubt das Einstellen eines 
          	Schwellwertes, z.B. die maximale Anzahl von erlaubten Assoziationen 
          	bevor diese Kritk ausgelöst wird.
          </para>

          <caution>
            <para>
            	Diese Zahl wird nicht dauerhaft gespeichert. Es gibt keinen 
            	Weg sie zu reduzieren, nachdem sie nach oben gesetzt wurde. Es 
            	sei denn, man erzeugt mehr Assoziationen bis die Kritik erneut 
            	ausgelöst wird. Ein Restart von ArgoUML setzt diese Zahl auf 
            	seinen Standard zurück: 7.
            </para>
          </caution>

        </sect2>

        <sect2>

          <title>Kanten sichtbarer machen</title>

          <para>
          	Diese Kritik wird in einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrZeroLengthEdge"/>).
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_instantiation">

        <title>Instanzen bilden</title>

        <para>
        	Kritiken, die sich auf das Bilden von Instanzen bei Klassifizierern 
        	in ArgoUML beziehen.
        </para>

        <para>
        	Die aktuelle Version von ArgoUML hat keine Kritiken in dieser 
        	Kategorie.
        </para>

      </sect1>

      <sect1 id="s1.ref.design_issues_modularity">

        <title>Modularität</title>

        <para>
        	Kritiken, die sich auf die modulare Entwicklung in ArgoUML 
        	beziehen.
		</para>

        <para>
        	Die aktuelle Version von ArgoUML hat die folgenden Kritiken in 
        	dieser Kategorie.
        </para>

        <sect2 id="critics.CrCrossNamespaceAssoc">

          <title>
          	Der Klassifizierer befindet sich nicht im Namensraum seiner 
          	Assoziation.
          </title>

          <para>
          	Eine der wohlgeformten Regeln in UML 1.4 für Assoziationen lautet, 
          	dass alle Klassifizierer, die den Enden einer Assoziation zugewiesen 
          	werden, zum gleichen Namensraum gehören müssen wie die Assoziation.
          </para>

          <para>
          	Wenn dies nicht der Fall wäre, würde es keine Bezeichnung geben, 
          	über das jedes Ende alle anderen referenzieren kann.
          </para>

          <para>
          	Diese Kritik wird ausgelöst, wenn eine Assoziation nicht mit diesem 
          	Kriterium übereinstimmt. Die Lösung ist, die Assoziation zu löschen 
          	und im Diagramm neu zu erzeugen, sodass der Namensraum alle 
          	zugewiesenen Klassifizierer enthält.
          </para>

          <caution>

            <para>
            	Diese Kritik kann in der aktuellen Implementierung von ArgoUML 
            	keine hierarchischen Namensräume verarbeiten. Als Konsequenz 
            	daraus, wird die Kritik für Assoziationen ausgelöst, bei denen 
            	der sich unmittelbare Namensraum der zugewiesenen Klassifizierer 
            	von dem der Assoziation unterscheidet, auch wenn sie Teil der 
            	gleichen Namensraumhierarchie sind. 
            </para>

          </caution>

        </sect2>

        <sect2 id="critics.CrEmptyPackage">

          <title>Fügen Sie Elemente zum Paket &lt;Paket&gt; hinzu.</title>

          <para>
          	Hinweis, dass das angegebene Paket keinen Inhalt hat. Gutes Desgin 
          	weist Pakete auf, die erzeugt wurden, Dinge hinein zu tun.
          </para>

          <note>

            <para>
            	Diese Kritik wird immer ausgelöst, wenn Sie erstmalig ein Paket 
            	erzeugen, da Sie kein Paket erzeugen können, das nicht leer ist.
            </para>

          </note>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_expected_usage">

        <title>Erwartete Verwendung</title>

        <para>
        	Kritiken, die sich auf eine generell akzeptierte, gute Praxis 
        	beziehen.
        </para>

        <para>
        	Die aktuelle Version von ArgoUML hat eine Kritik in dieser 
        	Kategorie.
        </para>

        <sect2>

          <title>Diagramm aufräumen</title>

          <para>
          	Diese Kritik wird in einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrNodesOverlap"/>).
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_methods">

        <title>Methoden</title>

        <para>Kritiken, die sich auf Operationen in ArgoUML beziehen.</para>

        <para>
        	Die aktuelle Version von ArgoUML hat die folgenden Kritiken in 
        	dieser Kategorie.
        </para>

        <sect2>

          <title>Ändere Namen oder Signaturen im &lt;Modellelement&gt;</title>

          <para>
          	Diese Kritik wird in einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrOperNameConflict"/>).
          </para>

        </sect2>

        <sect2 id="critics.CrClassMustBeAbstract">

          <title>Die Klasse muß abstrakt sein</title>

          <para>
          	Hinweis, dass eine Klasse, die abstrakte Operationen erbt oder 
          	definiert als abstrakte Klasse bezeichnet sein muß.
          </para>

        </sect2>

        <sect2 id="critics.CrNoOperations">

          <title>Fügen Sie der &lt;Klasse&gt; Operationen hinzu</title>

          <para>
          	Hinweis, dass in der angegebenen Klasse keine Operationen definiert 
          	wurden. Dies ist für die Klasse aber erforderlich, damit sie im 
          	Design einen Nutzen hat.
          </para>

        </sect2>

        <sect2 id="critics.CrTooManyOper">

          <title>
          	Reduzieren Sie die Anzahl der Operationen im &lt;Modellelement&gt;
          </title>

          <para>
          	Hinweis; dass das Modellelement (Klasse oder Schnittstelle) zu viele 
          	Operationen aufweist, um gutem Design zu entsprechen. Darüber hinaus 
          	beinhaltet es das Risiko, zum Design-Wartungsengpaß zu werden.
          </para>
          
          <para>
          	Der Assistent dieser Kritik erlaubt das Setzen eines Schwellwertes, 
          	z.B. die maximale Anzahl von erlaubten Operationen bevor diese 
          	Kritik ausgelöst wird.
          </para>

          <caution>
            <para>
            	Diese Anzahl wird nicht dauerhaft gespeichert. Es gibt keinen 
            	Weg diese Anzahl zu reduzieren, nachdem sei einmal hochgesetzt 
            	wurde. Außer, Sie erzeugen weitere Operationen bis diese 
            	Kritik erneut ausgelöst wird. Der Neustart von ArgoUML setzt 
            	diese Anzahl auf den Standardwert: 20 zurück. 
            </para>
          </caution>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_code_generation">

        <title>Code-Generierung</title>

        <para>
        	Kritiken, die sich auf die Code-Generierung in ArgoUML beziehen.
        </para>

        <para>
        	Die aktuelle Version von ArgoUML hat eine Kritik in dieser 
        	Kategorie.
        </para>

        <sect2 id="critics.CrMultipleInheritance">

          <title>Ändern Sie die Mehrfachvererbung in Schnittstellen</title>

          <para>
          	Hinweis, dass eine Klasse mehrere Vererbungen aufweist, was in UML 
          	erlaubt ist, aber nicht in Java-Code umgesetzt werden kann, da Java 
          	keine Mehrfachvererbung unterstützt.
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_stereotypes">

        <title>Stereotypen</title>

        <para>Kritiken, die sich auf Stereotypen in ArgoUML beziehen.</para>

        <para>
        	Die aktuelle Version von ArgoUML hat keine Kritiken in dieser 
        	Kategorie.
        </para>

      </sect1>

      <sect1 id="s1.ref.design_issues_inheritance">

        <title>Vererbung</title>

        <para>
        	Kritiken, die sich mit der Generalisierung und Spezialisierung in 
        	ArgoUML befassen.
        </para>

        <para>
        	Die aktuelle Version von ArgoUML hat die folgenden Kritiken in 
        	dieser Kategorie.
        </para>

        <sect2>

          <title>
          	Überprüfen Sie die Attributnamen, um einen Konflikt zu vermeiden.
          </title>

          <para>
          	Diese Kritik wird unter einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrAttrNameConflict"/>).
          </para>

        </sect2>

        <sect2 id="critics.CrCircularInheritance">

          <title>
          	Entfernen Sie die zirkuläre Vererbung der Klasse &lt;Klasse&gt;
          </title>

          <para>
          	Hinweis, dass eine Klasse über eine Kette von Vererbungen von sich 
          	selbst erbt, was nicht erlaubt ist.
          </para>

          <caution>

            <para>
            	Diese Kritik ist in der aktuellen Release von ArgoUML 
            	standardmäßig als inaktiv markiert (die einzige so markierte 
            	Kritik). Sie wird nicht ausgelöst, bis sie aktiviert wird.
            </para>

          </caution>

        </sect2>

        <sect2>

          <title>Die Klasse muß abstrakt sein</title>

          <para>
          	Diese Kritik wird in einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrClassMustBeAbstract"/>).
          </para>

        </sect2>

        <sect2 id="critics.CrFinalSubclassed">

          <title>
          	Entfernen Sie das Schlüsselwort final oder entfernen Sie Subklassen
          </title>

          <para>
          	Hinweis, das eine als final deklarierte Klasse Spezialisierungen 
          	aufweist, was in UML nicht erlaubt ist. 
          </para>

        </sect2>

        <sect2 id="critics.CrIllegalGeneralization">

          <title>Illegale Generalisierung</title>

          <para>
          	Hinweis, dass es eine Generalisierung zwischen Modellelementen 
          	unterschiedlicher UML-Metaklassen gibt, was nicht erlaubt ist.
          </para>

          <caution>

            <para>
            	Es ist nicht klar, wie so eine Generalisierung in ArgoUML 
            	erzeugt werden könnte. Wahrscheinlich zeigt sie auf, dass das 
            	Diagramm durch Laden eines defekten Projektes, mit einer XMI-
            	Datei erzeugt wurde, die so eine Generalisierung beschreibt.
            	Wahrscheinlich wurde diese durch ein anderes Tool als ArgoUML 
            	erzeugt.
            </para>

          </caution>

        </sect2>

        <sect2 id="critics.CrAlreadyRealizes">

          <title>
          	Enferne unnötige Realisierungen aus der Klasse &lt;Klasse&gt;
          </title>

          <para>
          	Hinweis, das die angegebene Klasse eine realisierte, direkte und 
          	indirekte Beziehung auf die gleiche Schnittstelle hat (durch 
          	Realisierung von zwei Schnittstellen, eine davon ist die 
          	Generalisierung der anderen, zum Beispiel). Ein gutes Design 
          	vermeidet solche Duplizierungen. 
          </para>

        </sect2>

        <sect2 id="critics.CrUselessAbstract">

          <title>Definiere eine konkrete (Sub-)Klasse</title>

          <para>
          	Hinweis, dass eine Klasse als abstrakt deklariert ist, und keine 
          	konkrete Subklassen aufweist, so dass sie niemals realisiert 
          	(erzeugt) werden kann.
          </para>

        </sect2>

        <sect2 id="critics.CrUselessInterface">

          <title>
          	Definieren Sie eine Klasse, um die Schnittstelle &lt;Schnittstelle&gt; 
          	zu implementieren
          </title>

          <para>
          	Hinweis, dass die referenzierte Schnittstelle keine Auswirkung auf 
          	das laufende System hat, da sie nicht durch eine Klasse 
          	implementiert wurde.
          </para>

        </sect2>

        <sect2>

          <title>Ändere Mehrfachvererbung in Schnittstellen</title>

          <para>
          	Diese Kritik wird unter einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrMultipleInheritance"/>).
          </para>

        </sect2>

        <sect2>

          <title>Machen Sie die Kanten sichtbarer</title>

          <para>
          	Diese Kritik wird unter einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrZeroLengthEdge"/>).
          </para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.design_issues_containment">

        <title>Containment</title>

        <para>
        	Kritiken, die sich auf das Containment in ArgoUML beziehen. D.h., 
        	wo ein Modellelement den Komponententeil eines anderen bildet.
        </para>

        <para>
        	Die aktuelle Version von ArgoUML hat die folgenden Kritiken in 
        	dieser Kategorie.
        </para>

        <sect2 id="critics.CrCircularComposition">

          <title>Entferne zirkuläre Komposition</title>

          <para>
          	Hinweis, das es eine Reihe von Kompositionen (Assoziationen mit 
          	einem schwarzen Diamanten) gibt, die einen Zirkelbezug bilden, was 
          	nicht erlaubt ist.
          </para>

        </sect2>

        <sect2 id="critics.CrDupParamName">

          <title>Duplizieren Sie den Parameternamen</title>

          <para>
          	Hinweis, dass eine Parameterliste einer Operation oder eines 
          	Ereignisses zwei oder mehr Parameter mit dem gleichen Namen aufweist, 
          	was nicht erlaubt ist.
          </para>

        </sect2>

        <sect2 id="critics.CrMultipleAgg">

          <title>
          	Zwei Aggregatenden (Rollen) in binärer Assoziation
          </title>

          <para>
          	Nur ein Ende (Rolle) einer binären Assoziation kann Aggregat oder 
          	Komposition sein. Dies ist eine wohlgeformte Regel des UML 1.4-
          	Standards.
          </para>

          <para>
          	Aggregation und Komposition werden verwendet, um Ganzes-Teil-
          	Beziehungen darzustellen und der <quote>Teil</quote> kann per 
          	Definition kein Aggregat(Zusammenfassung) sein.
          </para>

          <para>
          	Um dies zu lösen, identifizieren Sie das <quote>Teil</quote>-Ende 
          	der Assoziation und verwenden Sie im Kritikassistenten die 
          	Schaltfläche <literal>Weiter &gt;</literal>, setzen seine 
          	Aggregation manuell mit Hilfe des Taste&nbsp;2-Popup-Menüs oder des 
          	Eigenschaftsregisters auf <literal>none</literal>.
          </para>

          <para>
          	Eine Komposition (korrekter verbundene Aggregation genannt) wird 
          	verwendet, wenn es eine Ganzes-Teil-Beziehung gibt, die eins-zu-eins 
          	oder eins-zu-viele sind und die Lebensdauer des Teils unauflösbar 
          	von der Lebensdauer des Ganzen abhängt. Instanzen des Ganzen sind 
          	für das Erzeugen und Löschen der Instanzen der verknpften Teile 
          	verantwortlich. Das bedeutet auch, dass eine Klasse nur Teil einer 
          	verbundenen Aggregation sein kann.
          </para>

          <para>
          	Ein Beispiel einer verbundenen Aggregation könnte eine Datenbank 
          	von Autos mit deren Reifen sein. Dies ist eine eins-zu-vier-
          	Beziehung und der Datenbankeintrag für einen Reifen ist mit seinem 
          	Auto verknüpft. Wenn ein Auto in der Datenbank aufhört zu existieren, 
          	dann trifft dies auch auf seine Reifen zu.
          </para>

          <para>
          	Die Aggregation (korrekter aufgeteilte Aggregation genannt) wird 
          	verwendet, wenn es eine Ganzes-Teil-Beziehung gibt, die nicht den 
          	Kriterien für eine verbunden Aggregation übereinstimmt. Ein Beispiel 
          	könnte eine Datenbank von Universitätskursen und den Studenten sein, 
          	die diese belegen. Es gibt eine Ganzes-Teil-Beziehung zwischen den 
          	Kursen und den Studenten. Jedoch gibt es keine Lebensdauerbeziehung 
          	zwischen den Studenten und den Kursen (ein Student existiert weiter, 
          	nachdem er den Kurs absolviert hat) und die Beziehung lautet 
          	viele-zu-viele.
          </para>

        </sect2>

        <sect2 id="critics.CrNWayAgg">

          <title>Aggregatende (Rolle) in 3-Wege (oder mehr) Assoziation</title>

          <para>
          	Drei-Wege- (oder mehr) Assoziationen können keine Aggregatenden 
          	(Rollen) haben. Dies ist eine wohlgeformte Regel des UML 1.4-
          	Standards.
          </para>

          <para>
          	Aggregation und Komposition werden verwendet, um Ganzes-Teile-
          	Beziehungen darzustellen. Diese können per Definition nur auf 
          	binäre Assoziationen zwischen Modellelementen angewendet werden.
          </para>

          <para>
          	Um dies zu lösen, markieren Sie die Assoziation manuell und setzen 
          	Sie jedes Ende (Rolle) dieser Aggregation mit Hilfe des Taste&nbsp;2-
          	Popup-Menüs oder dem Eigenschaftsregister auf <literal>none</literal>.
          </para>

        </sect2>

        <sect2>

          <title>Datentyp verbergen</title>

          <para>
          	Diese Kritik wird unter einer früheren Designkategorie diskutiert 
          	(siehe <xref linkend="critics.CrNonAggDataType"/>).
          </para>

        </sect2>

      </sect1>

    </chapter>

  </part>

  <part>

    <title>Modellreferenz</title>

    <chapter id="ch.ref.entities">

      <title>Modellreferenz auf höchster Ebene</title>

      <sect1>

        <title>Einleitung</title>

        <para>
        	Dieses Kapitel beschreibt jedes Modellelement, dass innerhalb 
        	von ArgoUML erzeugt werden kann. Das Kapitel deckt die <quote>
        	generellen</quote> Modellelemente auf höchster Ebene ab. Die 
        	folgenden Kapitel (siehe <xref linkend="ch.ref.entusecase"/> bis 
        	<xref linkend="ch.ref.entdeploy"/>) decken jedes der ArgoUML-
        	Diagramme ab.
        </para>

        <para>
        	Es gibt eine enge Beziehung zwischen diesem Material und dem 
        	Register Eigenschaften des Detailfensters (siehe 
        	<xref linkend="s1.ref.proptab"/>). Dieser Abschnitt deckt die 
        	Eigenschaften im Allgemeinen ab, in diesem Kapitel werden sie mit 
        	den spezifischen Modellelementen verknüpft.
        </para>

      </sect1>

      <sect1 id="s1.ref.model">

        <title>Das Modell</title>

        <indexterm><primary>Modell, Das</primary></indexterm>
        <para>
        	Das Modell ist in ArgoUML ein Modellelement auf höchster Ebene. Im 
        	UML-Metamodell ist es eine Subklasse von package. In vielerlei 
        	Hinsicht weist es innerhalb von ArgoUML Ähnlichkeiten mit einem 
        	package auf (siehe <xref linkend="s1.ref.package"/>).
        </para>

        <note>

          <para>
          	ArgoUML ist auf ein Modell beschränkt.
          </para>

        </note>

        <para>
        	Standard-Datentypen, Klassen und Pakete werden (der Standard, siehe 
        	<xref linkend="ch.ref.entbuiltin"/>) als Sub-Pakete des Modells 
        	geladen. Diese Subpakete sind im Modell zu Beginn nicht präsent, 
        	werden aber zum Modell hinzugefügt, wenn sie verwendet werden. 
        </para>

        <sect2>

          <title>Detail-Register Modell</title>

          <indexterm><primary>Detail-Register Modell</primary></indexterm>
          <indexterm><primary>Detail-Register</primary><secondary>für das  
          Modell</secondary></indexterm>
          <para>Folgende Detail-Register sind für das Modell aktiv.</para>

          <variablelist>

            <varlistentry>

              <term><literal>Zu-Bearbeiten-Element</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaften</literal></term>

              <listitem>

                <para>Siehe 
                <xref linkend="s2.ref.model_property_toolbar"/> und 
                <xref linkend="s2.ref.model_property_fields"/> 
                unten.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Dokumentation</literal></term>

              <listitem>

                <para>Standard-Register. Siehe 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotypen</literal></term>

              <listitem>

                <para>Standard-Register.
                Dies enthält eine Liste von Stereotypen, die diesem Modell 
                zugeordnet sind und eine Liste der verfügbaren 
                Stereotypen, die auf dieses Modell angewendet werden können. 
               </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaftswerte</literal></term>

              <listitem>

                <para>
                	Standard-Register. Im UML-Metamodell hat das <literal>
                	Modell</literal> die folgenden Standard-Eigenschaftswerte 
                	definiert.
                </para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (von der Superklasse, 
                    <literal>Modellelement</literal>).</para>

                    <para>
                    	Werte <literal>true</literal>, bedeutet: die Klasse 
                    	ist redundant &mdash; sie kann formal von anderen Elementen 
                    	abgeleitet werden oder, <literal>false</literal> bedeutet: 
                    	sie kann nicht von anderen Elementen abgeleitet werden.
                    </para>

                    <para>
                    	Abgeleitete Modelle haben ihren Wert in der Analyse, um 
                    	nützliche Namen oder Konzepte einzuführen und im Design, 
                    	um eine Nachverarbeitung zu verhindern.
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.model_property_toolbar">

          <title>Symbolleiste Modelleigenschaften</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Nach oben</literal></term>

              <listitem>

                <para>
                	Navigiert durch die zusammengesetzte Struktur des Modelles 
                	nach oben.
                </para>

                <para>
                	Das das Modell das oberste Paket ist, kann nichts passieren. 
                	Aus diesem Grund ist die Schaltfläche immer deaktiviert.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/package.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neues Paket</literal></term>

              <listitem>

                <indexterm><primary>Paket hinzufügen</primary></indexterm>
                <indexterm><primary>Neues Paket</primary></indexterm>
                <indexterm><primary>Neu erzeugen 
                </primary><secondary>Package</secondary></indexterm>
                <para>
                	Dies erzeugt eine neues Paket (siehe 
                	<xref linkend="s1.ref.package"/>) innerhalb des Modelles 
                	(das in keinem Diagramm erscheint), und springt sofort in 
                	das Register Eigenschaften des Paketes.
                </para>

                <tip>

                  <para>
                  	Da es Sinn machen kann, Pakete für diese Modell auf diese 
                  	Weise zu erzeugen, ist es gewöhnlich deutlich klarer, diese 
                  	innerhalb der Diagramme zu erzeugen, wenn Sie welche 
                  	benötigen.
                  </para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/datatype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Datentyp</literal></term>

              <listitem>

                <indexterm><primary>Datentyp hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Datentyp</primary></indexterm>
                <indexterm><primary>Neu erzeugen 
                </primary><secondary>Datentyp</secondary></indexterm>
                <para>
                	Dies erzeugt einen neuen Datentyp (siehe 
                <xref linkend="s1.ref.datatype"/>) innerhalb des Modelles 
                (der in keinem Diagramm erscheint) und springt sofort in das 
                Register Eigenschaften dieses Datentyps. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/enumeration.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neue Aufzählung</literal></term>

              <listitem>

                <indexterm><primary>Aufzählung hinzufügen</primary></indexterm>
                <indexterm><primary>Neue Aufzählung</primary></indexterm>
                <indexterm><primary>Neu erzeugen 
                </primary><secondary>Aufzählung</secondary></indexterm>
                <para>
                	Dies erzeugt eine neue Aufzählung (siehe 
                <xref linkend="s1.ref.enumeration"/>) innerhalb des Modelles 
                (die in keinem Diagramm erscheint) und springt sofort in das 
                Register Eigenschaften dieser Aufzählung. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Stereotyp</literal></term>

              <listitem>

                <indexterm><primary>Stereotyp hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Stereotyp</primary></indexterm>
                <indexterm><primary>Neu erzeugen 
                </primary><secondary>Stereotyp</secondary></indexterm>
                <para>
                	Dies erzeugt einen neuen Stereotypen (siehe 
                 	<xref linkend="s1.ref.stereotype"/>) innerhalb des Modelles 
                 	und springt sofort in das Register Eigenschaften dieses 
                 	Stereotypen. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Löschen</literal></term>

              <listitem>

                <para>
                	Dieses Symbol ist immer deaktiviert, da es keinen Sinn 
                	macht, das Modell zu löschen!
                </para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.model_property_fields">

          <title>Eigenschaftsfelder des Modelles</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Name des Modelles</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>von  
                Modell</secondary></indexterm>
                <para>
                	Textfeld. Name des Modelles. Der Name des Modelles, wie 
                	alle anderen Pakete, wird per Konvention in Kleinbuchstaben 
                	geschrieben.
                </para>

                <note>

                  <para>
                  	Der Standardname, der einem neuen Modell in ArgoUML 
                  	zugwiesen wird ist <literal>unbenanntesModell</literal>. Er 
                  	ist daher fehlerfrei und garantiert, dass ArgoUML immer 
                  	mit mindestens einem Problem startet, was durch die Design-
                  	Kritiken ausgestellt wird. 
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotyp</literal></term>

              <listitem>

                <indexterm><primary>Modell 
                Stereotyp</primary></indexterm>
                <indexterm><primary>Stereotyp</primary><secondary>von  
                Modell</secondary></indexterm>
                <para>
                	DropDown-Auswahl. Das Modell ist standardmäßig mit den 
                	UML-Standard-Stereotypen für Modelle (
                	<literal>systemModel</literal> und <literal>
                	metamodel</literal>) und dem Paket (
                	<literal>facade</literal>, <literal>
                	framework</literal>, <literal>stub</literal>) ausgestattet.
                </para>

                <para>
                	Das stereotypisieren von Modellen ist nützlich, obwohl es 
                	in ArgoUML nur von eingeschränktem Wert ist, da Sie nur ein 
                	einziges Modell haben.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotypen steuern</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                Symbol. Wenn ein Stereotyp markiert wurde, wird dieser über das  
                Stereotyp-Eigenschaftsfenster gesteuert (siehe 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namensraum</literal></term>

              <listitem>

                <indexterm><primary>Modell- 
                Namensraum</primary></indexterm>
                <indexterm><primary>Namensraum</primary><secondary> von  
                Modell</secondary></indexterm>
                <para>
                	Textfeld. Nimmt den Namensraum des Modelles auf. Dies ist 
                	die Pakethierarchie. Da sich das Modell an der Spitze der 
                	Hierarchie befindet, ist dieses Feld immer leer. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Sichtbarkeit</literal></term>

              <listitem>

                <indexterm><primary>Modell- 
                Sichtbarkeit</primary></indexterm>
                <indexterm><primary>Sichtbarkeit</primary><secondary>von  
                Modell</secondary></indexterm>
                <para>
                	Auswahlbereich mit den Einträgen <literal>
                public</literal>, <literal>private</literal>,  
                <literal>protected</literal> und 
                <literal>package</literal>.
                </para>

                <para>
                	Zeichnet die Sichtbarkeit des Modelles auf. Da ArgoUML nur 
                	ein Modell erlaubt, hat diese Eigenschaft keine besondere 
                	Bedeutung.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifizierer</literal></term>

              <listitem>

                <indexterm><primary>Modell- 
                Modifizierer</primary></indexterm>
                <indexterm><primary>Modifizierer</primary><secondary>von  
                Modell</secondary></indexterm>
                <para>
                	Markier-Bereich mit den Einträgen <literal>
                Abstract</literal>, <literal>Leaf</literal> und 
                <literal>Root</literal>.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>abstract</literal> wird verwendet, um zu 
                    	deklarieren, dass dieses Modell nicht instantiiert 
                    	werden kann. Aber es muß immer spezialisiert werden.
                    </para>

                    <para>
                    	Die Bedeutung von <literal>abstract</literal>, wenn es 
                    	auf ein Modell angewendet wird ist nicht klar. Es 
                    	könnte bedeuten, dass das Modell Schnittstellen oder 
                    	abstrakteKlassen ohne Realiserung enthält. Da ArgoUML 
                    	nur ein Modell erlaubt, ist das markieren dieses 
                    	Feldes bedeutungslos.
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>Leaf</literal> gibt an, dass diese Modell keine 
                    	weiteren Subpakete haben darf, während <literal>root
                    	</literal> angibt, das es das Modell auf oberster Ebene 
                    	ist.
                    </para>

                    <para>
                    	Innerhalb von ArgoUML kann <literal>root</literal> nur 
                    	auf das Modell sinnvoll angewendet werden, da alle 
                    	Pakete sich innerhalb des Modelles befinden. In 
                    	Abwesenheit des Stereotypen <literal>topLevel</literal>, 
                    	kann dies dazu verwendet werden, herauszustellen dass 
                    	das Modell sich auf der obersten Ebene befindet.
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalisierungen</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet jedes Modell auf, das dieses Modell 
                	<emphasis>generalisiert</emphasis>.
                </para>

                <note>

                  <para>
                  	Da es in ArgoUML nur ein Modell gibt, gibt es keine 
                  	Spezialisierung oder Generalisierung, die erzeugt werden 
                  	könnte.
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Spezialisierung</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet jedes spezialisiertes Modell auf (z.B. 
                	für welches Modell diese Modell eine Generalisierung ist).
                </para>

                <note>

                  <para>
                  	Da es in ArgoUML nur ein Modell gibt, gibt es keine 
                  	Spezialisierung oder Generalisierung, die erzeugt werden 
                  	könnte.
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigene Elemente</literal></term>

              <listitem>

                <indexterm><primary>Modell-eigene Elemente</primary></indexterm>
                <indexterm><primary>Eigene 
                Elemente</primary><secondary> von  
                Modell</secondary></indexterm>
                <para>
                Textbereich. Eine Liste der Pakte, Klassen, Schnittstellen, 
                Datentypen, Akteure, Anwendungsfälle, Assoziationen, 
                Generalisierungen und Stereotypen innerhalb des Modelles auf 
                oberster Ebene. 
                </para>

                <para>
                	Ein Taste&nbsp;1-Klick auf jedes dieser Modellelemente 
                	veranlasst, dass zu diesem Modellelement gesprungen wird.
                </para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.datatype">

        <title>Datentyp</title>

        <indexterm><primary>Datentyp</primary></indexterm>
        <para>
        	Datentypen kann man sich als einfache Klassen denken. Sie haben 
        	keine Attribute und jede Operation von Ihnen darf keine Seiteneffekte 
        	aufweisen. Eine nützliche Analogie sind primitive Datentypen in 
        	einer Sprache wie Java. Die Integerzahl <quote>3</quote> steht für 
        	sich selbst&mdash; sie hat keine innere Struktur. Es gibt 
        	Operationen (z.B. Addition) auf Integerzahlen, aber wenn sie 
        	<literal>3&nbsp;+&nbsp;4</literal> ausführen, ist das Ergebnis eine 
        	neue Zahl, <quote>3</quote> und <quote>4</quote> bleiben in diesem 
        	Beispiel unverändert.
        </para>

        <para>
        	Innerhalb von UML&nbsp;1.4 ist ein <literal>Datentyp</literal> eine 
        	Subklasse der Metaklasse <literal>Klassifizierer</literal>. Dieser 
        	umfasst die vordefinierten primitiven Typen (<literal>byte</literal>
        	, <literal>char</literal>, <literal>double</literal>, <literal>
        	float</literal>, <literal>int</literal>, <literal>long</literal> und 
        	<literal>short</literal>), die vordefinierte Aufzählung, <literal>
        	boolean</literal> und die anwenderdefinierten <emphasis>enumeration 
        	Typen</emphasis>.
        </para>

        <note>

          <para>
          	Auch <literal>void</literal> ist als Datentyp innerhalb von ArgoUML 
          	definiert.
          </para>

        </note>

        <para>
        	Innerhalb von ArgoUML können neue Datentypen mit Hilfe der 
        	Schaltfläche <literal>Neuer Datentyp</literal> im Register 
        	Eigenschaften des Modelles und Paketen (in diesem Fall ist der 
        	neue Datentyp auf den Scope des Paktes beschränkt), als auch im 
        	Register Eigenschaften für Datentypen erzeugt werden.
        	Datentypen können auch mit dem Symbol in der Diagrammsymbolleiste 
        	eines Klassendiagrammes erzeugt werden.
        </para>

        <para>
        	Der UML&nbsp;1.4-Standard erlaubt das Plazieren von 
        	benutzerdefinierten Datentypen in Klassendiagrammen, um deren 
        	Vererbungsstruktur zu definieren.
        	Dies ist auch in ArgoUML möglich.
        	Er wird im Diagramm durch einen Rahmen mit zwei Bereichen dargestellt, 
        	wobei der oberste mit <literal>&laquo;Datentyp&raquo;</literal> 
        	gekennzeichnet ist und den Namen enthält.
        	Der untere enthält die Operationen.
        </para>

        <sect2>

          <title>Datentyp Detail-Register</title>

          <indexterm><primary>Datatyp Detail-Register
          </primary></indexterm>
          <indexterm><primary>Detail-Register</primary><secondary>für 
          Datatyp</secondary></indexterm>
          <para>
          	Folgende Detail-Register sind für Datentypen aktiv:
          </para>

          <variablelist>

            <varlistentry>

              <term><literal>Zu-Bearbeiten-Element</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaften</literal></term>

              <listitem>

                <indexterm><primary>Datatyp- 
                Eigenschaften</primary></indexterm>
                <indexterm><primary>Eigenschaften</primary><secondary>von 
                Datatypen</secondary></indexterm>
                <para>Siehe 
                <xref linkend="s2.ref.datatype_property_toolbar"/> und 
                <xref linkend="s2.ref.datatype_property_fields"/> 
                unten.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Dokumentation</literal></term>

              <listitem>

                <para>Standard-Register. Siehe 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Quelldatei</literal></term>

              <listitem>

                <para>
                	Standard-Register. Nicht im Einsatz. Es würde eine 
                	Klassendeklaration für den neuen Datentyp erwarten, um die 
                	Code-Generierung zu ermöglichen. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaftswerte</literal></term>

              <listitem>

                <indexterm><primary>Datatyp Eigenschaftswerte 
                </primary></indexterm>
                <indexterm><primary>Eigenschaftswerte 
                </primary><secondary>von  
                Datatypen</secondary></indexterm>
                <para>
                	Standard-Register. Das UML-Metamodell hat die folgenden 
                	Eigenschaftswerte für <literal>Datentyp</literal> definiert.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>persistence</literal> (von der Superklasse 
                    	, <literal>Classifier</literal>). Werte 
                    	<literal>transitory</literal>, geben an, dass der Zustand 
                    	gelöscht wird, wenn eine Instanz gelöscht oder <literal>
                    	persistent</literal> wird, der markierte Zustand 
                    	wird erhalten, wenn eine Instanz gelöscht wird.
                    </para>

                    <tip>

                      <para>
                      	Da benutzerdefinierte Datentypen Aufzählungen sind, 
                      	haben sie keinen zu erhaltenden Zustand und der Wert 
                      	dieses Eigenschaftswertes ist irrelevant.
                      </para>

                    </tip>

                  </listitem>

                  <listitem>

                    <para>
                    <literal>semantics</literal> (von der Superklasse 
                    , <literal>Classifier</literal>). Der Wert ist eine 
                    Spezifikation der Semantik des Datentyps. 
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    <literal>derived</literal> (von der Superklasse 
                    , <literal>Modell-Element</literal>). 
                    Werte mit <literal>true</literal> bedeuten, dass die Klasse 
                    redundant ist&mdash; sie kann formal von anderen Elementen 
                    abgeleitet werden. <literal>false</literal> bedeutet, dass 
                    sie nicht abgeleitet werden kann. 
                    </para>

                    <tip>

                      <para>
                      	Obwohl formal verfügbar, hat ein abgeleiteter Datentyp 
                      	keinen bestimmten Wert und daher sollten Datentypen 
                      	immer mit <literal>derived=false</literal> bezeichnet 
                      	werden. 
                      </para>

                    </tip>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.datatype_property_toolbar">

          <title>Datatyp Eigenschafts-Symbolleiste</title>

          <indexterm><primary>Datatyp Eigenschafts- 
          Symbolleiste</primary></indexterm>
          <indexterm><primary>Eigenschafts-Symbolleiste</primary><secondary>für 
          Datentypen</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Nach oben</literal></term>

              <listitem>

                <para>Geht in der Paketstruktur nach oben.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/datatype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Datentyp</literal></term>

              <listitem>

                <para>
                	Erzeugt innerhalb des gleichen Paketes einen neuen Datentyp 
                	(siehe <xref linkend="s1.ref.class_class"/>) als aktuellen 
                	Datentyp.
                </para>

                <tip>

                  <para>
                  	Obwohl es Sinn machen kann, Datentypen auf diesem Weg zu 
                  	erzeugen, kann es klarer sein, diese innerhalb eines Paketes 
                  	oder Modelles, wo sie sie benötigen, zu erzeugen.
                  </para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/enumeration.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neue Aufzählung</literal></term>

              <listitem>

                <indexterm><primary>Aufzählung hinzufügen</primary></indexterm>
                <indexterm><primary>Neue Aufzählung</primary></indexterm>
                <indexterm><primary>Erzeuge neue  
                </primary><secondary>Aufzählung</secondary></indexterm>
                <para>
                	Erzeugt im gleichen Paket eine neue Aufzählung (siehe  
                	<xref linkend="s1.ref.enumeration"/>)
                	als Datentyp und springt sofort in das Register Eigenschaften 
                	dieser Aufzählung. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/operation.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neue Operation</literal></term>

              <listitem>

                <para>
                	Erzeugt einen neue Operation innerhalb des Datentyps und 
                	springt sofort in das Register Eigenschaften dieser 
                	Operation.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Stereotyp</literal></term>

              <listitem>

                <indexterm><primary>Stereotyp hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Stereotyp</primary></indexterm>
                <indexterm><primary>Erzeuge  
                neuen</primary><secondary>Stereotyp</secondary></indexterm>
                <para>
                	Erzeugt innerhalb des gleichen Paketes einen neuen 
                	Stereotyp (siehe <xref linkend="s1.ref.stereotype"/>) 
                	und springt sofort in das Register Eigenschaften dieses 
                	Stereotyps. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Löschen</literal></term>

              <listitem>

                <para>Löscht den Datentyp aus dem Modell.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.datatype_property_fields">

          <title>Datentyp-Eigenschaftsfelder</title>

          <indexterm><primary>Datentyp-Eigenschaftsfelder
          </primary></indexterm>
          <indexterm><primary>Eigenschaftsfelder</primary><secondary>für  
          Datentyp</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Datentyp-Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>des  
                Datentyps</secondary></indexterm>
                <para>
                Textfeld. Der Name des Datentyps. Die primitiven Datentypen 
                haben alle kleingeschriebene Namen. Es gibt allerdings keine 
                formale Konvention hierfür. 
                </para>

                <note>

                  <para>
                  	Der Standardname neu erzeugter Datentypen ist ein leerer 
                  	String <quote />. Datentypen mit leeren String-Namen 
                  	erscheinen im Explorer unter <literal>(Unbenannte Datentypen)
                  	</literal>.
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namensraum</literal></term>

              <listitem>

                <para>
                	DropDown-Kombinationsfeld. Erlaubt die Änderung des 
                	Namensraumes für den Datentyp. Dies ist die Pakethierarchie.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifizierer</literal></term>

              <listitem>

                <indexterm><primary>Datatyp- 
                Modifizierer</primary></indexterm>
                <indexterm><primary>Modifizierer</primary><secondary>eines 
                Datentyps</secondary></indexterm>
                <para>Markierfeld, mit den Einträgen <literal>
                Abstract</literal>, <literal>Leaf</literal> und 
                <literal>Root</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Abstract</literal> deklariert, dass dieser 
                    Datentyp nicht instantiiert werden kann und daher immer 
                    spezialisiert werden muss.</para>

                    <note>

                      <para>ArgoUML enthält keine Mechanismen, um Datentypen 
                      zu spezialisieren, so dass dieses Markierfeld wenig 
                      genutzt wird.</para>

                    </note>

                  </listitem>

                  <listitem>

                    <para><literal>Leaf</literal> gibt an, dass der Datentyp 
                    eine weiteren Subtypen haben kann, während <literal>Root
                    </literal> angibt, dass es sich um einen Datentyp auf 
                    oberster Ebene handelt. </para>

                    <tip>

                      <para>Sie können die Spezialisierung eines Datentyps in 
                      einem Klassendiagramm definieren, indem Sie 
                      Generalisierungen zwischen ihnen einzeichnen. </para>

                    </tip>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Sichtbarkeit</literal></term>

              <listitem>

                <indexterm><primary>Datatyp- 
                Sichtbarkeit</primary></indexterm>
                <indexterm><primary>Sichtbarkeit</primary><secondary>des 
                Datentyps</secondary></indexterm>
                <para>Auswahlfeld, mit den Einträgen <literal>
                public</literal>, <literal>private</literal>, 
                <literal>protected</literal>, und
                <literal>package</literal>.</para>

                <para>Gibt die Sichtbarkeit des Datentyps an.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Abhängig von</literal></term>

              <listitem>

                <para>Textbereich. Listet jedes Element auf, das von diesem 
                Datentyp abhängig ist.</para>

                <caution>

                  <para>Es ist nicht klar, dass Abhängigkeiten zwischen 
                  Datentypen mehr Sinn machen.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Notwendig für</literal></term>

              <listitem>

                <para>Textbereich. Listet jedes Element auf von dem dieser 
                Datentyp abhängt.</para>

                <caution>

                  <para>Es ist nicht klar, dass Abhängigkeiten zwischen 
                  Datentypen mehr Sinn machen.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalisierungen</literal></term>

              <listitem>

                <para>Textbereich. Listet jeden Datentyp auf, der diesen 
                Datentyp <emphasis>vererbt (generalisiert)</emphasis>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Spezialisierungen</literal></term>

              <listitem>

                <para>Textbereich. Listet jeden spezialisierten Datentyp auf 
                (z.B. für den dieser Datentyp eine Generalisierung ist).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Operationen</literal></term>

              <listitem>

                <para>Textbereich. Listet alle Operationen auf, die zu diesem 
                Datentyp definiert sind. Ein Taste&nbsp;1-Doppelklick springt 
                zu der markierten Operation. Ein Taste&nbsp;2-Klick öffnet ein 
                Popup-Menü mit zwei Einträgen.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Nach oben</literal>. Nur verfügbar, wenn es 
                    zwei oder mehr Operationen gibt und sich die markierte 
                    Operation nicht ganz oben befindet. Sie wird um einen Schritt 
                    nach oben bewegt.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Nach unten</literal>. Nur verfügbar, wenn es 
                    zwei oder mehr Operationen gibt und sich die markierte 
                    Operation nicht ganz unten befindet. Sie wird um einen 
                    Schritt nach unten bewegt.</para>

                  </listitem>

                </itemizedlist>

                <para>Details über Operationen, siehe 
                	<xref linkend="s1.ref.operation"/>.</para>

                <caution>

                  <para>
                  	ArgoUML behandelt alle Operationen gleich. Jede hier erzeugte 
                  	Operation wird den gleichen Mechanismus wie Operationen in 
                  	Klassen verwenden. Erinnern Sie sich, dass Operationen in 
                  	Datentypen keine Seiteneffekte haben dürfen (sie sind 
                  	read-only). Das heißt, der Modifizierer <literal>query
                  	</literal> <emphasis>muss</emphasis> bei allen Operationen 
                  	ausgewählt sein.
                  </para>

                </caution>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.enumeration">

        <title>Enumeration (Aufzählung)</title>

        <indexterm><primary>Enumeration</primary></indexterm>
        <para>
        Eine Enumeration ist ein primitiver Datentyp, der eine begrenzten Anzahl 
        von Werten in einer kurzen Liste aufweist. Sie hat keine Attribute und 
        jede Operation darf keine Seiteneffekte haben. Eine nützliche Analogie 
        dazu ist der primitive Datentyp boolean in einer Sprache wie Java. 
        Boolean steht für sich selbst&mdash; und hat keine innere Struktur. Es 
        gibt Operationen (z.B. das logische xor) für die Booleans, aber wenn ich 
        <literal>true xor true</literal> ausführe, ist das Ergebnis ein neuer 
        Boolean und die beiden Original-Boolean bleiben unverändert.
        </para>

        <para>
        	Innerhalb von UML&nbsp;1.4 ist <literal>Enumeration</literal> eine 
        	Subklasse der Metaklasse <literal>Datentyp</literal>.
        </para>

        <para>
        	Der große Unterschied zu anderen Datentypen ist, dass eine 
        	Enumeration <literal>Enumeration-Literale</literal> aufweist. Z.B. 
        	die Enumeration <quote>boolean</quote> ist mit zwei Enumeration-
        	Literalen <quote>true</quote> und <quote>false</quote> definiert.
        </para>

        <para>
        	Neue Enumerationen können in ArgoUML mit Hilfe der Schaltfläche 
        	<literal>Neue Enumeration</literal> im Register Eigenschaften des 
        	Modelles oder des Paketes (in diesem Fall ist die 
        	neue Enumeration auf den Scope des Paketes beschränkt), wie auch im 
        	Register Eigenschaften für Datentypen und Enumeration erzeugt werden. 
        	Enumerationen können auch mit dem Symbol in der Diagramm-Symbolleiste 
        	eines Klassendiagrammes erzeugt werden.
        </para>

        <para>
        	Der UML&nbsp;1.4-Standard erlaubt es, benutzerdefinierte 
        	Enumerationen in Klassendiagrammen zu plazieren, um deren 
        	Vererbungsstruktur zu definieren. Dies ist auch in ArgoUML möglich. 
        	Sie wird im Diagramm durch einen Rahmen mit drei Bereichen 
        	dargestellt. Der oberste Bereich ist mit <literal>
        	&laquo;enumeration&raquo;</literal> markiert und enthält den Namen. 
        	Der mittlere Bereich zeigt die Enumerations-Literale. Der untere 
        	enthält die Operationen.
        </para>

        <sect2>

          <title>Enumeration Detail-Register</title>

          <indexterm><primary>Enumeration Detail-Register</primary></indexterm>
          <indexterm><primary>Detail-Register</primary><secondary>für 
          Enumeration</secondary></indexterm>
          <para>
          	Folgende Detail-Register sind für Enumerationen aktiv. 
          </para>

          <variablelist>

            <varlistentry>

              <term><literal>Zu-Bearbeiten-Element</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaften</literal></term>

              <listitem>

                <indexterm><primary>Enumeration 
                Eigenschaften</primary></indexterm>
                <indexterm><primary>Eigenschaften</primary><secondary>von  
                Enumeration</secondary></indexterm>
                <para>Siehe 
                <xref linkend="s2.ref.enumeration_property_toolbar"/> und 
                <xref linkend="s2.ref.enumeration_property_fields"/> 
                unten.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Dokumentation</literal></term>

              <listitem>

                <para>Standard-Register. Siehe 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Darstellung</literal></term>

              <listitem>

                <para>Standard-Register. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Quelldatei</literal></term>

              <listitem>

                <para>Standard-Register. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotyp</literal></term>

              <listitem>

                <para>
                	Standard-Register. Das UML-Metamodell hat standardmäßig 
                	die folgenden Stereotypen für einen Klassifizierer definiert, 
                	der auch auf eine Enumeration angewendet wird: 
                </para>
                
                <itemizedlist>

                  <listitem>
                    <para><literal>metaclass</literal> (von der 
                    Superklasse, <literal>Classifier</literal>). 
                    <!-- TODO: Not present! -->
                    </para>
                  </listitem>

                  <listitem>
                    <para><literal>powertype</literal> (von der 
                    Superklasse, <literal>Classifier</literal>). 
                    <!-- TODO: Not present! -->
                    </para>
                  </listitem>

                  <listitem>
                    <para><literal>process</literal> (von der 
                    Superklasse, <literal>Classifier</literal>). 
                    </para>
                  </listitem>

                  <listitem>
                    <para><literal>thread</literal> (von der 
                    Superklasse, <literal>Classifier</literal>). 
                    </para>
                  </listitem>

                  <listitem>
                    <para><literal>utility</literal> (von der 
                    Superklasse, <literal>Classifier</literal>). 
                    </para>
                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaftswerte</literal></term>

              <listitem>

                <indexterm><primary>Eigenschaftswerte Enumeration</primary></indexterm>
                <indexterm><primary>Eigenschaftswerte 
                </primary><secondary>von 
                Enumeration</secondary></indexterm>
                <para>
                	Standard-Register. Im UML-Metamodell sind für die <literal>
                	Enumeration</literal> keine Standard-Eigenschaftswerte 
                	definiert. 
                </para>


              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.enumeration_property_toolbar">

          <title>Eigenschaftssymbolleiste Enumeration</title>

          <indexterm><primary>Eigenschaftssymbolleiste Enumeration
          </primary></indexterm>
          <indexterm><primary>Eigenschaftssymbolleiste</primary><secondary>für 
          Enumeration</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Nach oben</literal></term>

              <listitem>

                <para>Geht in der zusammengesetzten Struktur nach oben.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/datatype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Datentyp</literal></term>

              <listitem>

                <para>
                	Erzeugt im gleichen Paket einen neuen Datentyp (siehe 
                	<xref linkend="s1.ref.class_class"/>) als aktuelle 
                	Enumeration. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/enumeration.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neue Enumeration</literal></term>

              <listitem>

                <para>
                	Erzeugt innerhalb des gleichen Namensraumes eine neue 
                	Enumeration als aktuelle Enumeration und springt sofort in 
                	das Register Eigenschaften der neuen Enumeration.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/enumeration_literal.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neues Enumerations-Literal</literal></term>

              <listitem>

                <para>
                	Erzeugt in der Enumeration ein neues Enumerations-Literal 
                	und springt sofort in das Register Eigenschaften dieses 
                	Literals.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/operation.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neue Operation</literal></term>

              <listitem>

                <para>
                	Erzeugt in der Enumeration eine neue Operation und springt 
                	sofort in das Register Eigenschaften dieser Operation.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Stereotyp</literal></term>

              <listitem>

                <indexterm><primary>Stereotyp hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Stereotyp</primary></indexterm>
                <indexterm><primary>Erzeuge 
                neuen</primary><secondary>Stereotypen</secondary></indexterm>
                <para>
                	Erzeugt innerhalb des gleichen Paketes einen neuen 
                	Stereotypen (siehe <xref linkend="s1.ref.stereotype"/>) 
                	und springt sofort in das Register Eigenschaften dieses 
                	Stereotypen. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Aus Modell entfernen</literal></term>

              <listitem>

                <para>Entfernt den Datentyp aus dem Modell.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.enumeration_property_fields">

          <title>Eigenschaftsfelder für Enumerationen</title>

          <indexterm><primary>Enumeration Eigenschaftsfelder</primary></indexterm>
          <indexterm><primary>Eigenschaftsfelder</primary><secondary>für 
          Enumeration</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Enumeration Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>der  
                Enumeration</secondary></indexterm>
                <para>
                	Textfeld. Der Name der Enumeration. Die primitiven 
                	Enumerationen haben alle Namen in Kleinbuchstaben. Hierfür 
                	gibt es allerdings keine formale Konvention. 
                </para>

                <note>

                  <para>
                  	Der Standardname für einen neu erzeugten Datentyp ist ein 
                  	leerer String <quote />. Enumerationen mit einem leeren 
                  	String als Namen, wird mit dem Namen <literal>(Unbenannte 
                  	Enumeration)</literal> im Explorer erscheinen.
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namensraum</literal></term>

              <listitem>

                <para>
                	Ein Kombinationsfeld. Erlaubt das Ändern des Namensraumes 
                	der Enumeration. Dies ist die zusammengesetzte Hierarchie.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifizierer</literal></term>

              <listitem>

                <indexterm><primary>Enumeration 
                Modifizierer</primary></indexterm>
                <indexterm><primary>Modifizierer</primary><secondary>der  
                Enumeration</secondary></indexterm>
                <para>
                	Markierfeld mit den Einträgen <literal>
                	Abstract</literal>, <literal>Leaf</literal> und 
                	<literal>Root</literal>.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Abstract</literal> wird verwendet, um zu 
                    	deklarieren, dass diese Enumeration nicht instantiiert 
                    	werden kann, aber immer spezialisiert werden muss. 
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>Leaf</literal> zeigt an, dass diese Enumeration 
                    	keine weiteren Subtypen haben kann, während <literal>
                    	Root</literal> angibt, dass es sich um eine Enumeration 
                    	auf oberster Ebene handelt. 
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Sichtbarkeit</literal></term>

              <listitem>

                <indexterm><primary>Enumeration 
                Sichtbarkeit</primary></indexterm>
                <indexterm><primary>Sichtbarkeit</primary><secondary>der  
                Enumeration</secondary></indexterm>
                <para>
                	Auswahlfeld mit den Einträgen <literal>
                	public</literal>, <literal>private</literal>, 
                	<literal>protected</literal> und
                	<literal>package</literal>.
                </para>

                <para>Gibt die Sichtbarkeit der Enumeration wieder.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Abhängig von</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet jedes Element auf, dass von dieser 
                	Enumeration abhängig ist. Taste&nbsp;1-Doppelklick geht zum 
                	markierten Modellelement. Taste&nbsp;2-Klick öffnet ein 
                	Popup-Menü mit den folgenden Einträgen.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Hinzufügen...</literal>.
                    	Öffnet ein Dialogfenster, das es erlaubt, Abhängigkeiten 
                    	von anderen Modellelementen zu erzeugen. 
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Notwendig für</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet jedes Element auf, von dem diese 
                	Enumeration abhängt. Ein Taste&nbsp;1-Doppelklick geht zum 
                	markierten Modellelement. Ein Taste&nbsp;2-Klick öffnet ein 
                	Popup-Menü mit den folgenden Einträgen..
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Hinzufügen...</literal>.
                    	Öffnet ein Dialogfenster, das es erlaubt, Abhängigkeiten 
                    	auf andere Modellelemente zu erzeugen. 
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalisierungen</literal></term>

              <listitem>

                <para>Textbereich. Listet jede Enumeration auf, die diese 
                Enumeration <literal>generalisiert</literal>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Spezialisierungen</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet jede spezialisierte Enumeration auf 
                	(z.B. für wen diese Enumeration eine Generalisierung ist).
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Operationen</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet alle Operationen auf, die für diese 
                	Enumeration definiert sind. Ein Taste&nbsp;1-Doppelklick 
                	geht zu der markierten Operation. Ein Taste&nbsp;2-Klick 
                	öffnet ein Popup-Menü mit zwei Einträgen.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Nach oben</literal>. Nur verfügbar, wenn zwei 
                    	oder mehr Operationen gelistet sind und die markierte 
                    	Operation sich nicht oben befindet. Sie wird um einen 
                    	Schritt nach oben bewegt. 
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>Nach unten</literal>. Nur verfügbar, wenn zwei 
                    	oder mehr Operationen gelistet sind und die markierte 
                    	Operation sich nicht unten befindet. Sie wird um einen 
                    	Schritt nach unten bewegt. 
                    </para>

                  </listitem>

                </itemizedlist>

                <para>
                	Details über Operationen, siehe 
                	<xref linkend="s1.ref.operation"/>.</para>

                <caution>

                  <para>
                  	ArgoUML behandelt alle Operationen gleich. Jede, hier 
                  	erzeugte Operation wird den gleichen Mechanismus wie 
                  	Operationen für Klassen verwenden. Erinnern Sie sich, dass 
                  	Operationen für Enumerationen keine Seiteneffekte haben 
                  	dürfen (sie sind read-only). Das heißt, der Modifizierer 
                  	<literal>query</literal> <emphasis>muss</emphasis> für alle 
                  	Operationen markiert sein.
                  </para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Literale</literal></term>

              <listitem>

                <indexterm><primary>Enumeration 
                Literale</primary></indexterm>
                <indexterm><primary>Literale</primary><secondary>von  
                Enumeration</secondary></indexterm>
                <para>
                	Textbereich. Listet alle Enumerations-Literale auf, die für 
                	diese Enumeration definiert sind. Ein Taste&nbsp;1-
                	Doppelklick geht zu dem markierten Literal, ein Taste&nbsp;2-
                	Klick öffnet ein Popup-Menü mit zwei Einträgen.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Nach oben</literal>. Nur verfügbar, wenn es 
                    	zwei oder mehr Literale gibt und sich das markierte 
                    	Literal nicht ganz oben befindet. Es wird um einen 
                    	Schritt nach oben bewegt. 
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>Nach unten</literal>. Nur verfügbar, wenn zwei 
                    	oder mehr Literale aufgelistet sind und das markierte 
                    	Literal sich nich ganz unten befindet. Es wird um einen 
                    	Schritt nach unten bewegt. 
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.enumeration-literal">
        <title>Enumeration Literal</title>
        <indexterm><primary>Enumeration Literal</primary></indexterm>
        <para>
        	Ein Enumerations-Literal ist eines der vordefinierten Werte einer 
        	Enumeration.
        </para>
      </sect1>

      <sect1 id="s1.ref.stereotype">

        <title>Stereotyp</title>

        <indexterm><primary>Stereotyp</primary></indexterm>
        <para>
        	Stereotypen sind der Haupterweiterungsmechanismus von UML. Er 
        	enthält den Weg, um Spezialisierungen von den Standard-Metaklassen 
        	abzuleiten. <literal>Stereotyp</literal> ist eine Subklasse von 
        	<literal>GeneralisierbaresElement</literal> im UML-Metamodell. 
        	Stereotypen werden durch <emphasis>Randbedingungen</emphasis> und 
        	<emphasis>Eigenschaftswerte</emphasis> ergänzt.
        </para>

        <para>
        	Neue Stereotypen werden von fast jedem Modellelement über das 
        	Register Eigenschaften hinzugefügt. Eigenschaften existierender 
        	Stereotypen können durch Auswahl des Registers Eigenschaften eines 
        	jeden Modellelementes mit diesem Stereotypen mit Hilfe der 
        	Navigationsschaltfläche erreicht werden (
        	<guiicon><inlinemediaobject><imageobject>
        	<imagedata align="center"
         	fileref="images/icons/navigate_stereotype.gif"
         	format="GIF"/></imageobject></inlinemediaobject></guiicon>) 
        	im Register Eigenschaften.
        </para>

        <sect2>

          <title>Stereotyp Detail-Register</title>

          <indexterm><primary>Stereotyp Detail-Register 
          </primary></indexterm>
          <indexterm><primary>Detail-Register</primary><secondary>für 
          Stereotypen</secondary></indexterm>
          <para>
          	Die folgenden Detail-Register sind für Stereotypen aktiv.
          </para>

          <variablelist>

            <varlistentry>

              <term><literal>Zu-Bearbeiten-Element</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaften</literal></term>

              <listitem>

                <para>Siehe 
                <xref linkend="s2.ref.stereotype_property_toolbar"/> 
                und <xref linkend="s2.ref.stereotype_property_fields"/> 
                unten.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Dokumentation</literal></term>

              <listitem>

                <para>Standard-Register. Siehe 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotyp</literal></term>

              <listitem>

                <para>Standard-Register.</para>

                <warning>

                  <para>
                  	Hier können Sie Stereotypen für Stereotypen einstellen, was 
                  	nicht sehr sinnvoll ist.
                  </para>

                </warning>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaftswerte</literal></term>

              <listitem>

                <para>
                	Standard-Register. Im UML-Metamodell haben <literal>
                	Stereotypen</literal> die folgenden Standard-
                	Eigenschaftswerte definiert. 
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>derived</literal> (von der  
                    	Superklasse, <literal>ModelElement</literal>).
                    	Der Wert <literal>true</literal> bedeutet, dass die 
                    	Klasse redundant ist&mdash;sie kann formal von anderen 
                    	Elementen abgeleitet sein. <literal>false</literal> 
                    	bedeutet, dass sie es nicht kann. 
                    </para>

                    <note>

                      <para>
                      	Dies zeigt jedes Element mit diesem Stereotypen an, 
                      	dessen Eigenschaftswert entsprechend auf <literal>
                      	derived</literal> gesetzt wurde.
                      </para>

                    </note>

                  </listitem>

                </itemizedlist>

                <caution>

                  <para>
                  	Eigenschaftswerte für Stereotypen unterscheiden sich 
                  	deutlich von denen für Elemente der UML-Core-Architektur, 
                  	da Sie auf alle Modellelemente angewendet werden, dem dieser 
                  	Stereotyp zugewiesen wurde und <emphasis>nicht</emphasis> 
                  	nur auf den Stereotypen selbst.
                  </para>

                </caution>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.stereotype_property_toolbar">

          <title>Stereotyp Eigenschaftssymbolleiste</title>

          <indexterm><primary>Stereotyp Eigenschaftssymbolleiste
          </primary></indexterm>
          <indexterm><primary>Eigenschaftssymbolleiste</primary><secondary>für  
          Stereotypen</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Nach oben</literal></term>

              <listitem>

                <para>Geht in der Paketstruktur des Modelles nach oben.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Stereotyp hinzufügen</literal></term>

              <listitem>

                <para>
                	Erzeugt im Modell (das in keinem Diagramm erscheint) einen 
                	neuen Stereotypen (siehe <xref linkend="s1.ref.stereotype"/>) 
                	und springt sofort in das Register Eigenschaften dieses 
                	Stereotypen. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/tag_definition.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neue Eigenschafts-Definition</literal></term>

              <listitem>

                <para>
                	Erzeugt innerhalb des Modelles (das in keinem Diagramm 
                	erscheint) eine neue Eigenschafts-Definition (siehe 
                	<xref linkend="s1.ref.tagdefinition"/>) und springt sofort 
                	in das Register Eigenschaften dieser Eigenschafts-
                	Definition. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Löschen</literal></term>

              <listitem>

                <para>Entfernt diesen Stereotypen aus dem Modell.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.stereotype_property_fields">

          <title>Eigenschaftsfelder für Stereotypen</title>

          <indexterm><primary>Stereotyp Eigenschaftsfelder 
          </primary></indexterm>
          <indexterm><primary>Eigenschaftsfelder</primary><secondary>für 
          Stereotypen</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Stereotyp- 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>des 
                Stereotypen</secondary></indexterm>
                <para>
                	Textfeld. Der Name des Stereotypen. Es gibt keine Konvention 
                	für das Benennen von Stereotypen, außer dass sie mit einem 
                	Kleinbuchstaben beginnen. Auch die Standard-UML-Stereotypen 
                	variieren zwischen alles in Kleinbuchstaben (z.B. <literal>
                	metamodel</literal>), verbundeneZeichen (z.B. <literal>
                	systemModel</literal>) und leerzeichenseparierte (z.B.  
                	<literal>object model</literal>).
                </para>

                <note>

                  <para>
                  	ArgoUML erzwingt keine Namenskonvention für Stereotypen. 
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Basisklasse</literal></term>

              <listitem>

                <indexterm><primary>Stereotyp Basisklasse
                </primary></indexterm>
                <indexterm><primary>Basisklasse</primary><secondary>von 
                Stereotypen</secondary></indexterm>
                <para>
                	Kombinationsfeld. Jeder Stereotyp muss von einer der 
                	Metaklassen des UML-Metamodelles  
                <!--
                <literal>Abstraction</literal>, <literal>
                Actor</literal>, <literal>Association</literal>, 
                <literal>AssociationEnd</literal>, <literal>
                Attribute</literal>, <literal>
                BehavioralFeature</literal>, <literal>
                CallEvent</literal>, <literal>Class</literal>, <literal>
                Classifier</literal>, <literal>Collaboration</literal>, 
                <literal>Comment</literal>, <literal>
                Component</literal>, <literal>Constraint</literal>, 
                <literal>DataType</literal>, <literal>
                Exception</literal>, <literal>Flow</literal>, <literal>
                Generalization</literal>, <literal>Interface</literal>, 
                <literal>Link</literal>, <literal>Model</literal>, 
                <literal>ModelElement</literal>, <literal>
                Node</literal>, <literal>NodeInstance</literal>, 
                <literal>ObjectFlowState</literal>, <literal>
                Operation</literal>, <literal>Package</literal>, 
                <literal>Permission</literal>, <literal>
                Signal</literal>, <literal>Subsystem</literal> and 
                <literal>Usage</literal>) -->
                	oder der Modellelementklassen abgeleitet werden, die von 
                	diesen abgeleitet sind. Der Stereotyp wird dann für die 
                	Modellelemente verfügbar sein, die von der gleichen 
                	Metaklasse oder von diesem Modellelement abgeleitet wurden. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namensraum</literal></term>

              <listitem>

                <indexterm><primary>Stereotyp 
                Namensraum</primary></indexterm>
                <indexterm><primary>Namensraum</primary><secondary>von 
                Stereotypen</secondary></indexterm>
                <para>
                	Kombinationsfeld. Gibt den Namensraum für diesen Stereotypen 
                	wieder. Dies ist die Pakethierarchie.
               </para>
 
              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifizierer</literal></term>

              <listitem>

                <indexterm><primary>Stereotyp 
                Modifizierer</primary></indexterm>
                <indexterm><primary>Modifizierer</primary><secondary>von  
                Stereotypen</secondary></indexterm>
                <para>
                	Markierfeld mit den Einträgen <literal>
                	Abstract</literal>, <literal>Leaf</literal> und 
                	<literal>Root</literal>.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Abstract</literal> wird verwendet, um zu 
                    	deklarieren, dass Modellelemente, die diesen Stereotypen 
                    	verwenden nicht instantiiert werden können, aber immer 
                    	spezialisiert werden müssen.
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>Leaf</literal> gibt an, dass Modellelemente, die 
                    	diesen Stereotypen verwenden, keine weiteren Subtypen 
                    	haben können, während <literal>Root</literal> angibt, 
                    	dass es sich um ein Modellelement auf oberster Ebene 
                    	handelt.
                    </para>

                  </listitem>

                </itemizedlist>

                <caution>

                  <para>
                  	Erinnern Sie sich, dass diese Modifizierer auf Modellelemente 
                  	angewendet werden die Stereotypen verwenden, nicht auf die 
                  	Stereotypen selbst.
                  <!-- TODO: MVW: I strongly doubt this. 
                  The standard says: "Tag definitions and constraints 
                  attached to a stereotype apply to all model elements 
                  branded by that stereotype." 
                  But it does not say the same for modifiers. -->
                  </para>

                </caution>

                <warning>

                  <para>
                  	Weder erzwingt ArgoUML, noch prüft es, dass Modellelemente, 
                  	die Stereotypen verwenden, die Stereotyp-Modifizierer 
                  	übernehmen.
                  </para>

                </warning>

              </listitem>

            </varlistentry>

            <varlistentry>
              <term><literal>Sichtbarkeit</literal></term>
              <listitem>
                <indexterm><primary>Stereotyp 
                Sichtbarkeit</primary></indexterm>
                <indexterm><primary>Sichtbarkeit</primary><secondary>von 
                Stereotypen</secondary></indexterm>
                <para>
                	Auswahlfeld mit den Einträgen <literal>
                	public</literal>, <literal>private</literal>, 
                	<literal>protected</literal> und
                	<literal>package</literal>.
                </para>

                <para>Gibt die Sichtbarkeit für Stereotypen wieder.</para>

              </listitem>
            </varlistentry>

            <varlistentry>

              <term><literal>Generalisierungen</literal></term>

              <listitem>

                <para>Textbereich. Listet jeden Stereotypen auf, der diesen 
                Stereotypen <emphasis>generalisiert</emphasis>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Spezialisierungen</literal></term>

              <listitem>

                <para>Textbereich. Listet jeden spezialisierten Stereotypen auf 
                (z.B. für den dieser Stereotyp eine Generalisierung ist).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaftsdefinitionen</literal></term>

              <listitem>

                <para>Textbereich. Listet jede Eigenschaftsdefinition auf, die 
                für diesen Stereotypen definiert ist.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Erweiterte Elemente</literal></term>

              <listitem>

                <para>Textbereich. Listet alle Modellelemente auf, die mit diesem 
                Stereotypen versehen wurden.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.tagdefinition">

        <title>Eigenschaftsdefinition</title>
        
        <para>(Noch zu beschreiben)</para>
        
      </sect1>

      <sect1 id="s1.ref.diagram_types">

        <title>Diagramm</title>

        <indexterm><primary>Diagramm</primary></indexterm>
        <para>
        	Der UML-Standard spezifiziert acht prinzipielle Diagramme, alle 
        	werden von ArgoUML unterstützt.
        </para>

        <itemizedlist>

          <listitem>

            <para>
            	<emphasis>Anwendungsfalldiagramm</emphasis>. Wird für das 
            	Erfassen und Analysieren der Anforderungen für ein OOA&amp;D-
            	Projekt verwendet. Details zum ArgoUML-Anwendungsfalldiagramm 
            	und den von ihm unterstützten Modellelementen, siehe 
            	<xref linkend="ch.ref.entusecase"/>.
            </para>

          </listitem>

          <listitem>

            <para>
            	<emphasis>Klassendiagramm</emphasis>. Dieses Diagramm erfasst 
            	die statische Struktur eines zu entwerfenden Systems, zeigt die 
            	Klassen, Schnittstellen und Datentypen und wie sie zueinander 
            	in Beziehung stehen. Varianten dieses Diagrammes werden dazu 
            	verwendet, die Paketstrukturen innerhalb eines Systems (das 
            	<emphasis>Paketdiagramm</emphasis>) und die Beziehungen 
            	zwischen bestimmten Instanzen (das <emphasis>Objektdiagramm
            	</emphasis>) darzustellen. 
            </para>

            <para>
            	Das ArgoUML-Klassendiagramm erlaubt die Unterstützung von 
            	Klassen- und Paketdiagrammen. Details über die unterstützten 
            	Modellelemente, siehe <xref linkend="ch.ref.entclass"/>. Das 
            	Objektdiagramm wird durch das Verteilungsdiagramm unterstützt.
            </para>

          </listitem>

          <listitem>

            <para>
            	<emphasis>Verhaltensdiagramme</emphasis>. Es gibt vier solcher 
            	Diagramme (oder, genauer gesagt, fünf, da das 
            	Anwendungsfalldiagramm eine Art Verhaltensdiagramm ist), die 
            	das dynamische Verhalten des Systems auf allen Ebenen darstellen.
            </para>

            <itemizedlist>

              <listitem>

                <para>
                	<emphasis>Zustandsdiagramm</emphasis>. Wird verwendet, um 
                	das dynamische Verhalten eines einzelnen Objektes 
                	darzustellen (Klasseninstanz). Dieses Diagramm ist in 
                	Systemen, die komplexe Kommunikationsprotokolle verwenden, 
                	wie in der Telekommunikation, von besonderer Bedeutung. 
                	Details über das ArgoUML-Zustandsdiagramm und der von ihm 
                	unterstützten Modellelemente, siehe 
                	<xref linkend="ch.ref.entstate"/>.
                </para>

              </listitem>

              <listitem>

                <para>
                	<emphasis>Aktivitätsdiagramm</emphasis>. Wird verwendet, um 
                	das dynamische Verhalten von Gruppen von Objekten 
                	(Klasseninstanz) darzustellen. Dieses Diagramm ist eine 
                	Alternative zum Zustandsdiagramm und passt besser bei 
                	Systemen mit umfangreicher Benutzer-Interaktion. Details 
                	über das ArgoUML-Aktivitätsdiagramm und der von ihm 
                	unterstützten Modellelemente, siehe 
                	<xref linkend="ch.ref.entactiv"/>.
                </para>

              </listitem>

              <listitem>

                <para>
                	<emphasis>Interaktionsdiagramme</emphasis>. Es gibt zwei 
                	Diagramme in dieser Kategorie, die dazu verwendet werden, die 
                	dynamische Interaktion zwischen Objekten im System 
                	(Klasseninstanzen) darzustellen.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<emphasis>Sequenzdiagramm</emphasis>. Zeigt die 
                    	Interaktionen (typischerweise Nachrichten oder 
                    	Prozeduraufrufe) zwischen Instanzen von Klassen 
                    	(Objekten) und Akteuren über die Zeit. Besonders 
                    	nützlich, wo die zeitlichen Beziehungen zwischen 
                    	Interaktionen wichtig sind. Details über das 
                    	ArgoUML-Sequenzdiagramm und den von ihm 
                    	unterstützten Modellelementen, siehe 
                    	<xref linkend="ch.ref.entseq"/>.
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<emphasis>Kollaborationsdiagramm</emphasis>.
                    	Zeigt die Interaktionen (typischerweise Nachrichten oder 
                    	Prozeduraufrufe) zwischen Instanzen von Klassen 
                    	(Objekten) und Akteuren gegenüber den strukturellen 
                    	Beziehungen zwischen diesen Instanzen. Besonders passend 
                    	dort, wo es hilfreich ist, eine Beziehung zwischen 
                    	Interaktionen und der statischen Struktur des Systems 
                    	herstellen zu müssen. Details über das 
                    	ArgoUML-Kollaborationsdiagramm und der von ihm 
                    	unterstützten Modellelemente, siehe 
                    	<xref linkend="ch.ref.entcollab"/>.
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </itemizedlist>

          </listitem>

          <listitem>

            <para>
            	<emphasis>Implementierungsdiagramme</emphasis>. UML definiert 
            	zwei Implementierungsdiagramme, um die Beziehung zwischen den 
            	Softwarekomponenten, die das System ausmachen (das <emphasis>
            	Komponentendiagramm</emphasis>) und der Beziehung zwischen der 
            	Software und der Hardware auf dem das System zu Laufzeit läuft 
            	(das <emphasis>Verteilungsdiagramm</emphasis> darzustellen.
            </para>

            <para>
            	Das ArgoUML-Verteilungsdiagramm enthält die Unterstützung für 
            	das Komponenten- und das Verteilungsdiagramm und zusätzlich für 
            	die Objektdiagramme. Details über das Diagramm und die von ihm 
            	unterstützten Modellelemente, siehe 
            	<xref linkend="ch.ref.entdeploy"/>.
            </para>

          </listitem>

        </itemizedlist>

        <para>
        	Diagramme werden mit Hilfe des <literal>Neues Diagramm</literal>-
        	DropDown-Menüs (siehe <xref linkend="s1.ref.create.diagram.menu"/>
        	), oder mit den Werkzeugen in der Symbolleiste (siehe 
        	<xref linkend="ch.ref.toolbar.create"/>), oder mit den Popup-Menüs 
        	im Explorer erzeugt.
        </para>

        <note>

          <para>
          	ArgoUML verwendet sein Verteilungsdiagramm, um die UML&nbsp;1.4-
          	Komponenten, Verteilung- und Objektdiagramme zu erzeugen.
          </para>

        </note>

        <caution>

          <para>
          	Zustands- und Aktivitätsdiagramme sind mit einer bestimmten Klasse 
          	oder Operation verknüpft (oder letzten Endes auch mit einem Paket) 
          	und können nur erzeugt werden, wenn dieses Modellelement markiert 
          	wurde.
          </para>

        </caution>

        <warning>

          <para>
          	In der Version 0.24 von ArgoUML, werden die 
          	UML&nbsp;1.4-Objektdiagramme als Variante des Klassendiagrammes 
          	nicht direkt unterstützt. Jedoch ist es möglich, einfache 
          	Objektdiagramme mit dem ArgoUML-Verteilungsdiagramm zu erstellen.
          </para>

        </warning>

        <sect2>

          <title>Diagramm Detail-Register</title>

          <indexterm><primary>Diagramm Detail-Register</primary></indexterm>
          <indexterm><primary>Detail-Register</primary><secondary>für 
          Diagramme</secondary></indexterm>
          <para>
          	Die folgenden Detail-Register sind für Diagramm aktiv.
          </para>

          <variablelist>

            <varlistentry>

              <term><literal>Zu-Bearbeiten-Element</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaften</literal></term>

              <listitem>

                <para>Siehe 
                <xref linkend="s2.ref.diagram_property_fields"/> 
                unten.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2>

          <title>Diagramm Eigenschaftssymbolleiste</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Nach oben</literal></term>

              <listitem>

                <para>Geht in der Paketstruktur des Modelles nach oben.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Löschen</literal></term>

              <listitem>

                <para>
                	Entfernt das Diagramm aus dem Modell. Als Konsequenz 
                	werden im Falle eines Zustandsdiagrammes oder eines 
                	Aktivitätsdiagrammes auch alle darin enthaltenen Elemente 
                	gelöscht.
                </para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.diagram_property_fields">

          <title>Eigenschaftsfelder für Diagramme</title>

          <indexterm><primary>Diagramm Eigenschaftsfelder
          </primary></indexterm>
          <indexterm><primary>Eigenschaftsfelder</primary><secondary>für  
          Diagramme</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Diagramm-Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>des 
                Diagrammes</secondary></indexterm>
                <para>
                	Der Name des Diagrammes. Es gibt keine Konventionen für die 
                	Benennung von Diagrammen. Standardmäßig verwendet ArgoUML 
                	(Leerzeichen-separierte) Diagrammnamen und eine sequentielle 
                	Nummer, also <literal>Anwendungsfalldiagramm 1</literal>.
                </para>

                <tip>

                  <para>
                  	Dieser Name wird dazu verwendet, einen Dateinamen zu 
                  	generieren, wenn Sie das Menü <quote>Speichere Grafiken...
                  	</quote> aktivieren.
                  </para>

                </tip>

              </listitem>
            </varlistentry>

            <varlistentry>
              <term><literal>Ausgangsmodell</literal></term>
              <listitem>

                <indexterm><primary>Ausgangsmodell</primary></indexterm>
                <indexterm><primary>Ausgangsmodell</primary><secondary>von  
                Diagrammen</secondary></indexterm>
                <para>
                	Das Ausgangsmodell eines Diagrammes ist nicht in der UML-
                	Spezifikation definiert. Das Ausgangsmodell ist das 
                	durch das Diagramm repräsentierte Modellelement. Von da an, 
                	hängt sein Typ vom Typ des Diagrammes ab: z.B. es ist der 
                	von einem Klassendiagramm repäsentierte Namensraum, oder der 
                	Zustandautomat im Falle eines Zustandsdiagrammes. 
                </para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entusecase">

      <title>Referenz der Modellelemente für Anwendungsfalldiagramme</title>

      <indexterm><primary>Anwendungsfalldiagramm</primary></indexterm>
      <sect1>

        <title>Einleitung</title>

        <para>
        	Dieses Kapitel beschreibt jedes Modellelement, das innerhalb eines 
        	Anwendungsfalldiagrammes erzeugt werden kann. Beachten Sie, dass 
        	einige Sub-Modellelemente der Modellelemente nicht immer im Diagramm 
        	erscheinen können.
        </para>

        <para>
        	Es gibt eine sehr enge Beziehung zwischen diesem Material und dem 
        	Register Eigenschaften des Detailfensters (siehe 
        	<xref linkend="s1.ref.proptab"/>). Dieser Abschnitt behandelt die 
        	Eigenschaften im Allgemeinen, in diesem Kapitel sind sie mit den 
        	spezifischen Modellelementen verknüpft. 
        </para>

        <para>
        	<xref linkend="fig.ref.use_case_diagram"/> zeigt ein 
        	Anwendungsfalldiagramm mit allen typischen Modellelementen. 
        </para>

        <figure id="fig.ref.use_case_diagram">

          <title>Typische Modellelemente in einem Anwendungsfalldiagramm.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/use_case_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <sect2>

          <title>ArgoUML-Einschränkungen, welche die Anwendungsfalldiagramme 
          betreffen</title>

          <para>
          	Anwendungsfalldiagramme werden jetzt von ArgoUML gut unterstützt. 
          	Es gibt aber einige kleinere Einschränkungen, speziell bei 
          	Erweiterungspunkten.
          </para>

          <note>

            <para>
            	Frühere Versionen von ArgoUML (0.9 und früher) implementierten 
            	extend- und include-Beziehungen mit Hilfe einer stereotypisierten 
            	Abhängigkeitsbeziehung. Obwohl solche Diagramme korrekt im 
            	Diagramm dargestellt werden, werden sie nicht richtig mit den 
            	Anwendungsfällen verbunden, und Sie sollten diese durch die 
            	richtigen extend- und include-Beziehungen im aktuellen System 
            	ersetzen.
            </para>

          </note>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.actor">

        <title>Akteur</title>

        <indexterm><primary>Akteur</primary></indexterm>
        <indexterm><primary>Externe Entität</primary></indexterm>
        <para>
        	Ein Akteur repräsentiert eine externe Entität (Mensch oder Maschine) 
        	die mit dem System interagiert, die Eingabeinformationen gibt, 
        	Ausgabeinformationen empfängt oder beides.
        </para>

        <para>
        	Innerhalb des UML-Metamodelles ist der Akteur eine Subklasse von
        	<literal>classifier</literal>.
        </para>

        <para>
        	Der Akteur wird durch ein <quote>Strichmännchen</quote> im Diagramm 
        	repräsentiert (siehe
        	<xref linkend="fig.ref.use_case_diagram"/>).
        </para>

        <sect2>

          <title>Akteur Detail-Register</title>

          <indexterm><primary>Akteur Detail-Register</primary></indexterm>
          <indexterm><primary>Detail-Register</primary><secondary>für den 
          Akteur</secondary></indexterm>
          <para>
          	Die folgenden Detail-Register sind für Akteure aktiv.
          </para>

          <variablelist>

            <varlistentry>

              <term><literal>Zu-Bearbeiten-Element</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaften</literal></term>

              <listitem>

                <para>Siehe 
                <xref linkend="s2.ref.actor_property_toolbar"/> und 
                <xref linkend="s2.ref.actor_property_fields"/> 
                unten.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Dokumentation</literal></term>

              <listitem>

                <para>Standard-Register. Siehe 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Darstellung</literal></term>

              <listitem>

                <para>
                	Standard-Register. Die Füllfarbe wird für den Kopf des 
                	Strichmännchens verwendet.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Quellcode</literal></term>

              <listitem>

                <para>
                	Standard-Register. Normalerweise ist für einen Akteur kein 
                	Code erforderlich, da er hinsichtlich des Systems extern ist.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotyp</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaftswerte</literal></term>

              <listitem>

                <para>
                	Standard-Register. Im UML-Metamodell sind für den <literal>
                	Akteur</literal> die folgenden Eigenschaftswerte definiert.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>persistence</literal> (von der 
                    	Superklasse <literal>Classifier</literal>). Der Wert  
                    	<literal>transitory</literal> gibt an, dass der 
                    	angezeigte Zustand gelöscht wird, wenn eine Instanz 
                    	gelöscht oder <literal>persistent</literal> wird, ein 
                    	markierter Zustand bleibt erhalten, wenn eine Instanz 
                    	gelöscht wird.
                    </para>

                    <tip>

                      <para>
                      	Akteure sitzen außerhalb des Systems, so dass deren 
                      	internes Verhalten von geringem Interesse. Dieser 
                      	Eigenschaftwert sollte am Besten ignoriert werden.
                      </para>

                    </tip>

                  </listitem>

                  <listitem>

                    <para><literal>semantics</literal> (von der  
                    Superklasse <literal>Classifier</literal>). Der Wert ist 
                    eine Spezifikation der Semantik des Akteurs.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (von der  
                    Superklasse <literal>ModelElement</literal>). 
                    Der Wert <literal>true</literal>bedeutet, dass der Akteur 
                    redundant ist&mdash; er kann formal von anderen Elementen 
                    abgeleitet werden oder <literal>false</literal> bedeutet, 
                    er kann es nicht.</para>

                    <note>

                      <para>
                      	Abgeleitete Akteure haben nur einen eingeschränkten 
                      	Wert, da sie außerhalb des Systems designed wurden. 
                      	Sie können Ihren Wert bei der Analyse haben, um 
                      	nützliche Namen oder Konzepte einzuführen.
                      </para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checkliste</literal></term>

              <listitem>

                <para>Standard-Register für einen Classifier.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.actor_property_toolbar">

          <title>Akteur Eigenschaftssymbolleiste</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Nach oben</literal></term>

              <listitem>

                <para>Geht in der Paketstruktur des Modelles einen Schritt 
                nach oben.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center" fileref="images/icons/actor.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Akteur hinzufügen</literal></term>

              <listitem>

                <indexterm><primary>Akteur hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Akteur</primary></indexterm>
                <indexterm><primary>Erzeuge  
                neuen</primary><secondary>Akteur</secondary></indexterm>
                <para>
                	Erzeugt einen neuen Akteur im Modell (aber nicht im Diagramm) 
                	und springt unmittelbar in das Register Eigenschaften 
                	dieses Akteurs.
                </para>

                <tip>

                  <para>
                  	Diese Methode, einen neuen Akteur zu erzeugen, kann 
                  	irritierend sein. Es ist besser, einen Akteur im Diagramm 
                  	zu erzeugen.
                  </para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>
            
              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center" fileref="images/icons/reception.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Signaleingang</literal></term>
            
              <listitem>

                <indexterm><primary>Signaleingang hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Signaleingang</primary></indexterm>
                <indexterm><primary>Erzeuge  
                neuen</primary><secondary>Signaleingang</secondary></indexterm>

                <para>
                	Erzeugt innerhalb des Modelles einen neuen Signaleingang 
                	(aber nicht innerhalb des Diagrammes) und springt 
                	unmittelbar in das Register Eigenschaften dieses 
                	Signaleinganges.
                </para>

                <tip>

                  <para>
                  	Ein Signaleingang ist eine Deklaration, dass der Akteur ein 
                  	Signal verarbeitet. Die aktuelle Verarbeitung wird aber 
                  	mit einem Zustandsautomaten spezifiziert.
                  </para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Löschen</literal></term>

              <listitem>

                <para>Entfernt den markierten Akteur aus dem Modell.</para>

                <warning>

                  <para>
                  	Dies ist eine Löschung aus dem Modell, <emphasis>nicht
                  	</emphasis> aus dem Diagramm. Um einen Akteur aus einem 
                  	Diagramm zu entfernen, ihn aber im Modell zu erhalten, 
                  	verwenden Sie das Hauptmenü <literal>Aus Diagramm entfernen
                  	</literal> (oder drücken Sie die Taste Entf).
                  </para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.actor_property_fields">

          <title>Eigenschaftsfelder für einen Akteur</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Akteur Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>des 
                Akteurs</secondary></indexterm>
                <para>
                	Textfeld. Der Name des Akteurs. Das Diagramm zeigt diesen 
                	Namen unterhalb des Strichmännchens an. Da ein Akteur ein 
                	Classifier ist, entspräche es der Konvention den ersten 
                	Buchstaben als Großbuchstabe (und die ersten Buchstaben der 
                	zusammengesetzten Wörter) zu schreiben. Z.B. <literal>
                	RemoteSensor</literal>.
                </para>

                <note>

                  <para>
                  	ArgoUML erzwingt keine Namenskonventionen für Akteure.
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namensraum</literal></term>

              <listitem>

                <indexterm><primary>Akteur 
                Namensraum</primary></indexterm>
                <indexterm><primary>Namensraum</primary><secondary>des  
                Akteurs</secondary></indexterm>
                <para>
                	Textfeld mit Navigationsschaltfläche. Nimmt den Namensraum 
                	für einen Akteur auf. Dies ist die Pakethierarchie.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifizierer</literal></term>

              <listitem>

                <indexterm><primary>Akteur 
                Modifizierer</primary></indexterm>
                <indexterm><primary>Modifizierer</primary><secondary>des  
                Akteurs</secondary></indexterm>
                <para>
                	Markierfeld mit den Einträgen <literal>
                Abstract</literal>, <literal>Leaf</literal> und 
                <literal>Root</literal>.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Abstract</literal> wird verwendet, um zu 
                    	deklarieren, dass der Akteur nicht instanziiert werden 
                    	kann, aber immer spezialisiert werden muss.
                    </para>

                    <caution>

                      <para>
                      	Da Akteure spezialisiert und generalisiert werden können, 
                      	ist nicht klar, ob ein abstrakter Akteur eine Bedeutung 
                      	hat. Vielleicht könnte er dazu verwendet werden, dass 
                      	der Akteur mit einem Anwendungsfall nicht selbst 
                      	interagiert, aber es seine Kinder tun.
                      </para>

                    </caution>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>leaf</literal> gibt an, dass dieser Akteur 
                    	keine weiteren Kinder haben kann, während <literal>
                    	Root</literal> angibt, dass es sich um einen Akteur auf 
                    	oberster Ebene ohne Eltern handelt.
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalisierungen</literal></term>

              <listitem>

                <indexterm><primary>Akteur 
                Generalisierungen</primary></indexterm>
                <indexterm>
                <primary>Generalisierungen</primary><secondary>des  
                Akteur</secondary></indexterm>
                <para>
                	Textbereich. Listet jeden Akteur auf, der diesen Akteur 
                	<emphasis>generalisiert</emphasis>.
                </para>

                <para>
                	Ein Taste&nbsp;1-Doppelklick springt zur Generalisierung und 
                	öffnet dessen Register Eigenschaften.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Spezialisierungen</literal></term>

              <listitem>

                <indexterm><primary>Akteur 
                Spezialisierungen</primary></indexterm>
                <indexterm>
                <primary>Spezialisierungen</primary><secondary>des  
                Akteurs</secondary></indexterm>
                <para>
                	Textfeld. Listet jeden spezialisierten Akteur auf (z.B. für 
                	den dieser Akteur eine Generalisierung ist). Die 
                	spezialisierten Akteure können mit der gleichen 
                	Anwendungsfallinstanz kommunizieren, wie dieser Akteur. 
                </para>

                <para>
                	Ein Taste&nbsp;1-Doppelklick springt zur Generalisierung 
                	und öffnet dessen Register Eigenschaften.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Assoziationsenden</literal></term>

              <listitem>

                <indexterm><primary>Akteur Assoziationsenden
                </primary></indexterm>
                <indexterm><primary>Assoziationsenden
                </primary><secondary>des  
                Akteurs</secondary></indexterm>
                <para>
                	Textbereich. Listet jedes Assoziationsende der mit diesem 
                	Akteur verbundenen Assoziationen auf.
                </para>

                <para>
                	Ein Taste&nbsp;1-Doppelklick springt zu dem markierten 
                	Eintrag.
                </para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.use_case">

        <title>Anwendungsfall</title>

        <indexterm><primary>Anwendungsfall</primary></indexterm>
        <para>
        	Ein Anwendungsfall repräsentiert eine vollständig abgeschlossene 
        	Aktivitäts-<quote>Folge</quote> des Systems in Beziehung zu seinem 
        	externen Anwender (Akteure), Mensch oder Maschine. Er repräsentiert 
        	den primären Weg der Anforderungen, die für das zu konstruierende 
        	System erfasst wurden.
        </para>

        <para>
        	Innerhalb des UML-Metamodelles ist der Anwendungsfall eine Subklasse 
        	von <literal>classifier</literal>.
        </para>

        <para>
        	Das Symbol für einen Anwendungsfall ist ein Oval (siehe 
	        <xref linkend="fig.ref.use_case_diagram"/>). Es kann in zwei, 
	        Bereiche aufgeteilt sein, wobei der untere Bereich Erweiterungspunkte 
	        darstellt. 
	   </para>

        <caution>

          <para>
          	Standardmäßig zeigt ArgoUML den Erweiterungspunkt-Bereich nicht an. 
          	Er kann mit Hilfe des kontextsensitiven Menüs <literal>
          	Erweiterungspunkte anzeigen</literal> (Taste&nbsp;2-Klick verwenden),
          	oder über das Register Darstellung zur Anzeige gebracht werden.
          </para>

        </caution>

        <sect2>

          <title>Anwendungsfall Detail-Register</title>

          <indexterm><primary>Anwendungsfall Detail-Register 
          </primary></indexterm>
          <indexterm><primary>Detail-Register</primary><secondary>für  
          Anwendungsfälle</secondary></indexterm>
          <para>
          	Die folgenden Detail-Register sind für die Anwendungsfälle aktiv.
          </para>

          <variablelist>

            <varlistentry>

              <term><literal>Zu-Bearbeiten-Element</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaften</literal></term>

              <listitem>

                <para>Siehe 
                <xref linkend="s2.ref.use_case_property_toolbar"/> und 
                <xref linkend="s2.ref.use_case_property_fields"/> 
                unten.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Dokumentation</literal></term>

              <listitem>

                <para>
                Standard-Register. Siehe 
                <xref linkend="s2.ref.documentation_tab"/>.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Darstellung</literal></term>

              <listitem>

                <para>
                	Standard-Register. Die Füllfarbe wird für das Anwendungsfall-
                	Oval verwendet.
                </para>

                <para>
                	Das Markierfeld <literal>Anzeige: Erweiterungspunkte
                	</literal> steuert, ob der Erweiterungspunkt-Bereich 
                	dargestellt wird. 
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Quellcode</literal></term>

              <listitem>

                <para>
                	Standard-Register. Es wäre ungewöhnlich, wenn dieses Code 
                	für den Anwendungsfall enthielte, da der Anwendungsfall 
                	primär ein Vehikel für die Erfassung von Anforderungen über 
                	das zu entwickelnde System ist und keine Lösung erzeugt.
                </para>

              </listitem>

            </varlistentry>
            <varlistentry>

              <term><literal>Stereotyp</literal></term>

              <listitem>

                <para>Standard-Register.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Eigenschaftswerte</literal></term>

              <listitem>

                <para>
                	Standard-Register. Im UML-Metamodell sind für den 
                	<literal>Anwendungsfall</literal> folgende Eigenschaftswerte 
                	definiert.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    <literal>persistence</literal> (von der  
                    Superklasse <literal>Classifier</literal>). Der Wert  
                    <literal>transitory</literal>, gibt an, dass der angezeigte 
                    Zustand gelöscht wird, wenn die Instanz gelöscht oder 
                    <literal>persistent</literal> gespeichert wird, der 
                    markierte Zustand bleibt erhalten, wenn die Instanz gelöscht 
                    wird.
                    </para>

                    <tip>

                      <para>
                      	Im Allgemeinen ist die Instanziierung von 
                      	Anwendungsfällen nicht der Hauptaspekt einer 
                      	Designmethode (sie betreffen häufig die 
                      	Anforderungserfassung). In den meisten OOA&amp;D-
                      	Methoden kann diese Eigenschaft sicherlich ignoriert 
                      	werden.
                      </para>

                    </tip>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>semantics</literal> (von der  
           				Superklasse <literal>Classifier</literal>). Der Wert 
           				ist eine Spezifikation der Semantik des Anwendungsfalles.
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>derived</literal> (von der  
                    	Superklasse <literal>ModelElement</literal>). 
                    	Der Wert <literal>true</literal> bedeutet, dass der 
                    	Anwendungsfall redundant ist&mdash; er kann formal von 
                    	anderen Elementen abgeleitet werden, oder <literal>
                    	false</literal> bedeutet, dass er es nicht kann.
                    </para>

                    <note>

                      <para>
                      	Abgeleitete Anwendungsfälle haben ihren Wert in der 
                      	Analyse, um nützliche Namen oder Konzepte einzuführen.
                      </para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checkliste</literal></term>

              <listitem>

                <para>Standard-Register für einen Classifier.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.use_case_property_toolbar">

          <title>Anwendungsfall Eigenschaftssymbolleiste</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Nach oben</literal></term>

              <listitem>

                <para>
                	Geht in der Paketstruktur des Modelles einen Schritt  
                	nach oben.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/use_case.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Anwendungsfall</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Anwendungsfall</primary></indexterm>
                <indexterm><primary>Erzeuge neuen</primary><secondary>
                Anwendungsfall</secondary></indexterm>
                <para>
                	Erzeugt innerhalb des Modelles einen neuen Anwendungsfall 
                	(aber nicht innerhalb des Diagrammes) und zeigt 
                	unmittelbar das Register Eigenschaften dieses 
                	Anwendungsfalles. 
                </para>

                <tip>

                  <para>
                  	Diese Methode, einen Anwendungsfall zu erzeugen kann 
                  	irritierend sein. Es ist viel besser, einen neuen 
                  	Anwendungsfall im Diagramm Ihrer Wahl zu erzeugen.
                  </para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/extension_point.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Erweiterungspunkt</literal></term>

              <listitem>

                <indexterm><primary>Erweiterungspunkt  
                hinzufügen</primary></indexterm>
                <indexterm><primary>Neuer Erweiterungspunkt 
                </primary></indexterm>
                <indexterm><primary>Erzeuge neuen 
                </primary><secondary>Erweiterungspunkt 
                </secondary></indexterm>
                <para>
                	Erzeugt einen neuen Erweiterungspunkt innerhalb des 
                	Namensraumes des aktuellen Anwendungsfalles, mit dem 
                	aktuellen Anwendungsfall als seinen mit ihm verbundenen 
                	Anwendungsfall. Er springt sofort in das Register 
                	Eigenschaften dieses Erweiterungspunktes.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/attribute.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neues Attribut</literal></term>

              <listitem>
                <para>
                	Erzeugt innerhalb des aktuellen Anwendungsfalles ein neues 
                	Attribut und springt unmittelbar in das Register 
                	Eigenschaften dieses Attributes.
                </para>
              </listitem>
            </varlistentry>
            
            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/operation.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neue Operation</literal></term>

              <listitem>
                <para>
                	Erzeugt innerhalb des aktuellen Anwendungsfalles eine neue 
                	Operation und springt unmittelbar in das Register 
                	Eigenschaften dieser Operation.
                </para>
              </listitem>
            </varlistentry>
            
            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/reception.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Signaleingang</literal></term>

              <listitem>
                <para>
                	Erzeugt innerhalb des aktuellen Anwendungsfalles einen neuen 
                	Signaleingang und springt unmittelbar in das Register 
                	Eigenschaften dieses Signaleinganges.
                </para>
              </listitem>
            </varlistentry>
            
            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Neuer Stereotyp</literal></term>

              <listitem>
                <para>
                	Erzeugt innerhalb des aktuellen Anwendungsfalles einen neuen 
                	Stereotyp und springt unmittelbar in das Register 
                	Eigenschaften dieses Stereotyps.
                </para>
              </listitem>
            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Löschen</literal></term>

              <listitem>

                <para>
                	Entfernt den markierten Anwendungsfall aus dem Modell.
                </para>

                <warning>

                  <para>
                  	Dies ist eine Löschung aus dem Modell, <emphasis>nicht
                  	</emphasis> nur aus dem Diagramm. Um einen Anwendungsfall 
                  	aus einem Diagramm zu löschen, ihn aber im Modell zu erhalten, 
                  	verwenden Sie das Hauptmenü <literal>Aus Diagramm entfernen
                  	</literal> (oder drücken Sie die Taste Entf).
                  </para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.use_case_property_fields">

          <title>Eigenschaftsfelder für einen Anwendungsfall</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>des  
                Anwendungsfalles</secondary></indexterm>
                <para>
                	Textfeld. Der Name des Anwendungsfalles. Da ein 
                	Anwendungsfall ein Klassifizierer ist, entspräche es der 
                	Konvention den ersten Buchstaben als Großbuchstabe (und die 
                	ersten Buchstaben der zusammengesetzten Wörter) zu 
                	schreiben. Z.B. <literal>RemoteSensor</literal>. 
                	Der Name wird innerhalb der ovalen Darstellung des 
                	Anwendungsfalle im Diagramm angezeigt.
                </para>

                <note>

                  <para>
                  	ArgoUML erzwingt keine Namenskonventionen für 
                  	Anwendungsfälle.
                  </para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namensraum</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall  
                Namensraum</primary></indexterm>
                <indexterm><primary>Namensraum</primary><secondary>eines   
                Anwendungsfalles</secondary></indexterm>
                <para>
                	Textfeld mit Navigationsschaltfläche. Nimmt den Namensraum 
                	des Anwendungsfalles auf. Dies ist die Pakethierarchie.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifizierer</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall  
                Modifizierer</primary></indexterm>
                <indexterm><primary>Modifizierer</primary><secondary>eines  
                Anwendungsfalles</secondary></indexterm>
                <para>
                	Markierfeld mit den Einträgen <literal>
                	Abstract</literal> <literal>Leaf</literal> und <literal>
                	Root</literal>.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Abstract</literal> wird verwendet, um zu 
                    	deklarieren, dass der Anwendungsfall nicht instanziiert 
                    	werden kann, aber immer spezialisiert werden muss.
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>leaf</literal> gibt an, dass dieser 
                    	Anwendungsfall keine weiteren Kinder haben kann, während 
                    	<literal>Root</literal> angibt, dass es sich um einen 
                    	Anwendungsfall auf oberster Ebene ohne Eltern handelt.
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Abhängig von</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet die <quote>abhängigen</quote> Enden 
                	einer Beziehung auf, z.B. das Ende, das ein anderes Ende 
                	benutzt.
                </para>

                <para>
                	Ein Taste&nbsp;1-Doppelklick springt zur Abhängigkeit und 
                	öffnet dessen Register Eigenschaften.
                </para>
                <para>
                	Ein Taste&nbsp;2-Klick gibt ein Popup-Menü mit einem Eintrag 
                	<literal>...hinzufügen</literal> aus, das ein Dialogfenster 
                	öffnet, in dem Sie abhängige Modellelemente hinzufügen oder 
                	entfernen können.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Notwendig für</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet die <quote>notwendigen</quote> Enden 
                	der Beziehung auf, z.B. die Enden, die für das andere Ende 
                	notwendig sind.
                </para>

                <para>
                	Ein Taste&nbsp;1-Doppelklick springt zu der Abhängigkeit und 
                	öffnet dessen Register Eigenschaften.
                </para>
                <para>
                	Ein Taste&nbsp;2-Klick zeigt ein Popup-Menü mit einem Eintrag 
                	<literal>...hinzufügen</literal> an, das ein Dialogfenster 
                	öffnet, indem sie die notwendigen Modellelemente hinzufügen 
                	oder entfernen können.
                </para>
              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>
              <anchor id="ref.use_case_generalization"/>Generalisierungen</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall  
                Generalisierung</primary></indexterm>
                <indexterm>
                <primary>Generalisierung</primary><secondary>des  
                Anwendungsfalles</secondary></indexterm>
                <para>
                	Textbereich. Listet alle Anwendungsfälle auf, die 
                	Generalisierungen dieses Anwendungsfalles sind. Wird immer 
                	gesetzt, wenn eine Generalisierung von diesem Anwendungsfall 
                	erzeugt wurde. Ein Taste&nbsp;1-Doppelklick auf eine 
                	Generalisierung wird einen Sprung zu dieser Generalisierung 
                	auslösen.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Spezialisierungen</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall  
                Spezialisierung</primary></indexterm>
                <indexterm>
                <primary>Spezialisierungen</primary><secondary>von  
                Anwendungsfällen</secondary></indexterm>
                <para>
                	Textfeld. Listet jeden spezialisierten Anwendungsfall auf 
                	( z. B. für den dieser Anwendungsfall eine Generalisierung 
                	ist).
                </para>

                <para>
                	Ein Taste&nbsp;1-Doppelklick springt zur Spezialisierung und 
                	öffnet dessen Register Eigenschaften.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Erweitert</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall Erweitert- 
                Beziehung</primary></indexterm>
                <indexterm><primary>Erweitert- 
                Beziehung</primary><secondary>des  
                Anwendungsfalles</secondary></indexterm>
                <para>
                	Textfeld. Listet alle Klassen auf, die durch diesen 
                	Anwendungsfall erweitert werden.
                </para>

                <para>
                	Wo eine Erweitert-Beziehung erzeugt wurde, wird ein 
                	Taste&nbsp;1-Doppelklick zu dieser Beziehung springen.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Includes</literal></term>

              <listitem>

                <indexterm><primary>Anwendungsfall Include- 
                Beziehungen</primary></indexterm>
                <indexterm><primary>Include- 
                Beziehung</primary><secondary>eines Anwendungsfalles 
                </secondary></indexterm>
                <para>
                	Textfeld. Listet jeden Anwendungsfall auf, der diesen 
                	Anwendungsfall einschliesst.
                </para>

                <para>
                	Wo eine include-Beziehung erzeugt wurde, wird ein 
                	Taste&nbsp;1-Doppelklick zu dieser Beziehung springen.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Attribute</literal></term>

              <listitem>

                <para>
                	Textbereich. Listet alle für diesen Anwendungsfall 
                	definierten Attribute auf (siehe
                	<xref linkend="s1.ref.attribute"/>). Ein Taste&nbsp;1-
                	Doppelklick geht zu dem markierten Attribut. Ein Taste&nbsp;2-
                	Klick öffnet ein Popup-Menü mit zwei Einträgen, die ein 
                	Ändern der Attributreihenfolge erlauben.
                </para>

                <itemizedlist>

                  <listitem>

                    <para>
                    	<literal>Nach oben</literal>. Nur verfügbar, wenn zwei 
                    	oder mehr Attribute gelistet werden und sich das 
                    	markierte Attribut nicht ganz oben befindet. Es bewegt 
                    	das Attribut um einen Schritt nach oben. 
                    </para>

                  </listitem>

                  <listitem>

                    <para>
                    	<literal>Nach unten</literal>. Nur verfügbar, wenn zwei 
                    	oder mehr Attribute gelistet werden und sich das 
                    	markierte Attribut nicht ganz unten befindet. Es bewegt 
                    	das Attribut um einen Schritt nach unten. 
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Assoziationsenden</literal></term>

              <listitem>

                <para>Text box. Lists any association ends (see 
                <xref linkend="s1.ref.association_class"/>) of 
                associations connected to this use case.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Operations</literal></term>

              <listitem>

                <para>Text area. Lists all the operations (see 
                <xref linkend="s1.ref.operation"/>) defined on this 
                use case. Button&nbsp;1 click navigates to the selected 
                operation. Button&nbsp;2 gives a pop up menu with two 
                entries, which allow reordering the operations.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Move Up</literal>. Only available 
                    where there are two or more operations listed, and 
                    the operation selected is not at the top. It moves 
                    the operation up one position.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Down</literal>. Only available 
                    where there are two or more operations listed, and 
                    the operation selected is not at the bottom. It 
                    moves the operation down one position.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>


            <varlistentry>

              <term><literal>Extension Points</literal></term>

              <listitem>

                <indexterm><primary>Use Case Extension 
                Points</primary></indexterm>
                <indexterm><primary>Extension 
                Point</primary><secondary>of Use 
                Case</secondary></indexterm>
                <para>Text box. If this use case is, or can be 
                extended, this field lists the extension points for the 
                use case.</para>

                <note>

                  <para>Extension points are listed by their location 
                  point rather than their name.</para>

                </note>

                <para>Where an extension point has been created (see 
                below), button&nbsp;1 Double Click will navigate to that 
                relationship. Button&nbsp;2 gives a pop up menu with
                the following entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new extension 
                    point and navigate to it, making this use case the 
                    owning use case of the extension point.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Up</literal>. Only available 
                    where there are two or more extension points listed, and 
                    the extension point selected is not at the top. It moves 
                    the extension point up one position.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Down</literal>. Only available 
                    where there are two or more extension points listed, and 
                    the extension point selected is not at the bottom. It 
                    moves the extension point down one position.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.extension_point">

        <title>Extension Point</title>

        <indexterm><primary>Extension Point</primary></indexterm>
        <para>An extension point describes a point in a use case where 
        an extending use case may provide additional behavior.</para>

        <para>Examples for a travel agent sales system might be the use 
        case for paying for a ticket, which has an extension point in 
        the specification of the payment. Extending use cases may then 
        extend at this point to pay by cash, credit card etc.</para>

        <para>Within the UML metamodel, <literal>Extension 
        Point</literal> is a sub-class of <literal>
        ModelElement</literal>. A use case may display an extension 
        point compartment (see <xref linkend="s1.ref.use_case"/> for 
        details), in which extension points are shown with the 
        following syntax.</para>

        <blockquote>

          <para><emphasis>name</emphasis>
          <literal>:</literal><emphasis>location</emphasis>.</para>

        </blockquote>

        <sect2>

          <title>Extension Point Details Tabs</title>

          <indexterm><primary>Extension Point Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Extension Point</secondary></indexterm>
          <para>The details tabs that are active for extension points 
          are as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.extension_point_property_toolbar"/>
                 and 
                <xref linkend="s2.ref.extension_point_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab. </para>

                <para>Extensionpoints do not have 
                any stereotypes defined by default.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                ExtensionPoint</literal> has the following standard 
                tagged values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    extension point is redundant&mdash;it can be formally 
                    derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <note>

                      <para>It is not clear how derived extension 
                      points could have any value in analysis.</para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.extension_point_property_toolbar">

          <title>Extension Point Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up to the use case which owns this 
                extension point.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/extension_point.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Extension Point</literal></term>

              <listitem>

                <indexterm><primary>Add Extension 
                Point</primary></indexterm>
                <indexterm><primary>New Extension 
                Point</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Extension 
                Point</secondary></indexterm>
                <para>This creates a new Extension Point below the 
                selected extension point, navigating immediately to the 
                properties tab of the newly created extension 
                point.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                extension point, navigating immediately to the 
                properties tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected extension point from 
                the model.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.extension_point_property_fields">

          <title>Property Fields For Extension Point</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Extension Point 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Extension Point</secondary></indexterm>
                <para>Text box. The name of the extension point.</para>

                <tip>

                  <para>It is quite common to leave extension points 
                  unnamed in use case analysis, since they are always 
                  listed (within use cases and extend relationships) by 
                  their location.</para>

                </tip>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for extension points.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Location</literal></term>

              <listitem>

                <indexterm><primary>Extension Point 
                Location</primary></indexterm>
                <indexterm><primary>Location</primary><secondary>of 
                Extension Point</secondary></indexterm>
                <para>Text box. A description of the location of this 
                extension point within the owning use case.</para>

                <tip>

                  <para>Extension points are always listed (within use 
                  cases and extend relationships) by their location. 
                  Typically this will be the number/name of the 
                  paragraph in the specification.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Base Use Case</literal></term>

              <listitem>

                <indexterm><primary>Extension Point Base Use 
                Case</primary></indexterm>
                <indexterm><primary>Base Use 
                Case</primary><secondary>of Extension 
                Point</secondary></indexterm>
                <para>Text box. Shows the base use case within which 
                this extension point is defined. Button&nbsp;1 Double Click 
                will navigate to the use case.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Extend</literal></term>

              <listitem>

                <indexterm><primary>Extension Point Extending Use 
                Cases</primary></indexterm>
                <indexterm><primary>Extending Use 
                Cases</primary><secondary>of Extension 
                Point</secondary></indexterm>
                <para>Text box. Lists all use cases which extend the 
                base use case through this extension point.</para>

                <para>Where an extending use case exists, button&nbsp;1 
                double click will navigate to that relationship.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.association_use_case">

        <title>Association</title>

        <para>An association on a use case diagram represents a 
        relationship between an actor and a use case showing that 
        actor&apos;s involvement in the use case. The invocation of the 
        use case will involve some (significant) change perceived by 
        the actor.</para>

        <para>Associations are described fully under class diagrams 
        (see <xref linkend="s1.ref.association_class"/>).</para>

      </sect1>

      <sect1 id="s1.ref.association_end_use_case">

        <title>Association End</title>

        <para>Association ends are described under class diagrams (see 
        <xref linkend="s1.ref.association_end_class"/>).</para>

      </sect1>

      <sect1 id="s1.ref.dependency_use_case">

        <title>Dependency</title>

        <para>Dependencies are described under class diagrams (see 
        <xref linkend="s1.ref.dependency_class"/>).</para>

        <caution>

          <para>Dependency has little use in use case diagrams. It is 
          provided, because earlier versions of ArgoUML used it 
          (incorrectly) to implement include and extends 
          relationships.</para>

        </caution>

      </sect1>

      <sect1 id="s1.ref.generalization_use_case">

        <title>Generalization</title>

        <indexterm><primary>Generalization</primary></indexterm>
        <para>Generalization is a relationship between two use cases or 
        two actors. Where A is a generalization of B, it means A 
        describes more general behavior and B a more specific version 
        of that behavior.</para>

        <para>Examples for a travel agent sales system might be the use 
        case for making a booking as a generalization of the use case 
        for making a flight booking and a salesman actor being a 
        generalization of a supervisor actor (since supervisors can 
        also act as salesmen, but not vice versa).</para>

        <para>Generalization is analogous to class inheritance within 
        OO programming.</para>

        <note>

          <para>It is easy to confuse <emphasis>extends</emphasis> 
          relationships between use cases with generalization. However 
          extends is about augmenting a use case&apos;s behavior at a 
          specific point. Generalization is about specializing the 
          behavior throughout the use case.</para>

        </note>

        <para>Within the UML metamodel, <literal>
        Generalization</literal> is a sub-class of <literal>
        Relationship</literal>.</para>

        <para>Generalization is represented as an arrow with white 
        filled head from the specialized use case or actor to the 
        generalized use case or actor (see 
        <xref linkend="fig.ref.use_case_diagram"/>).</para>

        <sect2>

          <title>Generalization Details Tabs</title>

          <indexterm><primary>Generalization Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Generalization</secondary></indexterm>
          <para>The details tabs that are active for associations are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.generalization_property_toolbar"/>
                 and 
                <xref linkend="s2.ref.generalization_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

                <note>

                  <para>The values for the bounds of the generalization 
                  are downlighted, since they have no meaning, given 
                  that the generalization is tied to a particular 
                  couple of actors 
                  or use cases.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab. </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Generalization</literal> has the following standard 
                tagged values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    generalization is redundant&mdash;it can be formally 
                    derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <note>

                      <para>Derived generalizations still have their 
                      value in analysis to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.generalization_property_toolbar">

          <title>Generalization Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure of the 
                model. For a generalization this will be the package 
                containing the generalization.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                generalization, navigating immediately to the 
                properties tab for that generalization.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected generalization from the 
                model.</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a generalization from the diagram, but keep it within 
                  the model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.generalization_property_fields">

          <title>Property Fields For Generalization</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Generalization 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Generalization</secondary></indexterm>
                <para>Text box. The name of the generalization.</para>

                <tip>

                  <para>It is quite common to leave generalizations 
                  unnamed in use case analysis.</para>

                </tip>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for associations.</para>

                </note>

                <note>

                  <para>There is no representation of the name of a 
                  generalization on the diagram.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Discriminator</literal></term>

              <listitem>

                <indexterm><primary>Generalization 
                Discriminator</primary></indexterm>
                <indexterm>
                <primary>Discriminator</primary><secondary>of 
                Generalization</secondary></indexterm>
                <para>Text box. The name of a discriminator for the 
                specialization. UML&nbsp;1.4 allows grouping of 
                specializations into a number of sets, on the basis of 
                this value.</para>

                <tip>

                  <para>The empty string <quote /> is a valid entry 
                  (and the default) for this field. The discriminator 
                  is only of practical use in cases of multiple 
                  inheritance. A (class diagram) example is shown in 
                  <xref linkend="fig.discriminator_example"/>. Here 
                  each type of user should inherit from two sorts of 
                  user. One distinguishing between local or remote user 
                  (which can be identified by one discriminator) and 
                  one indicating their function as a user (identified 
                  by a different discriminator).</para>

                  <para>There is little point in using this within a 
                  use case diagram.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <indexterm><primary>Generalization 
                Namespace</primary></indexterm>
                <indexterm><primary>Namespace</primary><secondary>of 
                Generalization</secondary></indexterm>
                <para>Text box with navigation button. 
                Records the namespace for the 
                generalization. This is the package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Parent</literal></term>

              <listitem>

                <indexterm><primary>Generalization 
                Parent</primary></indexterm>
                <indexterm><primary>Parent</primary><secondary>of 
                Generalization</secondary></indexterm>
                <para>Text box. Shows the use case or actor that is the 
                <emphasis>parent</emphasis> in this relationship, i.e. 
                the more general end of the relationship. Button&nbsp;1 
                Double Click on this entry will navigate to that use 
                case or actor. </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Child</literal></term>

              <listitem>

                <indexterm><primary>Generalization 
                Child</primary></indexterm>
                <indexterm><primary>Child</primary><secondary>of 
                Generalization</secondary></indexterm>
                <para>Text box. Shows the use case or actor that is the 
                <emphasis>child</emphasis> in this relationship, i.e. 
                the more specific end of the relationship. Button&nbsp;1 
                Double Click on this entry will navigate to that use 
                case or actor. </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Powertype</literal></term>

              <listitem>

                <indexterm><primary>Generalization 
                Powertype</primary></indexterm>
                <indexterm><primary>Powertype</primary><secondary>of 
                Generalization</secondary></indexterm>
                <para>Drop down selector providing access to all 
                standard UML types provided by ArgoUML and all new 
                classes created within the current model.</para>

                <para>This is the type of the child entity of the 
                generalization.</para>

                <tip>

                  <para>This can be ignored for use case analysis. The 
                  only sensible value to put in would be the child use 
                  case type (as a classifier, this appears in the drop 
                  down list.</para>

                </tip>

              </listitem>

            </varlistentry>

          </variablelist>

          <figure id="fig.discriminator_example">

            <title>Example use of a discriminator with 
            generalization</title>

            <screenshot><mediaobject><imageobject>
            <imagedata align="center"
             fileref="images/reference/discriminator_example.gif"
             format="GIF"/></imageobject></mediaobject></screenshot>
          </figure>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.extend">

        <title>Extend</title>

        <indexterm><primary>Extend Relationship</primary></indexterm>
        <para>Extend is a relationship between two use cases. Where A 
        extends B, it means A describes some additional behavior 
        that is executed conditionally (under exceptional circumstances)
        at some point
        during the normal behavior of B.
        </para>

        <para>In some respects extend is like generalization. However 
        the key difference is that the extended use case defines 
        <emphasis>extension points</emphasis> (see 
        <xref linkend="s1.ref.extension_point"/>), which are the only 
        places where its behavior may be extended. The extending use 
        case must define at which of these extension points it adds 
        behavior.</para>

        <para>This makes the use of extend more tightly controlled than 
        general extension, and it is thus preferred wherever 
        possible.</para>

        <para>Examples for a travel agent sales system might be the use 
        case for paying for a ticket, which has an extension point in 
        the specification of the payment. Extending use cases may then 
        extend at this point to pay by cash, credit card etc.</para>

        <para>Within the UML metamodel, <literal>Extend</literal> is a 
        sub-class of <literal>Relationship</literal>.</para>

        <para>An extend relationship is represented as a dotted link 
        with an open arrow head and a label <literal>
        &laquo;extend&raquo;</literal>. If a condition is defined, it is shown 
        under the <literal>&laquo;extend&raquo;</literal> label (see 
        <xref linkend="fig.ref.use_case_diagram"/>).</para>

        <sect2>

          <title>Extend Details Tabs</title>

          <indexterm><primary>Extend Relationship Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Extend Relationship</secondary></indexterm>
          <para>The details tabs that are active for extend 
          relationships are as follows.</para>

          <note>

            <para>There is no source tab, since there is no source code 
            that could be generated for an extend relationship.</para>

          </note>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.extend_property_toolbar"/> and 
                <xref linkend="s2.ref.extend_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab</para>

                <note>

                  <para>The values for the bounds are downlighted, 
                  since the extend is tied to a particular pair of use 
                  cases.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab. </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Extend</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the extend 
                    relationship is redundant&mdash;it can be formally 
                    derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <note>

                      <para>Derived extend relationships could have 
                      their value in analysis to introduce useful names 
                      or concepts.</para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.extend_property_toolbar">

          <title>Extend Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure of the 
                model. For a extend this will be the package containing 
                the extend.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/extension_point.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New extension point</literal></term>

              <listitem>

                <indexterm><primary>Add Extend 
                Relationship</primary></indexterm>
                <indexterm><primary>New Extend 
                Relationship</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Extend 
                Relationship</secondary></indexterm>
                <para>This creates a new use case extension point 
                within the namespace of the current extend 
                relationship, with the current extend relationship as 
                its first extending relationship.</para>

                <tip>

                  <para>While it is perfectly valid to create extension 
                  points from an extend relationship, the created 
                  extension point will have no associated use case (it 
                  can subsequently be set up).</para>

                  <para>It would be more usual to instead create the 
                  extension point within a use case and subsequently 
                  link to it from an extend relationship (see 
                  <xref linkend="s2.ref.extend_property_fields"/> 
                  below).</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                extent relationship, navigating immediately to the 
                properties tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected extend relationship 
                from the model.</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a extend from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.extend_property_fields">

          <title>Property Fields For Extend</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Extend Relationship 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of Extend 
                Relationship</secondary></indexterm>
                <para>Text box. The name of the extend 
                relationship.</para>

                <tip>

                  <para>It is quite common to leave extends unnamed in 
                  use case analysis.</para>

                </tip>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for extend relationships.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <indexterm><primary>Extend Relationship 
                Namespace</primary></indexterm>
                <indexterm><primary>Namespace</primary><secondary>of 
                Extend Relationship</secondary></indexterm>
                <para>Text box. Records the namespace for the extend 
                relationship. This is the package hierarchy.</para>

                <para>Button&nbsp;1 Double Click on the entry will navigate 
                to the package defining this namespace (or the model 
                for the top level namespace).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Base Use Case</literal></term>

              <listitem>

                <indexterm><primary>Extend Relationship Base Use 
                Case</primary></indexterm>
                <indexterm><primary>Base Use 
                Case</primary><secondary>of Extend 
                Relationship</secondary></indexterm>
                <para>Text box. Shows the use case that is 
                being extended by this extend relationship. Button&nbsp;1 
                double
                click on this entry will navigate 
                to the base use case.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Extension</literal></term>

              <listitem>

                <indexterm><primary>Extend Relationship 
                Extension</primary></indexterm>
                <indexterm><primary>Extension</primary><secondary>of 
                Extend Relationship</secondary></indexterm>
                <para>Text box. Show the use case that is 
                doing the extending through this extend relationship. 
                Button&nbsp;1 double click on this entry 
                will navigate 
                to the extension use case.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Extension Points</literal></term>

              <listitem>

                <indexterm><primary>Extend Relationship Extension 
                Point</primary></indexterm>
                <indexterm><primary>Extension 
                Point</primary><secondary>of Extend 
                Relationship</secondary></indexterm>
                <para>Text box. Lists the extension points 
                of the base use case where the extension 
                will be applied if the condition holds.
                </para>

                <note>

                  <para>If the condition
                  is fulfilled, the sequence obeyed by the use-case instance 
                  is extended to include the sequence of the extending use case.
                  The different parts of the extending use case are inserted 
                  at the locations defined by the sequence of extension points 
                  in the relationship -- one part at each referenced 
                  extension point. 
                  Note that the condition is only evaluated once: 
                  at the first referenced extension point, 
                  and if it is fulfilled all of the extending use case 
                  is inserted in the original sequence.</para>
                  <para>Hence, the sequence of the extension points is 
                  irrelevant, except for the position of the first one; 
                  since that one determines 
                  where the condition is evaluated.
                  </para>

                </note>

                <para>Where an extension point has been created, 
                button&nbsp;1 double click will navigate to that 
                relationship. Button&nbsp;2 gives a pop up menu with
                the following
                entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Add</literal>. The <quote>Ad/Remove 
                    ExtensionPoints</quote> window opens. In this 
                    window it is possible to build a list of extension 
                    points.</para>

                  </listitem>

                  <listitem>

                    <para><literal>New</literal>. Add a new extension 
                    point in the list and navigate to it. The current 
                    extend relationship is added as the first in list 
                    of extending relationships of the new extension 
                    point.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Up</literal>. Only available 
                    where there are two or more extension points listed, and 
                    the extension point selected is not at the top. It moves 
                    the extension point up one position.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Down</literal>. Only available 
                    where there are two or more extension points listed, and 
                    the extension point selected is not at the bottom. It 
                    moves the extension point down one position.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Condition</literal></term>

              <listitem>

                <para>Text area. Multi-line textual description of any 
                condition attached to the extend relationship.</para>
                <para>The text entered here is shown on the diagram.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.include">

        <title>Include</title>

        <indexterm><primary>Include Relationship</primary></indexterm>
        <para>Include is a relationship between two use cases. Where A 
        includes B, it means B described behavior that is to be 
        included in the description of the behavior of A at some point 
        (defined internally by A).</para>

        <para>Examples for a travel agent sales system might be the use 
        case for booking travel, which includes use cases for booking 
        flights and taking payment.</para>

        <para>Within the UML metamodel, <literal>Include</literal> is a 
        sub-class of <literal>Relationship</literal>.</para>

        <para>An include relationship is represented as a dotted link 
        with an open arrow head and a label <literal>
        &laquo;include&raquo;</literal> (see 
        <xref linkend="fig.ref.use_case_diagram"/>).</para>

        <sect2>

          <title>Include Details Tabs</title>

          <indexterm><primary>Include Relationship Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Include Relationship</secondary></indexterm>
          <para>The details tabs that are active for include 
          relationships are as follows.</para>

          <note>

            <para>There is no source tab, since there is no source code 
            that could be generated for an include relationship.</para>

          </note>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.include_property_toolbar"/> and 
                <xref linkend="s2.ref.include_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab</para>

                <note>

                  <para>The values for the bounds of the include 
                  relationships are downlighted, since the include 
                  relationship is represented by a line between a 
                  particular pair of use cases.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Include</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the include 
                    relationship is redundant&mdash;it can be formally 
                    derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <note>

                      <para>Derived include relationships could have 
                      their value in analysis to introduce useful names 
                      or concepts.</para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.include_property_toolbar">

          <title>Include Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure of the 
                model. For a include this will be the package 
                containing the include.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                include relationship, navigating immediately to the 
                properties tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected include relationship 
                from the model.</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a include from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.include_property_fields">

          <title>Property Fields For Include</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Include Relationship 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of Include 
                Relationship</secondary></indexterm>
                <para>Text box. The name of the include 
                relationship.</para>

                <tip>

                  <para>It is quite common to leave include 
                  relationships unnamed in use case analysis.</para>

                </tip>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for include relationships.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <indexterm><primary>Include Relationship 
                Namespace</primary></indexterm>
                <indexterm><primary>Namespace</primary><secondary>of 
                Include Relationship</secondary></indexterm>
                <para>Text box. Records the namespace for the include. 
                This is the package hierarchy.</para>

                <para>Button&nbsp;1 click on the entry will navigate to the 
                package defining this namespace (or the model for the 
                top level namespace).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Base Use Case</literal></term>

              <listitem>

                <indexterm><primary>Include Relationship 
                Base</primary></indexterm>
                <indexterm><primary>Base</primary><secondary>of Include 
                Relationship</secondary></indexterm>
                <para>Drop down selector. Records the use case that is 
                doing the including in this include relationship. 
                Button&nbsp;1 click on this entry will give a drop down menu 
                of all available use cases which may be selected by 
                button&nbsp;1 click.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Included Use Case</literal></term>

              <listitem>

                <indexterm><primary>Include Relationship Included Use 
                Case</primary></indexterm>
                <indexterm><primary>Included Use 
                Case</primary><secondary>of Include 
                Relationship</secondary></indexterm>
                <para>Drop down selector. Records the use case that is 
                being included by this include relationship. Button&nbsp;1 
                click on this entry will give a drop down menu of all 
                available use cases (and an empty entry) which may be 
                selected by button&nbsp;1 click.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entclass">

      <title>Class Diagram Model Element Reference</title>

      <indexterm><primary>Class Diagram</primary></indexterm>
      <indexterm><primary>Object Diagrams</primary></indexterm>
      <indexterm><primary>Package Diagrams</primary></indexterm>
      <sect1>

        <title>Introduction</title>

        <para>This chapter describes each model element that can be created 
        within a class diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

        <para>Class diagrams are used for only one of the UML static 
        structure diagrams, the class diagram itself. Object diagrams 
        are represented on the ArgoUML deployment diagram.</para>

        <para>In addition, ArgoUML uses the class diagram to show model 
        structure through the use of packages.</para>

        <para>There is a close relationship between this material and 
        the Properties Tab of the Details Pane (see 
        <xref linkend="s1.ref.proptab"/>). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

        <para><xref linkend="fig.ref.class_diagram"/> shows a class 
        diagram with all possible model elements displayed.</para>

        <figure id="fig.ref.class_diagram">

          <title>Possible model elements on a class diagram.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/class_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <para><xref linkend="fig.ref.package_diagram"/> shows a package 
        diagram with all possible model elements displayed.</para>

        <figure id="fig.ref.package_diagram">

          <title>Possible model elements on a package diagram.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/package_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <para><xref linkend="fig.ref.datatype_diagram"/> shows a 
        datatype 
        diagram with a datatype and an enumeration displayed.</para>

        <figure id="fig.ref.datatype_diagram">

          <title>Possible model elements on a datatype diagram.</title>
          <!-- See ClassDiagram-Datatypes.zargo -->

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/classdiagram-datatypes.png"
           format="PNG"/></imageobject></mediaobject></screenshot>
        </figure>

        <para><xref linkend="fig.ref.stereotype_diagram"/> shows a 
        stereotype definition
        diagram with all possible model elements displayed.</para>

        <figure id="fig.ref.stereotype_diagram">

          <title>Possible model elements on a 
          stereotype definition diagram.</title>
          <!-- See ClassDiagram-Datatypes.zargo -->

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/classdiagram-stereotype-definition.png"
           format="PNG"/></imageobject></mediaobject></screenshot>
        </figure>

        <sect2>

          <title>Limitations Concerning Class Diagrams in 
          ArgoUML</title>

          <para>Various limitations exist in V0.24 of ArgoUML 
          for stereotype definition diagrams. 
          E.g. the current implementation does not allow 
          stereotype compartments
          to be shown on stereotype definition diagrams.</para>

          <para>Another variant of the class diagram within the UML standard 
          is the <emphasis>object diagram</emphasis>. There is 
          currently no support for objects or links within ArgoUML 
          class diagrams. Instead the ArgoUML deployment diagram does 
          have both objects and links, and can be used to draw object 
          diagrams.</para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.package">

        <title>Package</title>

        <indexterm><primary>Package</primary></indexterm>
        <para>The package is the main organizational model element within 
        ArgoUML. In the UML metamodel it is a sub-class of both 
        <literal>Namespace</literal> and <literal>
        GeneralizableElement</literal>.</para>

        <note>

          <para>ArgoUML also implements the UML <literal>
          Model</literal> model element as a sub-class of package, but 
          <emphasis>not</emphasis> the <literal>Subsystem</literal> 
          model element.</para>

        </note>

        <para>ArgoUML also implements some less common aspects of UML 
        model management. In particular the relationship UML 1.4 
        defines as <literal>Generalization</literal> and the sub-class 
        dependency <literal>Permission</literal> for use between 
        packages.</para>

        <sect2>

          <title>Package Details Tabs</title>

          <indexterm><primary>Package Details Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Package</secondary></indexterm>
          <para>The details tabs that are active for packages are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.package_property_toolbar"/> and 
                <xref linkend="s2.ref.package_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The editable <literal>Bounds</literal> 
                field defines the bounding box for the package on the 
                diagram.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab. </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Package</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the package 
                    is redundant&mdash;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

                    <note>

                      <para>Derived packages still have their value in 
                      analysis to introduce useful names or concepts, 
                      and in design to avoid re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.package_property_toolbar">

          <title>Package Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/package.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Package</literal></term>

              <listitem>

                <para>This creates a new package within the package 
                (which appears on no diagram), navigating immediately 
                to the properties tab for that package.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/datatype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Datatype</literal></term>

              <listitem>

                <indexterm><primary>Add Datatype</primary></indexterm>
                <indexterm><primary>New Datatype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Datatype</secondary></indexterm>
                <para>This creates a new Datatype (see 
                <xref linkend="s1.ref.datatype"/>) for the selected 
                package, navigating immediately to the properties tab 
                for that datatype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/enumeration.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Enumeration</literal></term>

              <listitem>

                <indexterm><primary>Add Enumeration</primary></indexterm>
                <indexterm><primary>New Enumeration</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Enumeration</secondary></indexterm>
                <para>This creates a new Enumeration (see 
                <xref linkend="s1.ref.enumeration"/>) for the selected 
                package, navigating immediately to the properties tab 
                for that enumeration.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                package, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/tag_definition.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Tag Definition</literal></term>

              <listitem>

                <para>This creates a new tag definition (see 
                <xref linkend="s1.ref.tagdefinition"/>) within the 
                package 
                (which appears on no diagram), navigating immediately 
                to the properties tab for that tagdefinition.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete Package</literal></term>

              <listitem>

                <para>Deletes the package from the model.</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a package from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.package_property_fields">

          <title>Property Fields For Package</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Package Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Package</secondary></indexterm>
                <para>Text box. The name of the package. The name of a 
                package, like all packages, is by convention all lower 
                case, not containing any punctuation marks.</para>

                <note>

                  <para>By default a new package has no name defined. 
                  The package will appear with the name <literal>(Unnamed 
                  Package)</literal> in the explorer.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <indexterm><primary>Package 
                Namespace</primary></indexterm>
                <indexterm><primary>Namespace</primary><secondary>of 
                Package</secondary></indexterm>
                <para>Drop down selector. Records the namespace for the 
                package. This is the package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Visibility</literal></term>

              <listitem>

                <para>Radio box, with four entries <literal>
                public</literal>, <literal>private</literal>, 
                <literal>protected</literal>, and
                <literal>package</literal>. Indicates whether the 
                package is visible outside the package.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <indexterm><primary>Package 
                Modifiers</primary></indexterm>
                <indexterm><primary>Modifiers</primary><secondary>of 
                Package</secondary></indexterm>
                <para>Check box, with entries <literal>
                abstract</literal>, <literal>leaf</literal> and 
                <literal>root</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Abstract</literal> is used to 
                    declare that this package cannot be instantiated, 
                    but must always be specialized.</para>

                    <tip>

                      <para>The meaning of <literal>abstract</literal> 
                      applied to a package if not that clear. It might 
                      mean that the package contains interfaces or 
                      abstract classes without realizations. This is 
                      probably better handled through stereotyping of 
                      the package (for example <literal>
                      &laquo;facade&raquo;</literal>).</para>

                    </tip>

                  </listitem>

                  <listitem>

                    <para><literal>Leaf</literal> indicates that this 
                    package can have no further subpackages.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Root</literal> indicates that it is 
                    the top level package.</para>

                    <tip>

                      <para>Within ArgoUML <literal>Root</literal> only 
                      meaningfully applies to the Model, since all 
                      packages sit within the model. This could be used 
                      to emphasize that the Model is at the top 
                      level.</para>

                    </tip>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalizations</literal></term>

              <listitem>

                <indexterm><primary>Package 
                Generalizations</primary></indexterm>
                <indexterm>
                <primary>Generalizations</primary><secondary>of 
                Package</secondary></indexterm>
                <para>Text area. Lists any package that 
                <emphasis>generalizes</emphasis> this package.</para>

                <para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Specializations</literal></term>

              <listitem>

                <indexterm><primary>Package 
                Specializations</primary></indexterm>
                <indexterm>
                <primary>Specializations</primary><secondary>of 
                Package</secondary></indexterm>
                <para>Text box. Lists any specialized package (i.e. for 
                which this package is a generalization.</para>

                <para>button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Owned Elements</literal></term>

              <listitem>

                <indexterm><primary>Package Owned 
                Elements</primary></indexterm>
                <indexterm><primary>Owned 
                Elements</primary><secondary>of 
                Package</secondary></indexterm>
                <para>Text area. A listing of all the packages, 
                classes, interfaces, datatypes, actors, use cases, 
                associations, generalizations, stereotypes, etc. within 
                the package.</para>

                <para>Button&nbsp;1 double click on any item listed here 
                navigates to that model element.</para>

              </listitem>

            </varlistentry>
            
            <varlistentry>
            
              <term><literal>Imported Elements</literal></term>
              
              <listitem>
                <indexterm><primary>Package Imported 
                Elements</primary></indexterm>
                <indexterm><primary>Imported 
                Elements</primary><secondary>of 
                Package</secondary></indexterm>
                <para>Text Area. A listing of all imported elements,
                i.e. elements that are owned by a different package, but 
                are explicitely made visible in this package.</para>
                
                <para>Button&nbsp;1 double click on any item listed here 
                navigates to that model element.
                Button&nbsp;2 gives a pop up menu with
                the following entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Add</literal>. The <quote>Add/Remove 
                    Imported Elements</quote> window opens. In this 
                    window it is possible to build a list of imported 
                    elements.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Remove</literal>.  
                    Removes the import.</para>

                  </listitem>

                </itemizedlist>

              </listitem>
              
            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.datatype_class">

        <title>Datatype</title>

        <para>Datatypes are not specific to packages or class diagrams, 
        and are discussed within the chapter on top level model elements 
        (see <xref linkend="s1.ref.datatype"/>).</para>

      </sect1>

      <sect1 id="s1.ref.enumeration_class">

        <title>Enumeration</title>

        <para>Enumeration are not specific to packages or class diagrams, 
        and are discussed within the chapter on top level model elements 
        (see <xref linkend="s1.ref.enumeration"/>).</para>

      </sect1>

      <sect1 id="s1.ref.stereotype_class">

        <title>Stereotype</title>

        <para>Stereotypes are not specific to packages or class 
        diagrams, and are discussed within the chapter on top level 
        model elements (see <xref linkend="s1.ref.stereotype"/>).</para>

      </sect1>

      <sect1 id="s1.ref.class_class">

        <title>Class</title>

        <indexterm><primary>Class</primary></indexterm>
        <para>The class is the dominant model element on a class diagram. In 
        the UML metamodel it is a sub-class of <literal>
        Classifier</literal> and <literal>
        GeneralizableElement</literal>.</para>

        <para>A class is represented on a class diagram as a rectangle 
        with three compartments. The top compartment 
        displays the class name (and stereotypes), the second 
        compartment any attributes and the third any operations. These 
        last two compartments may optionally be hidden.</para>

        <sect2>

          <title>Class Details Tabs</title>

          <indexterm><primary>Class Details Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Class</secondary></indexterm>
          <para>The details tabs that are active for classes are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.class_property_toolbar"/> and 
                <xref linkend="s2.ref.class_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The tick boxes, <literal>
                Attributes</literal> and <literal>Operations</literal> 
                allow the attributes and operations compartments to be 
                shown (the default) or hidden. This is a setting valid 
                for only the current diagram that shows the class. The 
                editable
                <literal>Bounds</literal> field defines the bounding 
                box for the package on the diagram.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. This contains a template for the 
                class declaration and declarations of associated 
                classes.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Constraints</literal></term>

              <listitem>

                <para>Standard tab. There are no standard constraints 
                defined for <literal>Class</literal> within the UML 
                metamodel.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotypes</literal></term>

              <listitem>

                <para>Standard tab. </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <indexterm><primary>Class Tagged 
                Values</primary></indexterm>
                <indexterm><primary>Tagged 
                Values</primary><secondary>of 
                Class</secondary></indexterm>
                <para>Standard tab. In the UML metamodel, <literal>
                Class</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Classifier</literal>). Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

                  </listitem>

                  <listitem>

                    <para><literal>semantics</literal> (from the 
                    superclass, <literal>Classifier</literal>). The 
                    value is a specification of the semantics of the 
                    class.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the class 
                    is redundant&mdash;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

                    <note>

                      <para>Derived classes still have their value in 
                      analysis to introduce useful names or concepts, 
                      and in design to avoid re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for a Classifier.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.class_property_toolbar">

          <title>Class Property Toolbar</title>

          <indexterm><primary>Class Property 
          Toolbar</primary></indexterm>
          <indexterm><primary>Property Toolbar</primary><secondary>for 
          Class</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/attribute.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New attribute</literal></term>

              <listitem>

                <para>This creates a new attribute (see 
                <xref linkend="s1.ref.attribute"/>) within the class, 
                navigating immediately to the properties tab for that 
                attribute.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/operation.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New operation</literal></term>

              <listitem>

                <para>This creates a new operation (see 
                <xref linkend="s1.ref.operation"/>) within the class, 
                navigating immediately to the properties tab for that 
                operation.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/reception.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New reception</literal></term>

              <listitem>

                <para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/inner_class.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New inner class</literal></term>

              <listitem>

                <para>This creates a new inner class (which appears on 
                no diagram) within the class. This belongs to the class 
                and is restricted to the namespace of the class. It 
                exactly models the Java concept of inner class. As an 
                inner class it needs no attributes or operations, since 
                it shares those of its owner.</para>

                <note>

                  <para>Inner class is not a separate concept in UML. 
                  This is a convenient shorthand for creating a class 
                  that is restricted to the namespace of its owning 
                  class.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center" fileref="images/icons/class.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New class</literal></term>

              <listitem>

                <para>This creates a new class (which appears on no 
                diagram) within the same namespace as the current 
                class.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                class, navigating immediately to the properties tab for 
                that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the class from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a class from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.class_property_fields">

          <title>Property Fields For Class</title>

          <indexterm><primary>Class Property 
          Fields</primary></indexterm>
          <indexterm><primary>Property Fields</primary><secondary>for 
          Class</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Class Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Class</secondary></indexterm>
                <para>Text box. The name of the class. The name of a 
                class has a leading capital letter, with words 
                separated by <quote>bumpy caps</quote>.</para>

                <note>

                  <para>The ArgoUML critics will complain about class 
                  names that do not have an initial capital.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector with navigation button. 
                Records and allows setting of 
                the namespace for the class. This is the package 
                hierarchy.</para>

                <para>Button&nbsp;1 click on the entry will move the class 
                to the selected namespace.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <indexterm><primary>Class 
                Modifiers</primary></indexterm>
                <indexterm><primary>Modifiers</primary><secondary>of 
                Class</secondary></indexterm>
                <para>Check box, with entries <literal>
                Abstract</literal>, <literal>Leaf</literal>, <literal>
                Root</literal>, and <literal>Active</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Abstract</literal> is used to 
                    declare that this class cannot be instantiated, but 
                    must always be subclassed. The name of an abstract 
                    class is displayed in italics on the diagram.</para>

                    <caution>

                      <para>If a class has any abstract operations, 
                      then it should be declared abstract. ArgoUML will 
                      not enforce this.</para>

                    </caution>

                  </listitem>

                  <listitem>

                    <para><literal>Leaf</literal> indicates that this 
                    class cannot be further subclassed, while <literal>
                    Root</literal> indicates it can have no superclass. 
                    It is possible for a class to be both Abstract and 
                    Leaf, since its static operations may still be 
                    referenced.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Active</literal> indicates that this 
                    class exhibits dynamic behavior (and is thus 
                    associated with a state or activity diagram).</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Visibility</literal></term>

              <listitem>

                <para>Radio box, with four entries <literal>
                public</literal>, <literal>private</literal>, 
                <literal>protected</literal>, and
                <literal>package</literal>. Indicates whether the 
                class is visible outside the namespace.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Client Dependencies</literal></term>

              <listitem>

                <para>Text area. Lists the <quote>depending</quote> 
                ends of the relationship, i.e. the end that makes use 
                of the other end.</para>

                <para>Button&nbsp;1 double click navigates to the dependency 
                and opens its property tab.</para>
                <para>Button&nbsp;2 click shows a pop-up menu with one entry
                <literal>Add...</literal> that
                opens a dialog box where you can add and remove 
                depending modelelements.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Supplier Dependencies</literal></term>

              <listitem>

                <para>Text area. Lists the <quote>supplying</quote> 
                ends of the relationship, i.e. the end supplying what 
                is needed by the other end.</para>

                <para>Button&nbsp;1 double click navigates to the dependency 
                and opens its property tab.</para>
                <para>Button&nbsp;2 click shows a pop-up menu with one entry
                <literal>Add...</literal> that
                opens a dialog box where you can add and remove 
                dependent modelelements.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalizations</literal></term>

              <listitem>

                <para>Text area. Lists any class that 
                <emphasis>generalizes</emphasis> this class.</para>

                <para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Specializations</literal></term>

              <listitem>

                <para>Text box. Lists any specialized class (i.e. for 
                which this class is a generalization).</para>

                <para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Attributes</literal></term>

              <listitem>

                <para>Text area. Lists all the attributes (see 
                <xref linkend="s1.ref.attribute"/>) defined for this 
                class. Button&nbsp;1 double click navigates to the selected 
                attribute. Button&nbsp;2 gives a pop up menu with two 
                entries, which allow reordering the attributes.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Move Up</literal>. Only available 
                    where there are two or more attributes listed, and 
                    the attribute selected is not at the top. It moves 
                    the attribute up one position.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Down</literal>. Only available 
                    where there are two or more attributes listed, and 
                    the attribute selected is not at the bottom. It 
                    moves the attribute down one position.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Association Ends</literal></term>

              <listitem>

                <para>Text box. Lists any association ends (see 
                <xref linkend="s1.ref.association_class"/>) of 
                associations connected to this class.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Operations</literal></term>

              <listitem>

                <para>Text area. Lists all the operations (see 
                <xref linkend="s1.ref.operation"/>) defined on this 
                class. Button&nbsp;1 click navigates to the selected 
                operation. Button&nbsp;2 gives a pop up menu with two 
                entries, which allow reordering the operations.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Move Up</literal>. Only available 
                    where there are two or more operations listed, and 
                    the operation selected is not at the top. It moves 
                    the operation up one position.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Down</literal>. Only available 
                    where there are two or more operations listed, and 
                    the operation selected is not at the bottom. It 
                    moves the operation down one position.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Owned Elements</literal></term>

              <listitem>

                <para>Text area. A listing of model elements contained 
                within the classes&apos; namespace. This is where any 
                inner class (see 
                <xref linkend="s2.ref.class_property_toolbar"/>) will 
                appear</para>

                <para>Button&nbsp;1 double click on any of the model elements 
                navigates to that model element.</para>

                <tip>

                  <para>Most namespace hierarchies should be managed 
                  through the package mechanism. Namespace hierarchies 
                  through classes are best restricted to inner classes. 
                  Conceivable datatypes, signals and interfaces could 
                  also appear here, but actors and use cases would seem 
                  of no value.</para>

                </tip>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.attribute">

        <title>Attribute</title>

        <indexterm><primary>Attribute</primary></indexterm>
        <para>Attribute is a named slot within a class (or other 
        <literal>Classifier</literal>) describing a range of values 
        that may be held by instances of the class. In the UML 
        metamodel it is a sub-class of <literal>
        StructuralFeature</literal> which is itself a sub-class of 
        <literal>Feature</literal>.</para>

        <para>An attribute is represented in the diagram on a single 
        line within the attribute compartment of the class. Its syntax 
        is as follows:</para>

        <blockquote>

          <para><emphasis>visibility</emphasis> 
          <emphasis>attributeName</emphasis> <literal>:</literal> 
          <emphasis>type</emphasis> [<literal>=</literal> 
          <emphasis>initialValue</emphasis>]</para>

        </blockquote>

        <para><emphasis>visibility</emphasis> is <literal>+</literal>, 
        <literal>#</literal>, <literal>-</literal> or 
        <literal>~</literal> corresponding to 
        <literal>public</literal>, <literal>protected</literal>, 
        <literal>private</literal>, or <literal>package</literal> 
        visibility respectively.</para>

        <para><emphasis>attributeName</emphasis> is the actual name of 
        the attribute being declared.</para>

        <para><emphasis>type</emphasis> is the type (UML datatype, 
        class or interface) declared for the attribute.</para>

        <para><emphasis>initialValue</emphasis> is any initial value to 
        be given to the attribute when an instance of the class is 
        created. This may be overridden by any constructor 
        operation.</para>

        <para>In addition any attribute declared static will have its 
        whole entry underlined on the diagram.</para>

        <sect2 id="s2.ref.attribute_details_tabs">

          <title>Attribute Details Tabs</title>

          <indexterm><primary>Attribute Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Attribute</secondary></indexterm>
          <para>The details tabs that are active for attributes are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.attribute_property_toolbar"/> and 
                <xref linkend="s2.ref.attribute_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Constraints</literal></term>

              <listitem>

                <para>Standard tab. There are no standard constraints 
                defined for <literal>Attribute</literal> within the UML 
                metamodel.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab. </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <indexterm><primary>Attribute Tagged 
                Values</primary></indexterm>
                <indexterm><primary>Tagged 
                Values</primary><secondary>of 
                Attribute</secondary></indexterm>
                <para>Standard tab. In the UML metamodel, <literal>
                Attribute</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>transient</literal>.</para>

                  </listitem>

                  <listitem>

                    <para><literal>volatile</literal>. This is an 
                    ArgoUML extension to the UML 1.4 standard to 
                    indicate that this attribute is realized in some 
                    volatile form (for example it will be a memory 
                    mapped control register).</para>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for a Attribute.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.attribute_property_toolbar">

          <title>Attribute Property Toolbar</title>

          <indexterm><primary>Attribute Property 
          Toolbar</primary></indexterm>
          <indexterm><primary>Property Toolbar</primary><secondary>for 
          Attribute</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up_previous.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go to Previous</literal></term>

              <listitem>

                <para>Navigate to the previous attribute 
                of the class that owns them. 
                This button is downlighted 
                if the current attribute is the first one.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up_next.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go to Next</literal></term>

              <listitem>

                <para>Navigate to the next attribute 
                of the class that owns them. 
                This button is downlighted 
                if the current attribute is the last one.</para>

              </listitem>

            </varlistentry>


            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/attribute.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New attribute</literal></term>

              <listitem>

                <para>This creates a new attribute within the owning 
                class of the current attribute, navigating immediately 
                to the properties tab for that attribute.</para>

                <tip>

                  <para>This is a very convenient way to add a number 
                  of attributes, one after the other, to a class.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/datatype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Datatype</literal></term>

              <listitem>

                <indexterm><primary>Add Datatype</primary></indexterm>
                <indexterm><primary>New Datatype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Datatype</secondary></indexterm>
                <para>This creates a new Datatype (see 
                <xref linkend="s1.ref.datatype"/>) for the selected 
                attribute, navigating immediately to the properties tab 
                for that datatype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/enumeration.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Enumeration</literal></term>

              <listitem>

                <indexterm><primary>Add Enumeration</primary></indexterm>
                <indexterm><primary>New Enumeration</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Enumeration</secondary></indexterm>
                <para>This creates a new Enumeration (see 
                <xref linkend="s1.ref.enumeration"/>) for the  
                package that owns the class,
                navigating immediately to the properties tab 
                for that enumeration.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                attribute, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the attribute from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. If desired 
                  the whole attribute compartment can be hidden on the 
                  diagram using the <emphasis>style</emphasis> tab (see 
                  <xref linkend="s2.ref.attribute_property_toolbar"/>) 
                  or the button&nbsp;2 pop up menu for the class on the 
                  diagram.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.attribute_property_fields">

          <title>Property Fields For Attribute</title>

          <indexterm><primary>Attribute Property 
          Fields</primary></indexterm>
          <indexterm><primary>Property Fields</primary><secondary>for 
          Attribute</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Attribute Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Attribute</secondary></indexterm>
                <para>Text box. The name of the attribute. The name of 
                a attribute has a leading lower case letter, with words 
                separated by <quote>bumpy caps</quote>.</para>

                <note>

                  <para>The ArgoUML critics will complain about 
                  attribute names that do not have an initial lower 
                  case letter.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Owner</literal></term>

              <listitem>

                <para>Text box. Records the class which contains this 
                attribute.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the class.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Multiplicity</literal></term>

              <listitem>

                <indexterm><primary>Attribute 
                Multiplicity</primary></indexterm>
                <indexterm><primary>Multiplicity</primary><secondary>of 
                Attribute</secondary></indexterm>
                <para>Editable drop down selector with checkmark. 
                The default value 
                (1) is that there is one instance of this attribute for 
                each instance of the class, i.e. it is a scalar. The 
                drop down provides a number of commonly used 
                specifications for non-scalar attributes.</para>
                <para>When the checkmark is unchecked, 
                then the multiplicity remains undefind in the model
                (and the drop down selector is downlighted).</para>

                <note>

                  <para>ArgoUML presents a number of predefined ranges 
                  for multiplicity for easy access. The user may also 
                  enter any user defined range that follows the UML 
                  syntax, such as <quote>1..3,7,10</quote>.</para>

                  <para>The value <literal>1..1</literal> is equivalent 
                  to the default (exactly one scalar instance). The 
                  selection <literal>0..1</literal> indicates an 
                  optional scalar attribute.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Visibility</literal></term>

              <listitem>

                <indexterm><primary>Attribute 
                Visibility</primary></indexterm>
                <indexterm><primary>Visibility</primary><secondary>of 
                Attribute</secondary></indexterm>
                <para>Radio box, with entries <literal>
                public</literal>, <literal>private</literal>, 
                <literal>protected</literal> and 
                <literal>package</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>public</literal>. The attribute is 
                    available to any model element that can see the owning 
                    class.</para>

                  </listitem>

                  <listitem>

                    <para><literal>private</literal>. The attribute is 
                    available only to the owning class (and any inner 
                    classes).</para>

                  </listitem>

                  <listitem>

                    <para><literal>protected</literal>. The attribute 
                    is available only to the owning class, or model elements 
                    that are subclasses of the owning class.</para>

                  </listitem>


                  <listitem>

                    <para><literal>package</literal>. The attribute 
                    is available only to model elements contained in the
                    same package.</para>

                  </listitem>
                  
                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Changeability</literal></term>

              <listitem>

                <indexterm><primary>Attribute 
                Changeability</primary></indexterm>
                <indexterm>
                <primary>Changeability</primary><secondary>of 
                Attribute</secondary></indexterm>
                <para>Radio box, with entries <literal>
                addOnly</literal>, <literal>changeable</literal>, and 
                <literal>frozen</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>addOnly</literal>. Meaningful only 
                    if the multiplicity is not fixed to a single value. 
                    Additional values may be added to the set of 
                    values, but once created a value may not be removed 
                    or altered.</para>

                  </listitem>

                  <listitem>

                    <para><literal>changeable</literal>. There are no 
                    restrictions of modification.</para>

                  </listitem>

                  <listitem>

                    <para><literal>frozen</literal>. Also named 
                    <quote>immutable</quote>. The value of the 
                    attribute may not change during the lifetime of the 
                    owner class. The value must be set at object 
                    creation, and may never change after that. This 
                    implies that there is usually an argument for this 
                    value in a constructor and that there is no 
                    operation that updates this value.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <para>Check box for <literal>static</literal>. If 
                unchecked (the defaults) then the attribute has 
                <quote>instance scope</quote>. If checked, then the 
                attribute is static, i.e. it has <quote>class 
                scope</quote>. Static attributes are indicated on the 
                diagram by underlining.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Type</literal></term>

              <listitem>

                <indexterm><primary>Attribute Type</primary></indexterm>
                <indexterm><primary>Type</primary><secondary>of 
                Attribute</secondary></indexterm>
                <para>Drop down selector with navigation button. 
                The type of this attribute. 
                This can be any UML <literal>Classifier</literal>, 
                although in practice only <literal>Class</literal>, 
                <literal>DataType</literal>, or <literal>
                Interface</literal> make any sense.</para>
                
                <para>Pressing the navigation button
                will navigate to the property panel for the 
                currently selected type. (see 
                <xref linkend="s1.ref.class_class"/>, 
                <xref linkend="s1.ref.datatype_class"/> and 
                <xref linkend="s1.ref.interface_class"/>).</para>

                <note>

                  <para>A type must be declared (it can be <literal>
                  void</literal>). By default ArgoUML supplies <literal>
                  int</literal> as the type.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Initial Value</literal></term>

              <listitem>

                <indexterm><primary>Attribute Initial 
                Value</primary></indexterm>
                <indexterm><primary>Initial 
                Value</primary><secondary>of 
                Attribute</secondary></indexterm>
                <para>Text box with 2 compartments. 
                This allows you to set 
                an initial value for the attribute if desired (this is 
                optional). The drop down menu provides access to the 
                common values <literal>0</literal>, <literal>
                1</literal>, <literal>2</literal>, and <literal>
                null</literal>.</para>
                
                <para>The left hand side of this field contains 
                the body of the expression that forms the initial value.
                The right hand side defines 
                the language in which the expression is written.</para>
                
                <para>Hovering the mouse pointer over these fields, 
                reveals a tooltip <literal>Body</literal> or 
                <literal>Language</literal>, 
                to help remember which is which.</para>

                <caution>

                  <para>Any constructor operation may ignore this 
                  initial value.</para>

                </caution>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.operation">

        <title>Operation</title>

        <indexterm><primary>Operation</primary></indexterm>
        <para>An operation is a service that can be requested from an 
        object to effect behavior. In the UML metamodel it is a 
        sub-class of <literal>BehavioralFeature</literal> which is 
        itself a sub-class of <literal>Feature</literal>.</para>

        <para>In the diagram, an operation is represented on a single 
        line within the operation compartment of the class. Its syntax 
        is as follows:</para>

        <blockquote>

          <para>visibility name (parameter list) : 
          return-type-expression {property-string}</para>

        </blockquote>

        <para>You can edit this line directly in the diagram, by 
        double-clicking on it. All elements are optional and, if left 
        unspecified, the old values will be preserved.</para>

        <para>A <emphasis>stereotype</emphasis> can be given between 
        any two elements in the line in the format: <literal>
        &lt;&lt;stereotype&gt;&gt;</literal>.</para>

        <para>The following properties are recognized to have special 
        meaning: abstract, concurrency, concurrent, guarded, leaf, 
        query, root and sequential.</para>

        <para>The <emphasis>visibility</emphasis> is <literal>
        +</literal>, <literal>#</literal>, <literal>-</literal> or
        <literal>~</literal> 
        corresponding to <literal>public</literal>, <literal>
        protected</literal>, <literal>private</literal> visibility,
        or <literal>package</literal> visibility 
        respectively.</para>

        <para><literal>static</literal> and <literal>final</literal> 
        optionally appear if the operation has those modifiers. Any 
        operation declared static will have its whole entry underlined 
        on the diagram.</para>

        <para>There may be zero or more entries in the 
        <emphasis>parameter list</emphasis> separated by commas. Every 
        entry is a pair of the form:</para>

        <blockquote>

          <para><emphasis>name</emphasis> <literal>:</literal> 
          <emphasis>type</emphasis></para>

        </blockquote>

        <para>The <emphasis>return-type-expression</emphasis> is the 
        type (UML datatype, class or interface) of the result 
        returned.</para>

        <para>Finally the whole entry is shown in italics if the 
        operation is declared abstract.</para>

        <sect2>

          <title>Operation Details Tabs</title>

          <indexterm><primary>Operation Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Operation</secondary></indexterm>
          <para>The details tabs that are active for operations are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.operation_property_toolbar"/> and 
                <xref linkend="s2.ref.operation_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The <literal>Bounds:</literal> 
                field does allow editing, but the changes have no 
                effect.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. This contains a declaration for the 
                operation.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Constraints</literal></term>

              <listitem>

                <para>Standard tab. There are no standard constraints 
                defined for <literal>Operation</literal> within the UML 
                metamodel.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <indexterm><primary>Operation Tagged 
                Values</primary></indexterm>
                <indexterm><primary>Tagged 
                Values</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Standard tab. In the UML metamodel, <literal>
                Operation</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>semantics</literal>. The value is a 
                    specification of the semantics of the 
                    operation.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    operation is redundant&mdash;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

                    <note>

                      <para>Derived operations still have their value 
                      in analysis to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for an Operation.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.operation_property_toolbar">

          <title>Operation Property Toolbar</title>

          <indexterm><primary>Operation Property 
          Toolbar</primary></indexterm>
          <indexterm><primary>Property Toolbar</primary><secondary>for 
          Operation</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/operation.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New operation</literal></term>

              <listitem>

                <para>This creates a new operation within the owning 
                class of the current operation, navigating immediately 
                to the properties tab for that operation.</para>

                <tip>

                  <para>This is a very convenient way to add a number 
                  of operations, one after the other, to a class.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/parameter.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New parameter</literal></term>

              <listitem>

                <para>This creates a new parameter for the operation, 
                navigating immediately to the properties tab for that 
                parameter.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/signal.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New raised signal</literal></term>

              <listitem>

                <para>This creates a new raised signal for the 
                operation, navigating immediately to the properties tab 
                for that raised signal.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/datatype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Datatype</literal></term>

              <listitem>

                <indexterm><primary>Add Datatype</primary></indexterm>
                <indexterm><primary>New Datatype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Datatype</secondary></indexterm>
                <para>This creates a new Datatype (see 
                <xref linkend="s1.ref.datatype"/>) in the namespace of 
                the owner of the operation, navigating immediately to 
                the properties tab for that datatype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                operation, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the operation from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. If desired 
                  the whole operation compartment can be hidden on the 
                  diagram using the <emphasis>presentation</emphasis> 
                  tab (see 
                  <xref linkend="s2.ref.operation_property_toolbar"/>) 
                  or the button&nbsp;2 pop up menu for the class on the 
                  diagram.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.operation_property_fields">

          <title>Property Fields For Operation</title>

          <indexterm><primary>Operation Property 
          Fields</primary></indexterm>
          <indexterm><primary>Property Fields</primary><secondary>for 
          Operation</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Operation Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Text box. The name of the operation. The name of 
                an operation has a leading lower case letter, with 
                words separated by <quote>bumpy caps</quote>.</para>

                <note>

                  <para>The ArgoUML critics will complain about 
                  operation names that do not have an initial lower 
                  case letter.</para>

                </note>

                <tip>

                  <para>If you wish to follow the Java convention of 
                  constructors having the same name as the class, you 
                  will violate this rule. Silence the critic by setting 
                  the stereotype <literal>create</literal> for the 
                  constructor operation.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Operation 
                Stereotype</primary></indexterm>
                <indexterm><primary>Stereotype</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Drop down selector. There are two UML standard 
                stereotypes for <literal>Operation</literal> (from the 
                parent metaclass, <literal>
                BehavioralFeature</literal>), <literal>create</literal> 
                and <literal>destroy</literal>.</para>

                <tip>

                  <para>You should use <literal>create</literal> as the 
                  stereotype for constructors, and <literal>
                  destroy</literal> for destructors (which are called 
                  <quote>finalize</quote> methods under Java).</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, clicking 
                button&nbsp;1 will navigate to the stereotype property panel 
                (see <xref linkend="s1.ref.stereotype_class"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Owner</literal></term>

              <listitem>

                <para>Text box. Records the class which contains this 
                operation.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the class.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Visibility</literal></term>

              <listitem>

                <indexterm><primary>Operation 
                Visibility</primary></indexterm>
                <indexterm><primary>Visibility</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Radio box, with entries <literal>
                public</literal>, <literal>private</literal>,  
                <literal>protected</literal> and
                <literal>package</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>public</literal>. The operation is 
                    available to any model element that can see the owning 
                    class.</para>

                  </listitem>

                  <listitem>

                    <para><literal>private</literal>. The operation is 
                    available only to the owning class (and any inner 
                    classes).</para>

                  </listitem>

                  <listitem>

                    <para><literal>protected</literal>. The operation 
                    is available only to the owning class, or model elements 
                    that are subclasses of the owning class.</para>

                  </listitem>
                  <listitem>

                    <para><literal>package</literal>. The operation 
                    is available only model elements contained in the 
                    same package.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <indexterm><primary>Operation 
                Modifiers</primary></indexterm>
                <indexterm><primary>Modifiers</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Check box, with entries <literal>
                abstract</literal>, <literal>leaf</literal>, <literal>
                root</literal>, <literal>query</literal>, and <literal>
                static</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>abstract</literal>. This operation 
                    has no implementation with this class. The 
                    implementation must be provided by a 
                    subclass.</para>

                    <important>

                      <para>Any class with an abstract operation must 
                      itself be declared abstract.</para>

                    </important>

                  </listitem>

                  <listitem>

                    <para><literal>leaf</literal>. The implementation 
                    of this operation must not be overridden by any 
                    subclass.</para>

                  </listitem>

                  <listitem>

                    <para><literal>root</literal>. The declaration of 
                    this operation must not override a declaration of 
                    the operation from a superclass.</para>

                  </listitem>

                  <listitem>

                    <para><literal>query</literal>. This indicates that 
                    the operation must have no side effects (i.e. it 
                    must not change the state of the system). It can 
                    only return a value.</para>

                    <caution>

                      <para>Operations for user defined datatypes must 
                      always check this modifier.</para>

                    </caution>

                  </listitem>

                  <listitem>

                    <para><literal>static</literal>. There is only one 
                    instance of this operation associated with the 
                    class (as opposed to one for each instance of the 
                    class). This is the <literal>OwnerScope</literal> 
                    attribute of a <literal>Feature</literal> metaclass 
                    within UML. Any operation declared static is shown 
                    underlined on the class diagram.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Concurrency</literal></term>

              <listitem>

                <indexterm><primary>Operation 
                Concurrency</primary></indexterm>
                <indexterm><primary>Concurrency</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Radio box, with entries <literal>
                guarded</literal>, <literal>sequential</literal>, and 
                <literal>concurrent</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>guarded</literal>. Multiple calls 
                    from concurrent threads may occur simultaneously to 
                    one instance (on any guarded operation), but only 
                    one is allowed to commence. The others are blocked 
                    until the performance of the first operation is 
                    complete.</para>

                    <caution>

                      <para>It is up to the system designer to ensure 
                      that deadlock cannot occur. It is the 
                      responsibility of the operation to implement the 
                      blocking behavior (as opposed to the 
                      system).</para>

                    </caution>

                  </listitem>

                  <listitem>

                    <para><literal>sequential</literal>. Only one call 
                    to an instance (of the class with the operation) 
                    may be outstanding at any one time. There is no 
                    protection, and no guarantee of behavior if the 
                    system violates this rule.</para>

                  </listitem>

                  <listitem>

                    <para><literal>concurrent</literal>. Multiple calls 
                    to one instance may execute at the same time. The 
                    operation is responsible for ensuring correct 
                    behavior. This must be managed even if there are 
                    other sequential or synchronized (guarded) 
                    operations executing at the time.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Parameter</literal></term>

              <listitem>

                <indexterm><primary>Operation 
                Parameter</primary></indexterm>
                <indexterm><primary>Parameter</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Text area, with entries for all the parameters of 
                the operation (see <xref linkend="s1.ref.parameter"/>). 
                A new operation is always created with one new 
                parameter, <literal>return</literal> to define the 
                return type of the operation.</para>

                <para>Button&nbsp;1 double click on any of the parameters 
                navigates to that parameter. Button&nbsp;2 click brings up a 
                pop up menu with two entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Move Up</literal>. Only available 
                    where there are two or more parameters, and the 
                    parameter selected is not at the top. It is moved 
                    up one position.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Move Down</literal>. Only available 
                    where there are two or more parameters listed, and 
                    the parameter selected is not at the bottom. It is 
                    moved down one position.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Raised Signals</literal></term>

              <listitem>

                <indexterm><primary>Operation Raised 
                Signals</primary></indexterm>
                <indexterm><primary>Raised 
                Signals</primary><secondary>of 
                Operation</secondary></indexterm>
                <para>Text area, with entries for all the signals (see 
                <xref linkend="s1.ref.signal"/>) that can be raised by 
                the operation.</para>

                <caution>

                  <para>ArgoUML at present (V0.18) has limited support 
                  for signals. In particular they are not linked to 
                  signal events that could drive state machines.</para>

                </caution>

                <para>Button&nbsp;1 double click on any of the signals 
                navigates to that parameter.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.parameter">

        <title>Parameter</title>

        <indexterm><primary>Parameter</primary></indexterm>
        <para>A parameter is a variable that can be passed. In the UML 
        metamodel it is a sub-class of <literal>
        ModelElement</literal>.</para>

        <para>A parameter is represented within the operation 
        declaration in the operation compartment of a class as 
        follows.</para>

        <blockquote>

          <para><emphasis>name</emphasis> <literal>:</literal> 
          <emphasis>type</emphasis></para>

        </blockquote>

        <para><emphasis>name</emphasis> is the name of the 
        parameter.</para>

        <para><emphasis>type</emphasis> is the type (UML datatype, 
        class or interface) of the parameter.</para>

        <para>The exception is any parameter representing a return 
        value, whose type only is shown at the end of the operation 
        declaration.</para>

        <sect2>

          <title>Parameter Details Tabs</title>

          <indexterm><primary>Parameter Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Parameter</secondary></indexterm>
          <para>The details tabs that are active for parameters are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.parameter_property_toolbar"/> and 
                <xref linkend="s2.ref.parameter_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. This contains a declaration for the 
                parameter.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <indexterm><primary>Parameter Tagged 
                Values</primary></indexterm>
                <indexterm><primary>Tagged 
                Values</primary><secondary>of 
                Parameter</secondary></indexterm>
                <para>Standard tab. In the UML metamodel, <literal>
                Parameter</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    parameter is redundant&mdash;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

                    <caution>

                      <para>A derived parameter is a meaningless 
                      concept.</para>

                    </caution>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.parameter_property_toolbar">

          <title>Parameter Property Toolbar</title>

          <indexterm><primary>Parameter Property 
          Toolbar</primary></indexterm>
          <indexterm><primary>Property Toolbar</primary><secondary>for 
          Parameter</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/parameter.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New parameter</literal></term>

              <listitem>

                <para>This creates a new parameter for the for the same 
                operation as the current parameter, navigating 
                immediately to the properties tab for that 
                parameter.</para>

                <tip>

                  <para>This is a convenient way to add a series of 
                  parameters for the same operation.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/datatype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Datatype</literal></term>

              <listitem>

                <indexterm><primary>Add Datatype</primary></indexterm>
                <indexterm><primary>New Datatype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Datatype</secondary></indexterm>
                <para>This creates a new Datatype (see 
                <xref linkend="s1.ref.datatype"/>) in the namespace of 
                the owner of the operation of the parameter, navigating 
                immediately to the properties tab for that 
                datatype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                parameter, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the parameter from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. If desired 
                  the whole operation compartment can be hidden on the 
                  diagram using the <emphasis>presentation</emphasis> 
                  tab or the button&nbsp;2 pop up menu for the class on the 
                  diagram.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.parameter_property_fields">

          <title>Property Fields For Parameter</title>

          <indexterm><primary>Parameter Property 
          Fields</primary></indexterm>
          <indexterm><primary>Property Fields</primary><secondary>for 
          Parameter</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Parameter Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Parameter</secondary></indexterm>
                <para>Text box. The name of the parameter. By 
                convention, the name of a parameter has a leading lower 
                case letter, with words separated by <quote>bumpy 
                caps</quote>.</para>

                <note>

                  <para>The ArgoUML critics do not complain about 
                  parameter names that do not have an initial lower 
                  case letter.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Parameter 
                Stereotype</primary></indexterm>
                <indexterm><primary>Stereotype</primary><secondary>of 
                Parameter</secondary></indexterm>
                <para>Drop down selector. There are no UML standard 
                stereotypes for <literal>Parameter</literal>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Owner</literal></term>

              <listitem>

                <para>Text box. Records the operation which contains 
                this parameter.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the operation.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Type</literal></term>

              <listitem>

                <indexterm><primary>Parameter Type</primary></indexterm>
                <indexterm><primary>Type</primary><secondary>of 
                Parameter</secondary></indexterm>
                <para>Drop down selector. The type of this parameter. 
                This can be any UML <literal>Classifier</literal>, 
                although in practice only <literal>Class</literal>, 
                <literal>DataType</literal>, or <literal>
                Interface</literal> make any sense.</para>

                <note>

                  <para>A type must be declared (it can be <literal>
                  void</literal>, but this only makes sense for a 
                  return parameter). By default ArgoUML supplies 
                  <literal>int</literal> as the type the first time a 
                  parameter is created, and thereafter the type of the 
                  most recently created parameter.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Default Value</literal></term>

              <listitem>

                <indexterm><primary>Parameter Initial 
                Value</primary></indexterm>
                <indexterm><primary>Initial 
                Value</primary><secondary>of 
                Parameter</secondary></indexterm>
                <indexterm><primary>Parameter Default 
                Value</primary></indexterm>
                <indexterm><primary>Default 
                Value</primary><secondary>of 
                Parameter</secondary></indexterm>
                <para>Text box with drop down. This allows you to set 
                an initial value for the parameter if desired (this is 
                optional). The drop down menu provides access to the 
                common values <literal>0</literal>, <literal>
                1</literal>, <literal>2</literal>, and <literal>
                null</literal>.</para>

                <caution>

                  <para>This only makes sense for <literal>
                  out</literal> or <literal>return</literal> 
                  parameters.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Kind</literal></term>

              <listitem>

                <indexterm><primary>Parameter Kind</primary></indexterm>
                <indexterm><primary>Kind</primary><secondary>of 
                Parameter</secondary></indexterm>
                <para>Radio box, with entries <literal>out</literal>, 
                <literal>in/out</literal>, <literal>return</literal>, 
                and <literal>in</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>out</literal>. The parameter is used 
                    only to pass values back from the operation.</para>

                  </listitem>

                  <listitem>

                    <para><literal>in/out</literal>. The parameter is 
                    used both to pass values in and to pass results 
                    back out of the operation.</para>

                    <note>

                      <para>This is the default for any new 
                      parameter.</para>

                    </note>

                  </listitem>

                  <listitem>

                    <para><literal>return</literal>. The parameter is a 
                    return result from the call.</para>

                    <note>

                      <para>There is nothing to stop you declaring more 
                      than one return parameter (some programming 
                      languages support this concept).</para>

                    </note>

                    <tip>

                      <para>The name of the return parameter does not 
                      appear on the diagram, but it is convenient to 
                      give it an appropriate name (such as the default 
                      <literal>return</literal> to identify it in the 
                      list of parameters on the operation property 
                      tab.</para>

                    </tip>

                  </listitem>

                  <listitem>

                    <para><literal>in</literal>. The parameter is used 
                    only to pass values in to the operation.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.signal">

        <title>Signal</title>

        <indexterm><primary>Signal</primary></indexterm>
        <para>A signal is a specification of an asynchronous stimulus 
        communicated between instances. In the UML metamodel it is a 
        sub-class of <literal>Classifier</literal>.</para>

        <para>Within ArgoUML signals are not fully handled. Their value 
        is when they are received as <emphasis>signal events</emphasis> 
        driving the asynchronous behavior of state machines and when 
        associated with <emphasis>send actions</emphasis> in state 
        machines and messages for collaboration diagrams.</para>

        <tip>

          <para>In general there is limited value at present in 
          defining signals within ArgoUML. It may prove more useful to 
          define signals as classes, with a (user defined) stereotype 
          of <literal>&laquo;signal&raquo;</literal> as suggested in the UML 1.4 
          standard. This allows any dependency relationships between 
          signals to be shown.</para>

        </tip>

        <sect2>

          <title>Signal Details Tabs</title>

          <indexterm><primary>Signal Details Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Signal</secondary></indexterm>
          <para>The details tabs that are active for signals are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.signal_property_toolbar"/> and 
                <xref linkend="s2.ref.signal_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. There is nothing generated for a 
                signal.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <indexterm><primary>Signal Tagged 
                Values</primary></indexterm>
                <indexterm><primary>Tagged 
                Values</primary><secondary>of 
                Signal</secondary></indexterm>
                <para>Standard tab. In the UML metamodel, <literal>
                Signal</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Classifier</literal>). Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

                  </listitem>

                  <listitem>

                    <para><literal>semantics</literal> (from the 
                    superclass, <literal>Classifier</literal>). The 
                    value is a specification of the semantics of the 
                    signal.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the signal 
                    is redundant&mdash;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

                    <note>

                      <para>Derived signals still have their value in 
                      analysis to introduce useful names or concepts, 
                      and in design to avoid re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.signal_property_toolbar">

          <title>Signal Property Toolbar</title>

          <indexterm><primary>Signal Property 
          Toolbar</primary></indexterm>
          <indexterm><primary>Property Toolbar</primary><secondary>for 
          Signal</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/signal.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New signal</literal></term>

              <listitem>

                <para>This creates a new signal, navigating immediately 
                to the properties tab for that signal.</para>

                <caution>

                  <para>The signal is not associated with the same 
                  operation as the original signal, so this will have 
                  to be done afterwards.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                signal, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the signal from the model</para>

                <warning>

                  <para>This is a deletion from the model.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.signal_property_fields">

          <title>Property Fields For Signal</title>

          <indexterm><primary>Signal Property 
          Fields</primary></indexterm>
          <indexterm><primary>Property Fields</primary><secondary>for 
          Signal</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Signal Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Signal</secondary></indexterm>
                <para>Text box. The name of the signal. From their 
                similarity to classes, by convention, the name of a 
                signal has a leading upper case letter, with words 
                separated by <quote>bumpy caps</quote>.</para>

                <note>

                  <para>The ArgoUML critics do not complain about 
                  signal names that do not have an initial upper case 
                  letter.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Signal 
                Stereotype</primary></indexterm>
                <indexterm><primary>Stereotype</primary><secondary>of 
                Signal</secondary></indexterm>
                <para>Drop down selector. Signal is provided by default 
                with the UML standard stereotypes for its parent in the 
                UML meta-model, <literal>Classifier</literal> (
                <literal>metaclass</literal>, <literal>
                powerType</literal>, <literal>process</literal>, 
                <literal>thread</literal>, and <literal>
                utility</literal>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Records and allows changing 
                the namespace for the signal. This is the package 
                hierarchy of the signal.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Contexts</literal></term>

              <listitem>

                <indexterm><primary>Signal 
                Contexts</primary></indexterm>
                <indexterm><primary>Contexts</primary><secondary>of 
                Signal</secondary></indexterm>
                <para>Text area. Lists all the contexts defined for 
                this signal. Button&nbsp;1 double click navigates to the 
                selected context, button&nbsp;2 click brings up a pop up 
                menu with one entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Add</literal>. Add a new context. 
                    This opens the <emphasis>Add/Remove 
                    Contexts</emphasis> dialog box (see figure below), 
                    which allows choosing between all possible 
                    operations, and adding them to the selected 
                    list.</para>

                    <figure id="fig.ref.signal_add_context">

                      <title>The <quote>add/remove context</quote> 
                      dialog box</title>

                      <screenshot><mediaobject><imageobject>
                      <imagedata align="center"
                       fileref="images/reference/signal_add_context.png"
                       format="PNG"/></imageobject></mediaobject></screenshot>
                    </figure>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.reception">

        <title>Reception (to be written)</title>

        <para>A reception is ...</para>

      </sect1>

      <sect1 id="s1.ref.association_class">

        <title>Association</title>

        <indexterm><primary>Association</primary></indexterm>
        <para>An association on a class diagram represents a 
        relationship between classes, or between a class and an 
        interface. On a usecase diagram, an association binds an actor 
        to a usecase.</para>

        <para>Within the UML metamodel, <literal>Association</literal> 
        is a sub-class of both <literal>Relationship</literal> and 
        <literal>GeneralizableElement</literal>.</para>

        <para>The association is represented as a solid line connecting 
        actor and usecase or class or interface (see 
        <xref linkend="fig.ref.class_diagram"/>). The name of the 
        association and any stereotype appear above the line.</para>

        <para>ArgoUML is not restricted to binary associations. See 
        <xref linkend="s2.ref.association_multiway"/> for more on 
        this.</para>

        <para>Associations are permitted between interfaces and 
        classes, but UML&nbsp;1.3 specifies they must only be navigable 
        toward the interface&mdash;in other words the interface cannot see 
        the class. ArgoUML will draw such associations with the 
        appropriate navigation.</para>

        <para>Associations are often not named, when their meaning is 
        obvious from the context.</para>

        <note>

          <para>ArgoUML provides no specific way of showing the 
          direction of the association as described in the UML 1.4 
          standard. The naming should attempt to make this clear.</para>

        </note>

        <para>The association contains at least two ends, which may be 
        navigated to via the association property sheet. See 
        <xref linkend="s1.ref.association_end_class"/> for more 
        information.</para>

        <sect2 id="s2.ref.association_multiway">

          <title>Three-way and Greater Associations and Association 
          Classes</title>

          <para>UML&nbsp;1.3 provides for N-ary associations and 
          associations that are governed by a third 
          <emphasis>associative class</emphasis>. Both are supported by 
          ArgoUML.</para>

          <para><emphasis>N-ary associations</emphasis> are created by 
          drawing with the association tool from an existing 
          association to a third class. The current implementation of 
          ArgoUML does not allow the inverse: drawing from a 3rd class 
          towards an existing association is not possible.</para>

          <para>Association Classes are drawn exactly like a normal 
          association, i.e. between two classes, but with a different 
          dedicated tool from the diagram toolbar.</para>

        </sect2>

        <sect2>

          <title>Association Details Tabs</title>

          <para>The details tabs that are active for associations are 
          as follows.</para>

          <indexterm><primary>Association Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Association</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.association_property_toolbar"/> 
                and <xref linkend="s2.ref.association_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

                <note>

                  <para>The values for the bounds of the Association 
                  have no meaning, since they are determined by the 
                  location of the connected items. Changing them has no 
                  effect on the diagram.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. You would not expect to generate 
                any code for an association, and any code entered here 
                is ignored (it will have disappeared when you come back 
                to the association.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <indexterm><primary>Association Tagged 
                Values</primary></indexterm>
                <indexterm><primary>Tagged 
                Values</primary><secondary>of 
                Association</secondary></indexterm>
                <para>Standard tab. In the UML metamodel, <literal>
                Association</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal>. Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    association is redundant&mdash;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

                    <note>

                      <para>Derived associations still have their value 
                      in analysis to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_property_toolbar">

          <title>Association Property Toolbar</title>

          <indexterm><primary>Association Property 
          Toolbar</primary></indexterm>
          <indexterm><primary>Property Toolbar</primary><secondary>for 
          Association</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure of the 
                model. For an association this will be the package 
                containing the association.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                association, navigating immediately to the properties 
                tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected association from the 
                model.</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an association from the diagram, but keep it within 
                  the model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_property_fields">

          <title>Property Fields For Association</title>

          <indexterm><primary>Association Property 
          Fields</primary></indexterm>
          <indexterm><primary>Property Fields</primary><secondary>for 
          Association</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Association 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Association</secondary></indexterm>
                <para>Text box. The name of the association. By 
                convention association names start with a lower case 
                letter, with <quote>bumpy caps</quote> used to indicate 
                words within the name, thus: <literal>
                salesHandling</literal>.</para>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for associations.</para>

                </note>

                <tip>

                  <para>Although the design critics will advise 
                  otherwise, it is perfectly normal not to name 
                  associations on a class diagram, since the 
                  relationship is often obvious from the classes (or 
                  class and interface) name.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Association 
                Stereotype</primary></indexterm>
                <indexterm><primary>Stereotype</primary><secondary>of 
                Association</secondary></indexterm>
                <para>Drop down selector. Association is provided by 
                default with the UML standard stereotype for 
                Association (<literal>implicit</literal>) .</para>

                <para>Stereotyping can be useful when creating 
                associations in the problem domain (requirements 
                capture) and solution domain (analysis), as well as for 
                processes based on patterns.</para>

                <para>The stereotype is shown between &laquo; and &raquo; below the 
                name of the association on the diagram.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Records and allows changing 
                the namespace for the association. This is the package 
                hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Connections</literal></term>

              <listitem>

                <indexterm><primary>Association 
                Ends</primary><secondary>of 
                Association</secondary></indexterm>
                <indexterm><primary>Connections</primary><secondary>of 
                Association</secondary></indexterm>
                <para>Text area. Lists the ends of this association. An 
                association can have two or more ends. For more on 
                association ends see 
                <xref linkend="s1.ref.association_end_class"/>.</para>

                <para>The names of the association ends are listed, 
                unless the association end has no name (the case when 
                it is first created), in which case <literal>(Unnamed 
                AssociationEnd)</literal> is shown.</para>

                <note>

                  <para>The only representation of association ends on 
                  a diagram is that their name appears at the relevant 
                  end of the corresponding association.</para>

                </note>

                <para>Button&nbsp;1 double click on an association end will 
                navigate to that end.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Association Roles</literal></term>

              <listitem>

                <para>Text area. (To be written)</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Links</literal></term>

              <listitem>

                <para>Text area. (To be written)</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.association_end_class">

        <title>Association End</title>

        <indexterm><primary>Association End</primary></indexterm>
        <para>Two or more association ends are associated with each 
        association (see <xref linkend="s1.ref.association_use_case"/>
        ).</para>

        <para>Within the UML metamodel, <literal>
        AssociationEnd</literal> is a sub-class of <literal>
        ModelElement</literal>.</para>

        <para>The association end has no direct access on any diagram 
        for binary associations. The ends of an N-ary association may 
        be selected by clicking on the line in the diagram. The 
        stereotype, name and multiplicity are shown at the relevant end 
        of the parent association (see 
        <xref linkend="fig.ref.use_case_diagram"/>). Where shared or 
        composite aggregation is selected for one association end, the 
        opposite end is shown as a solid diamond (composite 
        aggregation) or hollow diamond (shared aggregation).</para>

        <tip>

          <para>Although you can change attributes of association ends 
          when creating a use case model, this is often not necessary. 
          Many of the properties of an association end relate to its 
          use in class diagrams, and are of limited relevance to use 
          cases. The most useful attributes to consider altering are 
          the name (used as the role name) and the multiplicity.</para>

        </tip>

        <note>

          <para>ArgoUML does not currently support showing qualifiers 
          on the diagram, as described in the UML&nbsp;1.3 standard.</para>

        </note>

        <sect2>

          <title>Association End Details Tabs</title>

          <para>The details tabs that are active for associations are 
          as follows.</para>

          <indexterm><primary>Association End Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Association End</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.association_end_property_toolbar"/>
                 and 
                <xref linkend="s2.ref.association_end_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. This tab contains a declaration for 
                the association end as an instance of the model element to 
                which it is connected.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <indexterm><primary>Association End Tagged 
                Values</primary></indexterm>
                <indexterm><primary>Tagged 
                Values</primary><secondary>of Association 
                End</secondary></indexterm>
                <para>Standard tab. In the UML metamodel, <literal>
                AssociationEnd</literal> has the following standard 
                tagged values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    association end is redundant&mdash;it can be formally 
                    derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <tip>

                      <para>Derived association ends still have their 
                      value in analysis to introduce useful names or 
                      concepts, and in design to avoid re-computation. 
                      However the tag only makes sense for an 
                      association end if it is also applied to the 
                      parent association.</para>

                    </tip>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_end_property_toolbar">

          <title>Association End Property Toolbar</title>

          <indexterm><primary>Association End Property 
          Toolbar</primary></indexterm>
          <indexterm><primary>Property Toolbar</primary><secondary>for 
          Association End</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up to the association to which this end 
                belongs.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/association_end.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go Opposite</literal></term>

              <listitem>

                <para>This navigates to the other end of the 
                association.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/attribute.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Qualifier</literal></term>

              <listitem>

                <indexterm><primary>Add Qualifier</primary></indexterm>
                <indexterm><primary>New Qualifier</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Qualifier</secondary></indexterm>
                <para>This creates a new Qualifier for the selected 
                association-end, navigating immediately to the 
                properties tab for that qualifier.</para>

                <warning>

                  <para>Qualifiers are only partly supported in ArgoUML 
                  V0.18. Hence, activating this button creates a 
                  qualifier in the model, which is not shown on the 
                  diagram. Also, the properties panel for a qualifier 
                  equals that of a regular attribute.</para>

                </warning>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term>
              <guiicon>
              	<inlinemediaobject>
              		<imageobject>
              			<imagedata align="center"
              				fileref="images/icons/stereotype.gif" format="GIF" />
              		</imageobject>
              	</inlinemediaobject>
              </guiicon>
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                association-end, navigating immediately to the 
                properties tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected association-end from 
                the model.</para>

                <note>

                  <para>This button is downlighted for binary 
                  associations, since an association needs at least 
                  <emphasis>two</emphasis> ends. Only for N-ary 
                  associations, this button is accessable, and deletes 
                  just one end from the association.</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_end_property_fields">

          <title>Property Fields For Association End</title>

          <indexterm><primary>Association End Property 
          Fields</primary></indexterm>
          <indexterm><primary>Property Fields</primary><secondary>for 
          Association End</secondary></indexterm>
          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>Text box. The name of the association end, which 
                provides a <emphasis>role name</emphasis> for this end 
                of the association. This role name can be used for 
                navigation, and in an implementation context, provides 
                a name by which the source end of an association can 
                reference the target end.</para>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for association ends.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Stereotype</primary></indexterm>
                <indexterm><primary>Stereotype</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>Drop down selector. Association end is provided 
                by default with the UML standard stereotypes for 
                AssociationEnd (<literal>association</literal>, 
                <literal>global</literal>, <literal>local</literal>, 
                <literal>parameter</literal>, <literal>
                self</literal>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Association</literal></term>

              <listitem>

                <para>Text box. Records the parent association for this 
                association end. Button&nbsp;1 double click on this entry 
                will navigate to that association.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Type</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Type</primary></indexterm>
                <indexterm><primary>Type</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>Drop down selector providing access to all 
                standard UML types provided by ArgoUML and all new 
                classes created within the current model.</para>

                <para>This is the type of the entity attached to this 
                end of the association.</para>

                <tip>

                  <para>By default ArgoUML will select the class of the 
                  model element to which the linkend is connected. However, 
                  an association can be moved to another class by 
                  selecting another entry here.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Multiplicity</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Multiplicity</primary></indexterm>
                <indexterm><primary>Multiplicity</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>Drop down menu with edit box. The value can be 
                chosen from the drop down box, or a new one can be 
                edited in the text box. Records the multiplicity of 
                this association end (with respect to the other end), 
                i.e. how many instances of this end may be associated 
                with an instance of the other end. The multiplicity is 
                shown on the diagram at that end of the 
                association.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Modifiers</primary></indexterm>
                <indexterm><primary>Modifiers</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>There are 3 modifiers: <literal>
                navigable</literal>, <literal>ordered</literal> and 
                <literal>static</literal>. All 3 are checkboxes.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>navigable</literal>. Indicates that 
                    this end can be navigated to from the other 
                    end.</para>

                    <note>

                      <para>The UML 1.4 standard provides a number of 
                      options for how navigation is displayed on an 
                      association end. ArgoUML uses option 3, which 
                      means that arrow heads are shown at the end of an 
                      association, when navigation is enabled at only 
                      one end, to indicate the direction in which 
                      navigation is possible. This means that the 
                      default, with both ends navigable has no 
                      arrows.</para>

                    </note>

                  </listitem>

                  <listitem>

                    <para><literal>ordered</literal> When placed on one 
                    end, specifies whether the set of links from the 
                    other instance to this instance is ordered. The 
                    ordering must be determined and maintained by 
                    Operations that add links. It represents additional 
                    information not inherent in the objects or links 
                    themselves. Possibilities for the checkbox are: 
                    Unchecked - The links form a set with no inherent 
                    ordering. Checked - A set of ordered links can be 
                    scanned in order.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Static</literal> (To be 
                    written)</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Specification</literal></term>

              <listitem>

                <para>List. Designates zero or more Classifiers that 
                specify the Operations that may be applied to an 
                Instance accessed by the AssociationEnd across the 
                Association. These determine the minimum interface that 
                must be realized by the actual Classifier attached to 
                the end to support the intent of the Association. May 
                be an Interface or another Classifier. The type of 
                classifier is indicated by an icon.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                classifier, button&nbsp;2 click brings a pop up menu with 
                one entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Add</literal>. Add a new 
                    specification classifier. This opens the 
                    <emphasis>Add/Remove Specifications</emphasis> 
                    dialog box (see figure below), which allows 
                    choosing between all possible classifiers, and 
                    adding or removing them to the selected list.</para>

                    <figure id="fig.ref.signal_add_specification">

                      <title>The <quote>Add/Remove 
                      Specifications</quote> dialog box</title>

                      <screenshot><mediaobject><imageobject>
                      <imagedata align="center"
                       fileref="images/reference/signal_add_specification.png"
                       format="PNG"/></imageobject></mediaobject></screenshot>
                    </figure>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Qualifiers</literal></term>

              <listitem>

                <para>Text box. Records the qualifiers for this 
                association end. Button&nbsp;1 double click on this entry 
                will navigate to that qualifier. Button&nbsp;2 click will 
                show a popup menu containing two items: <literal>Move 
                Up</literal> and <literal>Move Down</literal>, which 
                allow reordering the qualifiers.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Aggregation</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Aggregation</primary></indexterm>
                <indexterm><primary>Aggregation</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>Radio box, with three entries <literal>
                composite</literal>, <literal>none</literal> and 
                <literal>aggregate</literal>. Indicates whether the 
                relationship with the far end represents some type of 
                loose whole-part relationship (
                <literal>aggregation</literal>) or tight whole-part 
                relationship (<literal>composite</literal>).</para>

                <para>Shared aggregation is shown by a hollow diamond 
                at the <quote>whole</quote> end of the association. 
                Composite aggregation is shown by a solid 
                diamond.</para>

                <note>

                  <para>You may not have aggregation at both ends of an 
                  association. ArgoUML does not enforce this 
                  constraint.</para>

                  <para>The <quote>whole</quote> end of a composite 
                  aggregation should have a multiplicity of one. 
                  ArgoUML does not enforce this constraint.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Changeability</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Changeability</primary></indexterm>
                <indexterm>
                <primary>Changeability</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>Radio box, with three entries <literal>add 
                only</literal>, <literal>changeable</literal> and 
                <literal>frozen</literal>. Indicates whether instances 
                of this end of the association-end may be: i) created 
                but not deleted after the target instance is created; 
                ii) created and deleted by the source after the target 
                instance is created; or iii) not created or deleted by 
                the source after the target instance is created.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Visibility</literal></term>

              <listitem>

                <indexterm><primary>Association End 
                Visibility</primary></indexterm>
                <indexterm><primary>Visibility</primary><secondary>of 
                Association End</secondary></indexterm>
                <para>Radio box, with four entries <literal>
                public</literal>, <literal>private</literal>,  
                <literal>protected</literal>, and 
                <literal>package</literal>. Indicates whether 
                navigation to this end may be by: i) any classifier; 
                ii) only by the source classifier; or iii) only the 
                source classifier and its children.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.dependency_class">

        <title>Dependency</title>

        <indexterm><primary>Dependency</primary></indexterm>
        <para>Dependency is a relationship between two model elements 
        showing that one depends on the other.</para>

        <para>Within the UML metamodel, <literal>Dependency</literal> 
        is a sub-class of <literal>Relationship</literal>.</para>

        <para>Dependency is represented as a dashed line with an open 
        arrow head from the depending model element to that which it is 
        dependent upon.</para>

        <sect2>

          <title>Dependency Details Tabs</title>

          <indexterm><primary>Dependency Details 
          Tabs</primary></indexterm>
          <indexterm><primary>Details Tabs</primary><secondary>for 
          Dependency</secondary></indexterm>
          <para>The details tabs that are active for dependencies are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.dependency_property_toolbar"/> 
                and <xref linkend="s2.ref.dependency_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab</para>

                <note>

                  <para>The values for the bounds of the dependency are 
                  downlighted, given the dependency is tied to a 
                  particular modelelement.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Dependency</literal> has no tagged values of its own, 
                but through superclasses has the following standard 
                tagged values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    dependency relationship is redundant&mdash;it can be 
                    formally derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <note>

                      <para>Derived dependencies still have their value 
                      in analysis to introduce useful names or 
                      concepts.</para>

                    </note>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.dependency_property_toolbar">

          <title>Dependency Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure of the 
                model. For a dependency this will be the package 
                containing the dependency.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                dependency, navigating immediately to the properties 
                tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected dependency from the 
                model.</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a dependency from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.dependency_property_fields">

          <title>Property Fields For Dependency</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <indexterm><primary>Dependency 
                Name</primary></indexterm>
                <indexterm><primary>Name</primary><secondary>of 
                Dependency</secondary></indexterm>
                <para>Text box. The name of the dependency.</para>

                <tip>

                  <para>It is quite common to leave dependencies 
                  unnamed.</para>

                </tip>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for associations.</para>

                </note>

                <note>

                  <para>There is no representation of the name of a 
                  dependency on the diagram.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Dependency 
                Stereotype</primary></indexterm>
                <indexterm><primary>Stereotype</primary><secondary>of 
                Dependency</secondary></indexterm>
                <para>Drop down selector. Dependency has no standard 
                stereotypes of its own under UML&nbsp;1.3. and so ArgoUML 
                does not provide any. The stereotype is shown between  &laquo;
                and &raquo; above or across the generalization.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <indexterm><primary>Dependency 
                Namespace</primary></indexterm>
                <indexterm><primary>Namespace</primary><secondary>of 
                Dependency</secondary></indexterm>
                <para>Text box. Records the namespace for the 
                dependency. This is the package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Suppliers</literal></term>

              <listitem>

                <indexterm><primary>Dependency 
                Suppliers</primary></indexterm>
                <indexterm><primary>Suppliers</primary><secondary>of 
                Dependency</secondary></indexterm>
                <para>Text area. Lists the end of the relationship that 
                is supplying what is needed by the other end.</para>

                <para>Button&nbsp;1 double click on a supplier will navigate 
                to that element.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Clients</literal></term>

              <listitem>

                <indexterm><primary>Dependency 
                Clients</primary></indexterm>
                <indexterm><primary>Clients</primary><secondary>of 
                Dependency</secondary></indexterm>
                <para>Text area. Lists the <quote>depending</quote> 
                ends of the relationship, i.e. the end that makes use 
                of the other end.</para>

                <para>Button&nbsp;1 double click on a client will navigate 
                to that element.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.generalization_class">

        <title>Generalization</title>

        <para>Generalization is described under use case diagrams (see 
        <xref linkend="s1.ref.generalization_use_case"/>).</para>

        <note>

          <para>Within the context of classes, generalization and 
          specialization are the UML terms describing class 
          inheritance.</para>

        </note>

      </sect1>

      <sect1 id="s1.ref.interface_class">

        <title>Interface</title>

        <para>An interface is a set of operations characterizing the 
        behavior of an element. It can be usefully thought of as an 
        abstract class with no attributes and no non-abstract 
        operations. In the UML metamodel it is a sub-class of <literal>
        Classifier</literal> and through that <literal>
        GeneralizableElement</literal>.</para>

        <para>An interface is represented on a class diagram as a 
        rectangle with two horizontal compartments. The top compartment 
        displays the interface name (and above it <literal>
        &laquo;interface&raquo;</literal>) and the second any operations. Just like 
        a class, the operations compartment can be hidden.</para>

        <sect2>

          <title>Interface Details Tabs</title>

          <para>The details tabs that are active for interfaces are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.interface_property_toolbar"/> and 
                <xref linkend="s2.ref.interface_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The tick box <literal>Display 
                Operations</literal> allows the operation compartment 
                to be shown (the default) or hidden. This is a setting 
                valid for only the current diagram. The <literal>
                Bounds:</literal> field defines the bounding box for 
                the package on the diagram.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. This contains a template for the 
                interface declaration and declarations of associated 
                interfaces.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Interface</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Classifier</literal>). Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

                    <warning>

                      <para>Since interfaces are by definition 
                      abstract, they can have no instance, and so this 
                      tagged value must refer to the properties of the 
                      realizing class.</para>

                    </warning>

                  </listitem>

                  <listitem>

                    <para><literal>semantics</literal> (from the 
                    superclass, <literal>Classifier</literal>). The 
                    value is a specification of the semantics of the 
                    interface.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    interface is redundant&mdash;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

                    <note>

                      <para>Derived interfaces still have their value 
                      in analysis to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for an Interface.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.interface_property_toolbar">

          <title>Interface Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/operation.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New operation</literal></term>

              <listitem>

                <para>This creates a new operation (see 
                <xref linkend="s1.ref.operation"/>) within the 
                interface, navigating immediately to the properties tab 
                for that operation.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/reception.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New reception</literal></term>

              <listitem>

                <para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/interface.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New interface</literal></term>

              <listitem>

                <para>This creates a new interface in the same 
                namespace as the selected interface, navigating 
                immediately to the properties tab for the new 
                interface.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                interface, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the interface from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an interface from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.interface_property_fields">

          <title>Property Fields For Interface</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the interface. The name of 
                an interface has a leading capital letter, with words 
                separated by <quote>bumpy caps</quote>.</para>

                <note>

                  <para>Unlike classes, the ArgoUML critics will not 
                  complain about interface names that do not have an 
                  initial capital.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Interface is provided by 
                default with the UML standard stereotypes for the 
                parent meta-class, <literal>Classifier</literal> (
                <literal>metaclass</literal>, <literal>
                powertype</literal>, <literal>process</literal>, 
                <literal>thread</literal> and <literal>
                utility</literal>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Records and allows changing 
                the namespace for the interface. This is the package 
                hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <para>Check box, with entries <literal>
                Abstract</literal>, <literal>Leaf</literal> and 
                <literal>Root</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Abstract</literal> is used to 
                    declare that this interface cannot be instantiated, 
                    but must always be specialized. The name of an 
                    abstract interface is displayed in italics on the 
                    diagram.</para>

                    <caution>

                      <para>This is meaningless, since by definition an 
                      interface is an abstract entity. The UML&nbsp;1.3 
                      standard offers no clarification.</para>

                    </caution>

                  </listitem>

                  <listitem>

                    <para><literal>Leaf</literal> indicates that this 
                    interface cannot be further specialized, while 
                    <literal>Root</literal> indicates it can have no 
                    generalizations.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Visibility</literal></term>

              <listitem>

                <para>Radio box, with three entries <literal>
                public</literal>, <literal>protected</literal>, 
                <literal>private</literal> and
                <literal>package</literal>. Indicates whether 
                navigation to this end may be by: i) any classifier; 
                ii) only the source classifier and its children; or 
                iii) only by the source classifier.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalizations</literal></term>

              <listitem>

                <para>Text area. Lists any interface that 
                <emphasis>generalizes</emphasis> this interface.</para>

                <para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Specializations</literal></term>

              <listitem>

                <para>Text box. Lists any specialized interface (i.e. 
                for which this interface is a generalization.</para>

                <para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>AssociationEnds</literal></term>

              <listitem>

                <para>Text box. Lists any AssociationEnds (see 
                <xref linkend="s1.ref.association_end_class"/>) 
                connected to this interface.</para>

                <note>

                  <para>Associations between classes and interfaces 
                  <emphasis>must</emphasis> be navigable 
                  <emphasis>only</emphasis> from the class to the 
                  interface. ArgoUML will create associations between 
                  classes and interfaces with the correct navigability, 
                  but does not prevent the user from altering 
                  this.</para>

                </note>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Operations</literal></term>

              <listitem>

                <para>Text area. Lists all the operations (see 
                <xref linkend="s1.ref.operation"/>) defined on this 
                interface. Button&nbsp;1 double click navigates to the 
                selected operation. Button&nbsp;2 click will show a popup 
                menu with two items: <literal>Move Up</literal> and 
                <literal>Move Down</literal>, which allow reordering 
                the operations.</para>

                <caution>

                  <para>All operations on an interface 
                  <emphasis>must</emphasis> be public. The ArgoUML 
                  critics will complain if this is not the case.</para>

                </caution>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.abstraction">

        <title>Abstraction</title>

        <para>An abstraction is a dependency relationship joining two 
        model elements within the model at different levels of abstraction. 
        Within ArgoUML it is principally used through its specific 
        stereotype <literal>realize</literal> to define realization 
        dependencies, which link model elements that 
        <emphasis>specify</emphasis> behavior to the corresponding 
        model elements that <emphasis>implement</emphasis> the 
        behavior.</para>

        <para>In the UML metamodel <literal>Abstraction</literal> is a 
        sub-class of <literal>Dependency</literal> and through that 
        <literal>Relationship</literal>.</para>

        <para>An abstraction with stereotype <literal>realize</literal> 
        is represented on a class diagram as a dotted line with a solid 
        white head at the specifying end.</para>

        <caution>

          <para>All other stereotypes of abstraction should be 
          represented using an open arrow head, but this is not 
          supported by ArgoUML.</para>

        </caution>

        <sect2>

          <title>Abstraction Details Tabs</title>

          <para>The details tabs that are active for abstractions are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.abstraction_property_toolbar"/> 
                and <xref linkend="s2.ref.abstraction_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab. See 
                <xref linkend="s2.ref.documentation_tab"/>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

                <note>

                  <para>The values for the bounds of the abstraction 
                  are downlighted, since the association is tied to 
                  particular model elements.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. This contains the single 
                downlighted text <literal>N/A</literal>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Abstraction</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    abstraction is redundant&mdash;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

                    <note>

                      <para>Derived abstractions still have their value 
                      in analysis to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.abstraction_property_toolbar">

          <title>Abstraction Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the abstraction from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an abstraction from the diagram, but keep it within 
                  the model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.abstraction_property_fields">

          <title>Property Fields For Abstraction</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the abstraction. There are 
                no constraints on the name of an abstraction, which is 
                not shown on any diagram.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Abstraction is provided by 
                default with the UML standard stereotypes <literal>
                derive</literal>, <literal>realize</literal>, <literal>
                refine</literal> and <literal>trace</literal>.</para>

                <caution>

                  <para>ArgoUML automatically selects the stereotype 
                  realize when an abstraction is created. The user is 
                  free to change the stereotype to use the abstraction 
                  to indicate for example a <literal>trace</literal> 
                  relationship. However ArgoUML will not alter the 
                  representation on the diagram accordingly.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Records and allows changing 
                the namespace for the abstraction. This is the package 
                hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Suppliers</literal></term>

              <listitem>

                <para>Text area. Lists the model element that is the 
                supplier end of this abstraction (for a realization 
                this is the end providing the implementation).</para>

                <note>

                  <para>Although this is a text area there is no 
                  mechanism for adding more than one supplier.</para>

                </note>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Clients</literal></term>

              <listitem>

                <para>Text area. Lists the model element that is the client 
                end of this abstraction (for a realization this is the 
                end providing the specification).</para>

                <note>

                  <para>Although this is a text area there is no 
                  mechanism for adding more than one client.</para>

                </note>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entseq">

      <title>Sequence Diagram Model Element Reference</title>

      <sect1>

        <title>Introduction</title>

        <para>This chapter describes each model element that can be created 
        within a sequence diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

        <para>There is a close relationship between this material and 
        the <literal>Properties</literal> tab of the details pane (see 
        <xref linkend="s1.ref.proptab"/>). That section covers 
        properties in general, in this chapter they are linked to 
        specific model elements.</para>

        <caution>

          <para>Sequence diagrams are not fully developed yet in 
          ArgoUML. Many aspects are not fully implemented, or may not 
          behave as expected.</para>

        </caution>

        <para><xref linkend="fig.ref.sequence_diagram"/> shows a 
        sequence diagram with all possible model elements displayed.</para>

        <figure id="fig.ref.sequence_diagram">

          <title>Possible model elements on a sequence diagram.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/sequence_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <sect2>

          <title>Limitations Concerning Sequence Diagrams in 
          ArgoUML</title>

          <para>The sequence diagram is still rather under-developed in 
          ArgoUML.</para>

          <para>The biggest difficulties are with the actions behind 
          the stimuli. These are purely textual in implementation, and 
          there is no way to link them back to their associated 
          operations or signals.</para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.object_sequence">

        <title>Object</title>

        <para>An object is an instance of a class. In the UML metamodel 
        <literal>Object</literal> is a sub-class of <literal>
        Instance</literal>. Within a sequence diagram objects may be 
        used to represent a specific instance of a class. Unlike 
        collaboration diagrams (see <xref linkend="ch.ref.entcollab"/>
        ), sequence diagrams cannot show generic behavior between 
        classifier roles.</para>

        <para>An object is represented on a sequence diagram in ArgoUML 
        as a plain box labeled with the object name (if any) and class 
        name, separated by a colon (:). As links with stimuli to and 
        from other objects are added, a time line grows down from the 
        object. This is thin where the object does not have control and 
        thick where it does.</para>

        <caution>

          <para>The current release of ArgoUML shows interactions 
          between objects, although the UML standard for sequence 
          diagrams is for interaction between instances of any 
          classifier).</para>

          <para>However the actual implementation in ArgoUML permits 
          any classifier to be used with the object, and so the diagram 
          can successfully represent instances of actors for example as 
          well as classes.</para>

        </caution>

        <sect2>

          <title>Object Details Tabs</title>

          <para>The details tabs that are active for objects are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.object_property_toolbar"/> and 
                <xref linkend="s2.ref.object_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                object notionally define the bounding box of the object 
                and its time line. However if you change them it will 
                have no effect, and the original values will be reset 
                when you next revisit the tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, but with no contents.</para>

                <caution>

                  <para>An object should not generate any code, so 
                  having this tab active is probably a mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Object</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Instance</literal>. Showing 
                    the permanence of the state information associated 
                    with the object. Values <literal>
                    transitory</literal> (state is destroyed when the 
                    object is destroyed) and <literal>
                    persistent</literal> (state is preserved when the 
                    object is destroyed).</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the object 
                    is redundant&mdash;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

                    <note>

                      <para>Derived objects still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for a Classifier.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.object_property_toolbar">

          <title>Object Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                object, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the object from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an object from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.object_property_fields">

          <title>Property Fields For Object</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the object. By convention 
                object names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Object has no stereotypes by 
                default in the UML standard.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype_class"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Text box. Records the namespace for the object. 
                This is the package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stimuli Sent</literal></term>

              <listitem>

                <para>Text area. Lists the stimuli sent to this 
                object.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stimuli Received</literal></term>

              <listitem>

                <para>Text area. Lists the stimuli received by this 
                object.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Classifier</literal></term>

              <listitem>

                <para>Drop down selector. The name of the classifier of 
                which this is an object.</para>

                <caution>

                  <para>In the current release of ArgoUML the drop down 
                  selector will include <emphasis>all</emphasis> 
                  classifiers (i.e. interfaces, actors, use cases and 
                  datatypes as well), which is what is wanted on the 
                  diagram, although it should properly be called an 
                  instance, rather than an object. In practice only 
                  instances of classes and actors make much 
                  sense.</para>

                </caution>

                <note>

                  <para>In the current release of ArgoUML the same 
                  graphical presentation is used, even if the object is 
                  actually representing an instance of an actor (when a 
                  stick-man would be more usual).</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.stimulus">

        <title>Stimulus</title>

        <para>A stimulus is a communication between two instances and 
        is generated by an action. On a sequence diagram a stimulus is 
        associated with a link&mdash;an instance of an association linking 
        two object instances. In the UML metamodel <literal>
        Stimulus</literal> is a sub-class of <literal>
        ModelElement</literal>.</para>

        <para>The link (see <xref linkend="s1.ref.link_sequence"/>) 
        associated with a stimulus is represented on a sequence diagram 
        in ArgoUML as an arrow between the time lines of the object 
        instances (or the object head in the case of stimulus create, 
        described below) labeled with the name of the action (if any), 
        and the action, separated by a colon (:). The type of line and 
        arrowhead depends on the type of action that generated the 
        stimulus:</para>

        <itemizedlist>

          <listitem>

            <para><literal>Stimulus Call</literal>. Generated by a call 
            action, itself the result of an operation of a class. Shown 
            as a solid line with a solid arrowhead to the time line of 
            the object instance receiving the stimulus.</para>

          </listitem>

          <listitem>

            <para><literal>Stimulus Create</literal>. Generated by a 
            create action for the class for which an instance is to be 
            created Shown as a solid line with a solid arrowhead to the 
            object head of the object instance being created.</para>

          </listitem>

          <listitem>

            <para><literal>Stimulus Destroy</literal>. Generated by a 
            destroy action of the originating object. Shown as a solid 
            line with an open arrowhead terminating in a diagonal cross 
            at the end of the time line of the receiving (destroyed) 
            object instance.</para>

          </listitem>

          <listitem>

            <para><literal>Stimulus Send</literal>. Generated by a send 
            action, the result of a signal raised by an operation of 
            the sending object instance and handled by the receiving 
            object instance. Shown as a solid line with half an open 
            arrowhead.</para>

          </listitem>

          <listitem>

            <para><literal>Stimulus Return</literal>. Generated by an 
            object instance that has received an earlier call stimulus 
            and is returning a result to the calling object instance. 
            Shown as a dotted line with an open arrowhead.</para>

          </listitem>

        </itemizedlist>

        <note>

          <para>ArgoUML does not allow you to create stimuli directly, 
          but instead provides tools to create stimuli of each of the 
          five types above.</para>

        </note>

        <caution>

          <para>In the current release of ArgoUML there is no way to 
          show a terminate action where an object instance destroys 
          itself. One way is to draw a destroy action that loops back 
          to the object itself, give it an action with no name and use 
          the style tab to set an invisible line, but this still leaves 
          the arrow head showing, which is unsightly. It is also 
          semantically incorrect anyway to use a destroy action to 
          represent a terminate action.</para>

        </caution>

        <sect2>

          <title>Stimulus Details Tabs</title>

          <para>The details tabs that are active for stimuli are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.stimulus_property_toolbar"/> and 
                <xref linkend="s2.ref.stimulus_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Style</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                stimulus notionally define the bounding box of the 
                stimulus and its time line. However if you change them 
                it will have no effect, and the original values will be 
                reset when you next revisit the tab.</para>

                <para>Altering the <literal>Fill</literal> and <literal>
                Shadow</literal> entries has no effect. Rather 
                bizarrely you can set the <literal>Line</literal> entry 
                and it will draw a line around the signal, which is not 
                a standard UML representation.</para>

                <tip>

                  <para>To change the color of the line, you should 
                  select the associated link (click on it a little way 
                  from the stimulus) and use its style tab (see 
                  <xref linkend="s1.ref.link_sequence"/>).</para>

                </tip>

                <caution>

                  <para>In the current release of ArgoUML changing the 
                  values of the <literal>Bounds</literal> field is 
                  possible, but will make only a temporary change to 
                  the position of the stimulus. Selecting any model element 
                  on the screen causes the stimulus to return to its 
                  original position and the original values to be 
                  restored.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, but with no contents.</para>

                <caution>

                  <para>A stimulus should not generate any code, so 
                  having this tab active is probably a mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Constraints</literal></term>

              <listitem>

                <para>Standard tab. ArgoUML only supports constraints 
                on Classes and Features (Attributes, Operations, 
                Receptions, and Methods), so this tab is grayed 
                out.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Stimulus</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    stimulus is redundant&mdash;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

                    <note>

                      <para>Derived stimuli still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.stimulus_property_toolbar">

          <title>Stimulus Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the stimulus from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an stimulus from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.stimulus_property_fields">

          <title>Property Fields For Stimulus</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. There is no convention for naming 
                stimuli, and it is quite normal to leave them unnamed. 
                The action is sufficient identification.</para>

                <tip>

                  <para>It is sometimes useful to give simple names to 
                  stimuli, so they can be referred to in attached notes 
                  giving timing constraints.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Action</literal></term>

              <listitem>

                <para>Text box. This is used to identify the action 
                that generated the stimulus.</para>

                <caution>

                  <para>The current release of ArgoUML only implements 
                  actions as textual descriptions.</para>

                  <para>As a practical convention it is suggested that 
                  call actions are shown as the name of the operation 
                  generating the action with any arguments in 
                  parentheses and that send actions are shown as the 
                  name of the signal generating the action with any 
                  arguments in parentheses. Return actions should be 
                  shown as the expression for the value they return, or 
                  empty otherwise. Create and destroy actions should be 
                  left empty, since they are implied by their 
                  representation.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Stimulus has no stereotypes 
                by default in the UML standard, but ArgoUML provides 
                the stereotypes, <literal>machine</literal>, <literal>
                organization</literal> and <literal>
                person</literal>.</para>

                <caution>

                  <para>ArgoUML also provides the stereotype <literal>
                  realize</literal> for stimuli. This appears to be an 
                  error, since this stereotype properly belongs to the 
                  <literal>Abstraction</literal> metaclass.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype_class"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Sender</literal></term>

              <listitem>

                <para>Text box. Identifies the instance which sent this 
                stimulus.</para>

                <para>Button&nbsp;1 click navigates to the sender instance, 
                button&nbsp;2 gives a pop up menu with one entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Open</literal>. Navigate to the 
                    selected sender instance.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Receiver</literal></term>

              <listitem>

                <para>Text box. Identifies the instance which receives 
                this stimulus.</para>

                <para>Button&nbsp;1 click navigates to the receiver 
                instance, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Open</literal>. Navigate to the 
                    selected receiver instance.</para>

                  </listitem>

                </itemizedlist>

                <warning>

                  <para>In the current release of ArgoUML this field is 
                  broken. It always shows the entry <literal>
                  none</literal> and the pop-up menu is grayed 
                  out.</para>

                </warning>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Text box. Records the namespace for the stimulus. 
                This is the package hierarchy.</para>

                <para>Button&nbsp;1 click on the entry will navigate to the 
                package defining this namespace (or the model for the 
                top level namespace).</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1>

        <title>Stimulus Call</title>

        <para>This tool creates a stimulus associated with a call 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

        <para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref linkend="s1.ref.stimulus"/>). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a call action, i.e. a solid line with 
        a solid arrow head.</para>

        <note>

          <para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a call action.</para>

        </note>

      </sect1>

      <sect1>

        <title>Stimulus Create</title>

        <para>This tool creates a stimulus associated with a create 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

        <para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref linkend="s1.ref.stimulus"/>). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a create action, i.e. a solid line 
        with a solid arrow head terminating at the head of the created 
        instance.</para>

        <note>

          <para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a create action.</para>

        </note>

      </sect1>

      <sect1>

        <title>Stimulus Destroy</title>

        <para>This tool creates a stimulus associated with a destroy 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

        <para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref linkend="s1.ref.stimulus"/>). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a destroy action, i.e. a solid line 
        with an open arrow head terminating at a cross at the bottom of 
        the destroyed instance&apos;s time line.</para>

        <note>

          <para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a destroy action.</para>

        </note>

      </sect1>

      <sect1>

        <title>Stimulus Send</title>

        <para>This tool creates a stimulus associated with a send 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

        <para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref linkend="s1.ref.stimulus"/>). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a send action, i.e. a solid line with 
        half an open arrow head.</para>

        <note>

          <para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a send action.</para>

        </note>

      </sect1>

      <sect1>

        <title>Stimulus Return</title>

        <para>This tool creates a stimulus associated with a return 
        action on the diagram, creating at the same time the associated 
        link between sender and receiving instances.</para>

        <para>All details tabs and properties are identical to to that 
        of stimulus in general (see <xref linkend="s1.ref.stimulus"/>). 
        Its graphical representation on the diagram is that of a 
        stimulus associated with a return action, i.e. a dotted line 
        with an open arrow head.</para>

        <note>

          <para>Because the current release of ArgoUML does not fully 
          implement actions, there is no enforcement of the 
          relationship to a return action.</para>

        </note>

      </sect1>

      <sect1 id="s1.ref.link_sequence">

        <title>Link</title>

        <para>A link is an instance of an association. In the UML 
        metamodel <literal>Link</literal> is a sub-class of <literal>
        Instance</literal>. Within a sequence diagram links are created 
        indirectly when an associated stimulus is created.</para>

        <para>An link is represented on a sequence diagram in ArgoUML 
        as a line connecting the instances concerned. However on a 
        sequence diagram the representation is modified to reflect the 
        type of action associated with the stimulus carried on the link 
        (see <xref linkend="s1.ref.stimulus"/>).</para>

        <sect2>

          <title>Link Details Tabs</title>

          <para>The details tabs that are active for links are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See <xref linkend="s2.ref.link_property_toolbar"/>
                 and <xref linkend="s2.ref.link_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                link are downlighted, since they are determined by the 
                objects connected.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, but with no contents.</para>

                <caution>

                  <para>A link should not generate any code, so having 
                  this tab active is probably a mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Link</literal> has the following standard tagged values 
                defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Instance</literal>. Showing 
                    the permanence of the state information associated 
                    with the link. Values <literal>transitory</literal> 
                    (state is destroyed when the link is destroyed) and 
                    <literal>persistent</literal> (state is preserved 
                    when the link is destroyed).</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the link is 
                    redundant&mdash;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

                    <note>

                      <para>Derived links still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for a Classifier.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.link_property_toolbar">

          <title>Link Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                link, navigating immediately to the properties tab for 
                that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the link from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an link from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.link_property_fields">

          <title>Property Fields For Link</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the link. By convention 
                link names start with a lower case letter and use bumpy 
                caps to divide words within the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Link has no stereotypes by 
                default in the UML standard.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype_class"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Text box. Records the namespace for the link. 
                This is the package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Connections</literal></term>

              <listitem>

                <para>List box. Lists the connections of the link, i.e. 
                the link-ends.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the link-end.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entstate">

      <title>Statechart Diagram Model Element Reference</title>

      <sect1>

        <title>Introduction</title>

        <para>This chapter describes each model element that can be created 
        within a statechart diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

        <para>There is a close relationship between this material and 
        the Properties Tab of the Details Pane (see 
        <xref linkend="s1.ref.proptab"/>). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

        <para><xref linkend="fig.ref.state_diagram"/> and 
        <xref linkend="fig.ref.state_diagram2"/> show statechart 
        diagrams with most possible model elements displayed.</para>

        <figure id="fig.ref.state_diagram">

          <title>Statechart diagram model elements 1.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/state_diagram_artifacts1.png"
           format="PNG"/></imageobject></mediaobject></screenshot>
        </figure>

        <figure id="fig.ref.state_diagram2">

          <title>Statechart diagram model elements 2.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/build_house.png"
           format="PNG"/></imageobject></mediaobject></screenshot>
        </figure>

        <sect2 id="s2.ref.state_limitations">

          <title>Limitations Concerning Statechart Diagrams in 
          ArgoUML</title>

          <para>The statechart diagrams support the 7 action types 
          defined (CallAtion, CreateAction, DestroyAction,
          ReturnAction, SendAction, 
          TerminateAction and UninterpretedAction), 
          but there is no way to use the same action 
          more than once.
          Also, in a few cases, it is not possible to 
          set or select the related elements; 
          e.g.there is no way to select a signal for a SendAction. 
          </para>

          <para>Code generation from statechart diagrams is not 
          developed yet.</para>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.state">

        <title>State</title>

        <para>A state models a situation during which some (usually 
        implicit) invariant condition holds for the parent class. This 
        invariant may be a static situation such as an object waiting 
        for some external event to occur, or some dynamic activity 
        <quote>in progress</quote>.</para>

        <para>A state is represented on a statechart diagram in ArgoUML 
        as a rectangle with rounded corners, with a horizontal line 
        separating the name at the top from the description of the 
        behavior below. The description of the behavior includes the 
        entry and exit actions and any internal transitions.</para>

        <sect2>

          <title>State Details Tabs</title>

          <para>The details tabs that are active for states are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.state_property_toolbar"/> and 
                <xref linkend="s2.ref.state_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                state define the bounding box of the state.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.state_property_toolbar">

          <title>State Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                state, navigating immediately to the properties tab for 
                that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the state from the model</para>

                <note>

                  <para>This is a deletion from the model, 
                  <emphasis>not</emphasis> just the diagram. 
                  You can not just remove 
                  a state from the diagram, and keep it within the 
                  model, as is possible in other diagrams.
                  </para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.state_property_fields">

          <title>Property Fields For State</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the state. By convention 
                state names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Container</literal></term>

              <listitem>

                <para>Text box. Shows the container of the state. This 
                is the state hierarchy.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state. All 
                states are at least contained by the otherwise hidden 
                top-level state (named <quote>top</quote>) that is the 
                root of the state containment hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Entry-Action</literal></term>

              <listitem>

                <para>Text box. Shows the name of the action (if any) 
                to be executed on entry to this state.</para>

                <note>

                  <para>This field shows the name of the action, while 
                  on the diagram the expression of the action is 
                  shown.</para>

                </note>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with two 
                entries:</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new Entry 
                    action of a certain kind. This menu has the 
                    following submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the Entry-Action.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Exit-Action</literal></term>

              <listitem>

                <para>Text box. Shows the action (if any) to be 
                executed on exit from this state.</para>

                <para>Button&nbsp;1 click navigates to the selected action, 
                button&nbsp;2 gives a pop up menu with two entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new Exit action 
                    of a certain kind. This menu has the following 
                    submenus to select the kind of action: Call Action, 
                    Create Action, Destroy Action, Return Action, Send 
                    Action, Terminate Action, Uninterpreted 
                    Action.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the Exit-Action.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Do-Activity</literal></term>

              <listitem>

                <para>Text box. Shows the action (if any) to be 
                executed while being in this state.</para>

                <para>Button&nbsp;1 click navigates to the selected action, 
                button&nbsp;2 gives a pop up menu with two entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new Do-Activity 
                    (action) of a certain kind. This menu has the 
                    following submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the Do-Activity.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>
            
            <varlistentry>

              <term><literal>Deferrable Events</literal></term>

              <listitem>

                <para>Text box. Shows a list of events 
                that are candidates to be retained 
                by the state machine 
                if they trigger no transitions out of the
                state (not consumed).
                </para>

                <para>Button&nbsp;1 click navigates to the selected event, 
                button&nbsp;2 on an event 
                gives a pop up menu with the following entries.
                </para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Select</literal>. Allows 
                    to add already existing events 
                    to the list of deferred ones.
                    </para>

                  </listitem>

                  <listitem>

                    <para><literal>New</literal>. Add a new event 
                    of a certain kind. This menu has the 
                    following submenus to select the kind of event: 
                    Call Event, Change Event, Signal Event, Time Event.
                    </para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the event.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Incoming</literal></term>

              <listitem>

                <para>Text area. Lists all the transitions that enter 
                this state.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Outgoing</literal></term>

              <listitem>

                <para>Text area. Lists all the transitions that leave 
                this state.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                action.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Internal Transitions</literal></term>

              <listitem>

                <para>Text area. Lists all the internal transitions of 
                the state. Such transitions neither exit nor enter the 
                state, so they do not cause a state change. Which means 
                that the Entry and Exit actions are not invoked.</para>

                <note>

                  <para>This field shows the name of the transition, 
                  while on the diagram the name of the trigger is 
                  shown, separated with a <literal>/</literal> from
                  the effect script.</para>

                </note>

                <para>Button&nbsp;1 double-click navigates to the selected 
                transition, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new internal 
                    transition.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.action_state">

        <title>Action</title>

        <para>An action specifies an executable statement and is an 
        abstraction of a computational procedure that can change the 
        state of the model. In the UML metamodel it is a child of 
        <literal>ModelElement</literal>. Since in the metamodel an 
        ActionSequence is itself an Action that is an aggregation of 
        other actions (i.e. the &quot;composite&quot; pattern), an 
        ActionSequence may be used anywhere an action may be.</para>

        <para>There are a number of different types of action that are 
        children of Action within the UML metamodel.</para>

        <itemizedlist>

          <listitem>

            <para><literal>CreateAction</literal>. Associated with a 
            classifier, this action creates an instance of that 
            classifier.</para>

          </listitem>

          <listitem>

            <para><literal>CallAction</literal>. Associated with an 
            operation, this action calls the given 
            operation.</para>

          </listitem>

          <listitem>

            <para><literal>ReturnAction</literal>. An action used to 
            return a result to an earlier caller.</para>

          </listitem>

          <listitem>

            <para><literal>SendAction</literal>. Associated with a 
            signal, this action causes the signal to be raised.</para>

          </listitem>

          <listitem>

            <para><literal>TerminateAction</literal>. Causes the 
            invoking object to self-destruct.</para>

          </listitem>

          <listitem>

            <para><literal>UninterpretedAction</literal>. An action 
            used to specify language-specific actions that do not 
            classify under the other types of actions.</para>

          </listitem>

          <listitem>

            <para><literal>DestroyAction</literal>. Destroys the 
            specified target object.</para>

          </listitem>

        </itemizedlist>

        <para>An action is represented on the diagram by the text of 
        its expression.</para>

        <caution>
          <para>The V0.20 release of ArgoUML only partially 
                  implements actions. As a practical convention it is 
                  suggested that call actions are shown as the name of 
                  the operation generating the action with any 
                  arguments in parentheses and that send actions are 
                  shown as the name of the signal generating the action 
                  with any arguments in parentheses. Return actions 
                  should be shown as the expression for the value they 
                  return, or empty otherwise. Create and destroy 
                  actions should shown as <literal>
                  create(&lt;target&gt;)</literal> and <literal>
                  destroy(&lt;target&gt;)</literal>. Terminate action 
                  should be shown as <literal>
                  terminate</literal>.
          </para>
        </caution>
        <sect2>

          <title>Action Details Tabs</title>

          <para>The details tabs that are active for actions are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.action_property_toolbar"/> and 
                <xref linkend="s2.ref.action_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab. 
                In the UML metamodel, <literal>
                Action</literal> has no standard 
                stereotypes defined.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Action</literal> has no standard tagged 
                value defined.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.action_property_toolbar">

          <title>Action Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the hierarchical 
                structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                action, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the Action from the model</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.action_property_fields">

          <title>Property Fields For Action</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the action. By convention 
                action names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>
            
            <varlistentry>

              <term><literal>Asynchronous</literal></term>

              <listitem>
                <para>Check box. 
                Indicates if a dispatched Stimulus is asynchronous or not.
                </para>
              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Script</literal></term>

              <listitem>
                <para>Double text box with the expression that defines the 
                action.
                This field consists of two parts, 
                the first one contains the body (script) of the expression, 
                and the second one contains the particular programming language 
                used to write the expression.
                </para>
              </listitem>

            </varlistentry>
             
            <varlistentry>

              <term><literal>Recurrence</literal></term>

              <listitem>

                <para>Double Text box. 
                An expression stating how many times the Action should be performed.
                The field consists of two parts: the first one for the expression, 
                the second one for the language it is written in.
                </para>

           </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Arguments</literal></term>

              <listitem>

                <para>Text box. 
                This is an ordered list with the arguments of the action.
                </para>
				
				<para>Button&nbsp;1 double-click on any of the arguments 
                navigates to that argument, button&nbsp;2 click brings up a 
                pop up menu with two entries.</para>

                <itemizedlist>

                  <listitem>
                    <para><literal>New</literal>. Create a 
                    new argument and navigate to it.</para>
                  </listitem>

                  <listitem>
                    <para><literal>Remove</literal>. Deletes the 
                    argument from the model.</para>
                  </listitem>

                </itemizedlist>
              </listitem>

            </varlistentry>

           <varlistentry>

              <term><literal>Instantiation (only for CreateAction)</literal></term>

              <listitem>

                <para>Text box. 
                This shows the classifier that gets instantiated by the create-action.
                </para>
				
				<para>Button&nbsp;1 double-click on the classifier 
                navigates to that argument, button&nbsp;2 click brings up a 
                pop up menu with one entry.</para>

                <itemizedlist>

                  <listitem>
                    <para><literal>Add...</literal>. 
                    This brings up a dialog box that allows 
                    selecting the one classifier that gets created.</para>
                  </listitem>

                </itemizedlist>
              </listitem>

            </varlistentry>

          </variablelist>


   
        </sect2>

      </sect1>

      <sect1 id="s1.ref.composite_state">

        <title>Composite State</title>

        <para>A composite state is a state that contains other states 
        (known as sub-states), allowing hierarchical state machines to 
        be constructed.</para>

        <para>A composite state is represented on a statechart diagram 
        in ArgoUML as a large rectangle with rounded corners, with a 
        horizontal line separating the name at the top from the 
        description of the behavior and the model of the sub-state 
        machine below. The description of the behavior includes the 
        entry, exit and do actions and any internal transitions.</para>

        <para>Sub-states are placed within a composite machine by 
        placing them entirely within the composite state. This can be 
        done at creation time, i.e. when creating the state for the 
        first time in the editing pane. Alternatively, an existing 
        state can be dragged onto a composite state.</para>

        <para>The description of a composite state is almost identical 
        to that of a state (see <xref linkend="s1.ref.state"/> and so 
        is not duplicated here. The only differences is one additional 
        tool, one missing field, 
        and one additional field, which are described as 
        follows.</para>

        <variablelist>

          <varlistentry>

            <term><guiicon><inlinemediaobject><imageobject>
            <imagedata align="center"
             fileref="images/icons/concurrent_region.gif"
             format="GIF"/></imageobject></inlinemediaobject></guiicon> 
            <literal>New Concurrent Region</literal></term>

            <listitem>

              <para>Adds a new concurrent region to the selected 
              composite state.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term>
            <literal>Deferrable Events</literal></term>

            <listitem>

              <para>This field is missing from V0.20 of ArgoUML.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>Subvertices</literal></term>

            <listitem>

              <para>Text area. Lists all the sub-states contained 
              within this composite state.</para>

              <para>Button&nbsp;1 double-click navigates to the selected 
              entry, button&nbsp;2 gives a pop up menu with two 
              entries.</para>

              <itemizedlist>

                <listitem>

                  <para><literal>New</literal>. A submenu pops up, with 
                  a selection of 7 kinds of states, which can be added 
                  to the model. The 7 kinds of states supported are: 
                  Pseudo State, Synch State, Stub State, Composite 
                  State, Simple State, Final State, Submachine 
                  State.</para>

                  <warning>

                    <para>Using this way of adding states to the model 
                    is not a good idea, since you will have to add the 
                    state to the diagram later. This can be done by 
                    selecting it in the explorer, and activating the 
                    pop-up menu, and selecting <quote>Add to 
                    Diagram</quote>. It is advisable to use the toolbar 
                    of the diagram instead.</para>

                  </warning>

                </listitem>

                <listitem>

                  <para><literal>Delete From Model</literal> Delete the 
                  selected state from the model.</para>

                </listitem>

              </itemizedlist>

            </listitem>

          </varlistentry>

        </variablelist>

      </sect1>

      <sect1 id="s1.ref.concurrent_region">

        <title>Concurrent Region</title>

        <para>A Concurrent Region is an <quote>orthogonal 
        conjunctive</quote> component of a composite state, allowing 
        concurrency to be constructed.</para>

        <para>A concurrent region is represented on the diagram by a 
        tile of a composite state, separated from other regions by a 
        dashed line.</para>

        <para>ArgoUML currently only supports a horizontal division of 
        a concurrent composite state in regions.</para>

        <para>The description of the details panels of a concurrent 
        region is identical to that of a composite state (see 
        <xref linkend="s1.ref.composite_state"/> and so is not 
        duplicated here.</para>

      </sect1>

      <sect1 id="s1.ref.submachine_state">

        <title>Submachine State</title>

        <para>A submachine state is a syntactical convenience that 
        facilitates reuse and modularity. It is a shorthand that 
        implies a macro-like expansion by another state machine and is 
        semantically equivalent to a composite state. The state machine 
        that is inserted is called the referenced state machine while 
        the state machine that contains the submachine state is called 
        the containing state machine. The same state machine may be 
        referenced more than once in the context of a single containing 
        state machine. In effect, a submachine state represents a 
        <emphasis>call</emphasis> to a state machine 
        <emphasis>subroutine</emphasis> with one or more entry 
        and exit points. The entry and exit points are specified by 
        stub states. SubmachineState is a child of State.</para>

        <para>The submachine state is depicted as a normal state with 
        the additional <emphasis>include</emphasis>
         declaration above (and separated by a 
        line from) its internal transitions compartment. The expression 
        following the <literal>include</literal> reserved word is the 
        name of the invoked submachine.</para>

        <para>ArgoUML currently only supports a horizontal division of 
        a concurrent composite state in regions.</para>

        <para>The description of the details panels of a concurrent 
        region is almost identical to that of a composite state (see 
        <xref linkend="s1.ref.composite_state"/> and so is not 
        duplicated here. The only difference is one additional 
        field:</para>

        <variablelist>

          <varlistentry>

            <term><literal>Submachine</literal></term>

            <listitem>

              <para>Drop-down selector. Allows selecting the submachine 
              included within this composite state.</para>

            </listitem>

          </varlistentry>

        </variablelist>

      </sect1>

      <sect1 id="s1.ref.stub_state">

        <title>Stub State</title>

        <para>A stub state only appears on a submachine state.</para>

        <para>A submachine state represents the invocation of a state 
        machine defined elsewhere. In the general case, an invoked 
        state machine can be entered at any of its substates or through 
        its default (initial) pseudostate. Similarly, it can be exited 
        from any substate or as a result of the invoked state machine 
        reaching its final state. The non-default entry and exits are 
        specified through <emphasis>stub states</emphasis>. In the UML 
        metamodel, StubState is a child of State.</para>

        <para>Every Stub State has a label on the diagram, which 
        corresponds to the pathname represented by the <quote>Reference 
        State</quote> attribute of the stub state.</para>

        <para>The description of the details panels of a stub state is 
        almost identical to that of a pseudo state (see 
        <xref linkend="s1.ref.pseudostate"/> and so is not duplicated 
        here. The only difference is one additional field:</para>

        <variablelist>

          <varlistentry>

            <term><literal>Reference State</literal></term>

            <listitem>

              <para>Drop-down selector. Allows entering the path name 
              of the reference state.</para>

            </listitem>

          </varlistentry>

        </variablelist>

      </sect1>

      <sect1 id="s1.ref.transition_state">

        <title>Transition</title>

        <para>A transition is a directed relation between a source 
        state (any kind, e.g. composite state) and a destination state 
        (any kind, e.g. composite state). Within the UML metamodel, 
        <literal>Transition</literal> is a sub-class of <literal>
        ModelElement</literal>.</para>

        <para>A transition is represented on a statechart diagram in 
        ArgoUML as a line with arrow connecting the source to the 
        destination state. Next to this line is a string containing the 
        following three parts: The trigger event (e.g. a Call Event), 
        which may have parameters between brackets <literal>
        ()</literal>. Next follows (if any) the guard in square 
        brackets (<literal>[]</literal>). Finally, if there is an 
        effect (e.g. Call Action) defined, a slash (
        <literal>/</literal>) followed by the expression of the 
        action.</para>

        <sect2>

          <title>Transition Details Tabs</title>

          <para>The details tabs that are active for transitions are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.transition_property_toolbar"/> 
                and <xref linkend="s2.ref.transition_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                transition are downlighted, since the position of the 
                transition is defined by its end points.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab.  In the UML metamodel, <literal>
                Transition</literal> has no stereotypes defined by default.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Transition</literal> has no standard tagged 
                values defined.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for a transition.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.transition_property_toolbar">

          <title>Transition Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up in the hierarchy to the parent state 
                machine.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                transition, navigating immediately to the properties 
                tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the transition from the model.</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a transition from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.transition_property_fields">

          <title>Property Fields For Transition</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the transition. By 
                convention transition names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>StateMachine</literal></term>

              <listitem>

                <para>Text box. Shows the name of the parent 
                StateMachine for the transition.</para>

                <para>Button&nbsp;1 double-click navigates to the 
                StateMachine shown.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>State</literal></term>

              <listitem>

                <para>Text box. Shows the name of the parent State in 
                case of an internal transition.</para>

                <para>Button&nbsp;1 double-click navigates to the State 
                shown.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Text box. Shows the source state for the 
                transition.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Target</literal></term>

              <listitem>

                <para>Text box. Shows the target state for the 
                transition.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Trigger</literal></term>

              <listitem>

                <para>Text box. Shows the trigger event (if any) which 
                invokes this transition.</para>

                <note>

                  <para>UML does not require there to be a trigger, 
                  e.g. when a guard is defined. In this case, 
                  the transition is taken 
                  immediately if the guard is true.</para>

                </note>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with three 
                entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Select - Add...</literal>. 
                    This Add an existing trigger 
                    event. A sub-menu opens with 4 choices: Call Event, 
                    Change Event, Signal Event, Time Event.</para>

                  </listitem>

                  <listitem>

                    <para><literal>New</literal>. Add a new trigger 
                    event. A sub-menu opens with 4 choices: Call Event, 
                    Change Event, Signal Event, Time Event.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the trigger event from the model. This feature is 
                    always downlighted in the current version of 
                    ArgoUML.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Guard</literal></term>

              <listitem>

                <para>Text box. Shows the name of a guard (if any). The 
                expression of a guard must be true before this 
                transition can be taken.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new 
                    guard.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Effect</literal></term>

              <listitem>

                <para>Text box. Shows the action (if any) to be invoked 
                as this transition is taken.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                action, button&nbsp;2 gives a pop up menu with two 
                entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new Effect 
                    (action) of a certain kind. This menu has the 
                    following submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the selected action from the model. 
                    </para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.call_event_state">

        <title>Event</title>

        <para>An event is an observable occurrence. In the UML 
        metamodel it is a child of <literal>
        ModelElement</literal>.</para>

        <para>There are a number of different types of events that are 
        children of event within the UML metamodel.</para>

        <itemizedlist>

          <listitem>

            <para><literal>CallEvent</literal>. Associated with an 
            operation of a class, this event is caused by a call to the 
            given operation. The expected effect is that the steps of 
            the operation will be executed.</para>

          </listitem>

          <listitem>

            <para><literal>SignalEvent</literal>. Associated with a 
            signal, this event is caused by the signal being 
            raised.</para>

          </listitem>

          <listitem>

            <para><literal>TimeEvent</literal>. An event cause by 
            expiration of a timing deadline.</para>

          </listitem>

          <listitem>

            <para><literal>ChangeEvent</literal>. An event caused by a 
            particular expression (of attributes and associations) 
            becoming true.</para>

          </listitem>

        </itemizedlist>

        <para>An event is represented by its name.</para>

        <sect2>

          <title>Event Details Tabs</title>

          <para>The details tabs that are active for events are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.call_event_property_toolbar"/> 
                and <xref linkend="s2.ref.call_event_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab.
                In the UML metamodel, an <literal>
                Event</literal> has the following standard 
                stereotypes defined.
                </para>
                <itemizedlist>

                  <listitem>
                    <para><literal>create</literal> (for a 
                    <literal>CallEvent</literal> only). 
                    Create is a stereotyped call event denoting 
                    that the instance receiving that event 
                    has just been created. 
                    For state machines, 
                    it triggers the initial transition 
                    at the topmost level of the state machine 
                    (and is the only kind of trigger 
                    that may be applied to an initial transition).
                    </para>
                  </listitem>

                  <listitem>
                    <para><literal>destroy</literal> (for a 
                    <literal>CallEvent</literal> only). 
                    Destroy is a stereotyped call event denoting 
                    that the instance receiving the event 
                    is being destroyed.
                    </para>
                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, an <literal>
                Event</literal> has no standard tagged 
                values defined.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.call_event_property_toolbar">

          <title>Event Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the composition structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                event, navigating immediately to the properties tab for 
                that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/parameter.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New parameter</literal></term>

              <listitem>

                <para>This creates a new parameter for the event 
                operation as the current parameter, navigating 
                immediately to the properties tab for that parameter 
                (see <xref linkend="s1.ref.parameter"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the event from the model.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.call_event_property_fields">

          <title>Property Fields For Event</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the event. By convention 
                event names start with a lower case letter and use 
                bumpy caps to divide words within the name in the same 
                way as operations.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

                <tip>

                  <para>For call events it makes sense to use the name 
                  of the associated operation. For signal events it 
                  make sense to use the name of the signal, prefixed by 
                  <literal>[sig]</literal>. For time events use the 
                  time expression, prefixed by <literal>
                  [time]</literal> and for change events the change 
                  expression, prefixed by <literal>
                  [change]</literal>.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Text field. Shows the namespace for the event. 
                This is the composition hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Parameters</literal></term>

              <listitem>

                <para>Text area, with entries for all the actual 
                parameter values of the event (see 
                <xref linkend="s1.ref.parameter"/>).</para>

                <para>Button&nbsp;1 double-click on any of the parameters 
                navigates to that parameter, button&nbsp;2 click brings up a 
                pop up menu with one entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New Parameter</literal>. Create a 
                    new parameter and navigate to it.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Transition</literal></term>

              <listitem>

                <para>This shows the transition caused by the 
                event.</para>

                <para>button&nbsp;1 double-click on the transition navigates 
                to that transition.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Operations</literal></term>

              <listitem>

                <para>Drop-down selector. Only present for a Call 
                Event. This allows specifying the operation that causes 
                the event when called.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Signal</literal></term>

              <listitem>

                <para>Text field. Only present for a Signal 
                Event. This allows specifying the signal that causes 
                the event when called.</para>
                
                <para>Button&nbsp;1 double-click navigates to the selected 
                signal, button&nbsp;2 gives a pop up menu with two 
                entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Add...</literal>. This 
                    opens a dialog box that allows selecting 
                    an already existing signal.</para>

                  </listitem>

                  <listitem>

                    <para><literal>New Signal</literal>. Creates 
                    a new Signal, and navigates to it. 
                    </para>

                  </listitem>

                </itemizedlist>


              </listitem>

            </varlistentry>
            <varlistentry>

              <term><literal>When</literal></term>

              <listitem>

                <para>Double text field. Only present for a Time 
                Event. This allows expressing the time that 
                the event is called.</para>
                
                <para>The first of the two fields is for the body of the expression, 
                and the second one for the language in which it is written.</para>

              </listitem>

            </varlistentry>
            
          </variablelist>
          
          <warning>
            <para>In ArgoUML V0.20, 
            the properties panel of a change event lacks a field to enter the 
            change expression.</para>
          </warning>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.guard_state">

        <title>Guard</title>

        <para>A guard is associated with a transition. At the time an 
        event is dispatched, the guard is evaluated, and if false, its 
        transition is disabled. In the UML metamodel, <literal>
        Guard</literal> is a child of <literal>
        ModelElement</literal>.</para>

        <para>A guard is shown on the diagram by the text of its 
        expression in square brackets (<literal>[]</literal>).</para>

        <sect2>

          <title>Guard Details Tabs</title>

          <para>The details tabs that are active for guards are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.guard_property_toolbar"/> and 
                <xref linkend="s2.ref.guard_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab, containing the stereotypes for the 
                guard. In the UML metamodel, <literal>
                Guard</literal> has no standard stereotypes
                defined.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Guard</literal> has no standard tagged 
                values defined.</para>

                  </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.guard_property_toolbar">

          <title>Guard Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                guard, navigating immediately to the properties tab for 
                that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete from Model</literal></term>

              <listitem>

                <para>This deletes the guard from the model</para>

                <warning>

                  <para>This is a deletion from the model, 
                  <emphasis>not</emphasis> just the diagram.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.guard_property_fields">

          <title>Property Fields For Guard</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the guard. By convention 
                guard names start with a lower case letter and use 
                bumpy caps to divide words within the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Transition</literal></term>

              <listitem>

                <para>Text box, showing the transition that owns this 
                guard.</para>

                <para>Button&nbsp;1 double-click on the transition navigates 
                to that transition.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Expression</literal></term>

              <listitem>

                <para>Text box. The expression that defines the 
                guard.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Language</literal></term>

              <listitem>

                <para>Text box. This indicates that the expression is 
                written in a particular interpretation language with 
                which to evaluate the text.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.pseudostate">

        <title>Pseudostate</title>

        <para>A pseudostate encompasses a number of different transient 
        vertices on a state machine diagram. They are used, typically, 
        to connect multiple transitions into more complex state 
        transitions paths. For example, by combining a transition 
        entering a fork pseudostate with a set of transitions exiting 
        the fork pseudostate, we get a compound transition that leads 
        to a set of concurrent target states. Pseudostates do not have 
        the properties of a full state and serve only as a connection 
        point for transactions (but with some semantic value). Within 
        the UML metamodel, <literal>Pseudostate</literal> is a 
        sub-class of <literal>StateVertex</literal>.</para>

        <para>The representation of a pseudostate on a statechart 
        diagram in ArgoUML depends on the particular kind of 
        pseudostate: initial, deepHistory, shallowHistory, join, fork, 
        junction and choice. ArgoUML lets you place any pseudostate 
        directly by tools for the specific types of pseudostate. These 
        are described in separate sections below (see 
        <xref linkend="s1.ref.initial_state"/>, 
        <xref linkend="s1.ref.junction_state"/>, 
        <xref linkend="s1.ref.branch_state"/>, 
        <xref linkend="s1.ref.fork_state"/>, 
        <xref linkend="s1.ref.join_state"/>, 
        <xref linkend="s1.ref.shallow_history"/> and 
        <xref linkend="s1.ref.deep_history"/>).</para>

        <sect2>

          <title>Pseudostate Details Tabs</title>

          <para>The details tabs that are active for pseudostates are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.pseudostate_property_toolbar"/> 
                and <xref linkend="s2.ref.pseudostate_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab, containing the stereotypes of the 
                pseudostate. In the UML metamodel, 
                <literal>PseudoState</literal> has the no standard 
                stereotypes defined.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Pseudostate</literal> has no standard tagged 
                values defined.</para>

                  </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.pseudostate_property_toolbar">

          <title>Pseudostate Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                pseudostate, navigating immediately to the properties 
                tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete from Model</literal></term>

              <listitem>

                <para>This deletes the pseudostate from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.pseudostate_property_fields">

          <title>Property Fields For Pseudostate</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the pseudostate. By 
                convention pseudostate names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

                <tip>

                  <para>Pseudostate names are not shown on the diagram 
                  and it is not usually necessary to give them a 
                  name.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Container</literal></term>

              <listitem>

                <para>Text box. Shows the container of the pseudostate. 
                This is the state hierarchy.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state (or the 
                top-level state that is the root of the state 
                containment hierarchy).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Incoming</literal></term>

              <listitem>

                <para>Text area. Lists any incoming transitions for the 
                pseudostate.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Outgoing</literal></term>

              <listitem>

                <para>Text area. Lists any outgoing transitions for the 
                pseudostate.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.initial_state">

        <title>Initial State</title>

        <para>The initial state is a pseudostate (see 
        <xref linkend="s1.ref.pseudostate"/>) representing a source for 
        a single transition to the <emphasis>default</emphasis> state 
        of a composite state. It is the state from which any initial 
        transition is made.</para>

        <para>As a consequence it is not permissible to have incoming 
        transitions. ArgoUML will not let you create such transitions, 
        and if you import a model that has such transitions, a critic 
        will complain.</para>

        <para>There can be at most one initial pseudostate in a 
        composite state, which must have (at most) one outgoing 
        transition.</para>

        <para>An initial state is represented on the diagram as a solid 
        disc.</para>

      </sect1>

      <sect1 id="s1.ref.final_state">

        <title>Final State</title>

        <para>If a transition reaches a final state, it implies 
        completion of the activity associated with that composite 
        state, or at the top level, of the complete state machine. In 
        the UML metamodel <literal>FinalState</literal> is a child of 
        <literal>State</literal>.</para>

        <note>

          <para>A final state is a true state (with all its 
          attributes), <emphasis>not</emphasis> a pseudostate.</para>

        </note>

        <para>Completion at the top level implies termination (i.e. 
        destruction) of the owning object instance.</para>

        <para>The representation of a final state on the diagram is a 
        circle with a small disc at its center.</para>

        <sect2>

          <title>Final State Details Tabs</title>

          <para>The details tabs that are active for final states are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.final_state_property_toolbar"/> 
                and <xref linkend="s2.ref.final_state_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab, containing the stereotypes of the 
                final state. In the UML metamodel, a <literal>
                Final State</literal> has the no standard tagged 
                values defined.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Final State</literal> has no standard tagged 
                values defined.</para>

                  </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.final_state_property_toolbar">

          <title>Final State Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                state, navigating immediately to the properties tab for 
                that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete from Model</literal></term>

              <listitem>

                <para>This deletes the final state from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.final_state_property_fields">

          <title>Property Fields For Final State</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the final state. By 
                convention final state names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

                <tip>

                  <para>Final state names are shown on the diagram but 
                  it is not usually necessary to give them a 
                  name.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Container</literal></term>

              <listitem>

                <para>Text box. Shows the container of the final state. 
                This is the state hierarchy.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state (or the 
                top-level state that is the root of the state 
                containment hierarchy).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Entry-Action</literal></term>

              <listitem>

                <para>Text box. Shows the name of the action (if any) 
                to be executed on entry to this final state.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry, button&nbsp;2 gives a pop up menu with two 
                entries:</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new Entry 
                    action of a certain kind. This menu has the 
                    following 7 submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the Entry-Action.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Incoming</literal></term>

              <listitem>

                <para>Text area. Lists any incoming transitions for the 
                final state.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Internal Transitions</literal></term>

              <listitem>

                <para>Text area. Lists all the internal transitions of 
                the state. Such transitions neither exit nor enter the 
                state, so they do not cause a state change. Which means 
                that the Entry and Exit actions are not invoked.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                transition</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.junction_state">

        <title>Junction</title>

        <para>Junction is a pseudostate (see 
        <xref linkend="s1.ref.pseudostate"/>) which is used to split an 
        incoming transition into multiple outgoing transition segments 
        with different guard conditions. A Junction is also called a 
        Merge or Static conditional branch. The chosen transition is 
        that whose guard is true at the time of the transition.</para>

        <para>A predefined guard denoted <literal>else</literal> may be 
        defined for at most one outgoing transition. This transition is 
        enabled if all the guards labeling the other transitions are 
        false.</para>

        <para>According the UML standard, its symbol is a small black 
        circle. Alternatively, it may be represented by a diamond shape 
        (in case of &quot;Decision&quot; for Activity diagrams). 
        ArgoUML only represents a junction on the diagram as a solid 
        (white by default) diamond, and does not support the black 
        circle symbol for a junction.</para>

      </sect1>

      <sect1 id="s1.ref.branch_state">

        <title>Choice</title>

        <para>Choice is a pseudostate (see 
        <xref linkend="s1.ref.pseudostate"/>) which is used to split an 
        incoming transition into multiple outgoing transition segments 
        with different guard conditions. Hence, a Choice allows a 
        dynamic choice of outgoing transitions. The chosen transition 
        is that whose guard is true at the time of the transition (if 
        more than one is true, one is selected at random).</para>

        <para>A predefined guard denoted <literal>else</literal> may be 
        defined for at most one outgoing transition. This transition is 
        enabled if all the guards labeling the other transitions are 
        false.</para>

        <note>

          <para>This sort of pseudostate was formerly called a <literal>
          Branch</literal> by ArgoUML.</para>

        </note>

        <para>A choice is represented on the diagram as a small solid 
        (white by default) circle (reminiscent of a small state 
        icon).</para>

      </sect1>

      <sect1 id="s1.ref.fork_state">

        <title>Fork</title>

        <para>Fork is a pseudostate (see 
        <xref linkend="s1.ref.pseudostate"/>) which splits a transition 
        into two or more concurrent transitions.</para>

        <caution>

          <para>The outgoing transitions should not have guards. 
          However ArgoUML will not enforce this.</para>

        </caution>

        <para>A fork is represented on the diagram as a solid (black by 
        default) horizontal bar.</para>

        <tip>

          <para>This bar can be made vertical by selecting the fork, 
          and dragging with button&nbsp;1 one of its corners.</para>

        </tip>

      </sect1>

      <sect1 id="s1.ref.join_state">

        <title>Join</title>

        <para>Join is a pseudostate (see 
        <xref linkend="s1.ref.pseudostate"/>) which joins two or more 
        concurrent transitions into a single transition.</para>

        <caution>

          <para>The incoming transitions should not have guards. 
          However ArgoUML will not enforce this.</para>

        </caution>

        <para>A join is represented on the diagram as a solid (black by 
        default) horizontal bar.</para>

        <tip>

          <para>This bar can be made vertical by selecting the join, 
          and dragging with button&nbsp;1 one of its corners.</para>

        </tip>

      </sect1>

      <sect1 id="s1.ref.shallow_history">

        <title>Shallow History</title>

        <para>Shallow History is a pseudostate (see 
        <xref linkend="s1.ref.pseudostate"/>) that can remember the 
        last state of its container that was active. The history 
        pseudostate points to its default state with a transition arrow 
        just like the initial pseudostate does. This transition points 
        to the substate that will become active when there is no 
        history. When the container composite state has been active 
        before (i.e., when there is history), the substate that was 
        active when the container state was exited, becomes active 
        again.</para>

        <para>When placed within a multi-level hierarchy of composite 
        states, the shallow history only remembers the history for 
        states that have the same container as the history pseudostate. 
        It does not restore substates deeper in the hierarchy then the 
        history pseudostate itself.</para>

        <para>A shallow history is represented on the diagram as a 
        circle containing the letter <literal>H</literal>.</para>

      </sect1>

      <sect1 id="s1.ref.deep_history">

        <title>Deep History</title>

        <para>Deep History is a pseudostate (see 
        <xref linkend="s1.ref.pseudostate"/>) that can remember the 
        last state of its container that was active. The history 
        pseudostate points to its default state with a transition arrow 
        just like the initial pseudostate does. This transition points 
        to the substate that will become active when there is no 
        history. When the container composite state has been active 
        before (i.e., when there is history), the substate that was 
        active when the container state was exited, becomes active 
        again.</para>

        <para>When placed within a multi-level hierarchy of composite 
        states, the deep history remembers the history for all states 
        recursively which are contained in the history pseudostate 
        container. It does restore any substates no matter how deep in 
        the hierarchy.</para>

        <para>A deep history is represented on the diagram as a circle 
        containing the symbols <literal>H*</literal>.</para>

      </sect1>

      <sect1 id="s1.ref.synch_state">

        <title>Synch State</title>

        <para>A synch state is for synchronizing concurrent regions of 
        a state machine. It is used in conjunction with forks and joins 
        to insure that one region leaves a particular state or states 
        before another region can enter a particular state or states. 
        The firing of outgoing transitions from a synch state can be 
        limited by specifying a bound on the difference between the 
        number of times outgoing and incoming transitions have fired. 
        In the UML metamodel <literal>Synch</literal> is a child of 
        <literal>StateVertex</literal>.</para>

        <para>A synch state is shown as a small circle with the upper 
        bound inside it. The bound is either a positive integer or a 
        star (&apos;*&apos;) for unlimited. Synch states are drawn on 
        the boundary between two regions when possible.</para>

        <sect2>

          <title>Synch State Details Tabs</title>

          <para>The details tabs that are active for Synch states are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.synch_state_property_toolbar"/> 
                and <xref linkend="s2.ref.synch_state_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab, containing the stereotypes of the 
                Synch state. In the UML metamodel, <literal>
                Synch State</literal> has no standard  
                stereotypes defined.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Synch State</literal> has no standard tagged 
                values defined.</para>

                  </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.synch_state_property_toolbar">

          <title>Synch State Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                synch state, navigating immediately to the properties 
                tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete from Model</literal></term>

              <listitem>

                <para>This deletes the synch state from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.synch_state_property_fields">

          <title>Property Fields For Synch State</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the Synch state. By 
                convention Synch state names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

                <tip>

                  <para>Synch state names are not shown on the diagram 
                  and it is not usually necessary to give them a 
                  name.</para>

                </tip>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Container</literal></term>

              <listitem>

                <para>Text box. Shows the container of the Synch state. 
                This is the state hierarchy.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the composite state that contains this state (or the 
                top-level state that is the root of the state 
                containment hierarchy).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Bound</literal></term>

              <listitem>

                <para>Editable text box. Shows the Bound of the Synch 
                state. Which is a positive integer or the value 
                <emphasis>unlimited</emphasis>
                (represented by a &quot;*&quot;) specifying 
                the maximal count of the SynchState. The count is the 
                difference between the number of times the incoming and 
                outgoing transitions of the synch state are 
                fired.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Incoming</literal></term>

              <listitem>

                <para>Text area. Lists any incoming transitions for the 
                final state.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Outgoing Transitions</literal></term>

              <listitem>

                <para>Text area. Lists any outgoing transitions for the 
                final state.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                transition.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entcollab">

      <title>Collaboration Diagram Model Element Reference</title>

      <sect1>

        <title>Introduction</title>

        <para>This chapter describes each model element that can be created 
        within a collaboration diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

        <para>There is a close relationship between this material and 
        the properties tab of the details pane (see 
        <xref linkend="s1.ref.proptab"/>). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

        <caution>

          <para>Collaboration diagrams are not fully developed yet in 
          ArgoUML. Many aspects are not fully implemented, or may not 
          behave as expected. In particular there are some serious 
          problems with layout of the collaboration roles and 
          messages.</para>

        </caution>

        <para><xref linkend="fig.ref.collaboration_diagram"/> shows a 
        collaboration diagram with all possible model elements 
        displayed.</para>

        <figure id="fig.ref.collaboration_diagram">

          <title>Possible model elements on a collaboration diagram.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/collaboration_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <sect2>

          <title>Limitations Concerning Collaboration Diagrams in 
          ArgoUML</title>

          <para>The collaboration diagram is still rather 
          under-developed in ArgoUML. In particular there is no way to 
          show instance collaborations (based on objects and links) 
          rather than specification collaborations.</para>

          <para>The biggest difficulties are with the messages. There 
          are problems with the sequencing of the messages and their 
          display on the diagram. The actions behind them are purely 
          textual in implementation and there is no way to link them 
          back to their associated operations or signals.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Classifier Role</title>

        <para>A classifier role is a specialization of a classifier, 
        used to show its behavior in a particular context. In the UML 
        metamodel <literal>Classifier Role</literal> is a sub-class of 
        <literal>Classifier</literal>. Within a collaboration diagram 
        classifier roles may be used in one of two ways:</para>

        <itemizedlist>

          <listitem>

            <para>To represent the classifier in a particular 
            behavioral context (the <emphasis>specification 
            level</emphasis>); or</para>

          </listitem>

          <listitem>

            <para>to specify a particular instance of the classifier 
            (the <emphasis>instance level</emphasis>).</para>

          </listitem>

        </itemizedlist>

        <para>In this latter form, classifier roles are identical to 
        the instances used in sequence diagrams (see 
        <xref linkend="ch.ref.entseq"/>) and a collaboration diagram 
        shows the same information as the sequence diagram, but in a 
        different presentation.</para>

        <caution>

          <para>A collaboration diagram should not mix classifier roles 
          used as the specifier level and the instance level.</para>

        </caution>

        <para>A classifier role is represented on a sequence diagram in 
        ArgoUML as a plain box labeled with the classifier role name 
        (if any) and classifier, separated by a colon (:).</para>

        <caution>

          <para>A classifier role should properly also show object name 
          (if any) preceding the classifier role name and separated 
          from it by a slash (<literal>/</literal>). This allows 
          classifier roles in a specification level diagram to be 
          distinguished from instances in an instance level 
          diagram.</para>

          <para>ArgoUML does show the slash, but there is no way to 
          define the instances.</para>

        </caution>

        <sect2>

          <title>Classifier Role Details Tabs</title>

          <para>The details tabs that are active for classifier roles 
          are as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.classifier_role_property_toolbar"/>
                 and 
                <xref linkend="s2.ref.classifier_role_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, but with no contents.</para>

                <caution>

                  <para>A classifier role should not generate any code, 
                  so having this tab active is probably a 
                  mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Classifier Role</literal> has the following standard 
                tagged values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Classifier</literal>. Showing 
                    the permanence of the state information associated 
                    with the classifier role. Values <literal>
                    transitory</literal> (state is destroyed when the 
                    classifier role is destroyed) and <literal>
                    persistent</literal> (state is preserved when the 
                    classifier role is destroyed).</para>

                  </listitem>

                  <listitem>

                    <para><literal>semantics</literal> (from the 
                    superclass, <literal>Classifier</literal>). The 
                    value is a specification of the semantics of the 
                    classifier role.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    classifier role is redundant&mdash;it can be formally 
                    derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <note>

                      <para>Derived classifier roles still have their 
                      value in analysis and design to introduce useful 
                      names or concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.classifier_role_property_toolbar">

          <title>Classifier Role Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/reception.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New reception</literal></term>

              <listitem>

                <para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                classifier role, navigating immediately to the 
                properties tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the classifier role from the 
                model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an classifier role from the diagram, but keep it 
                  within the model, use the main menu <literal>Remove 
                  From Diagram</literal> (or press the Delete 
                  key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.classifier_role_property_fields">

          <title>Property Fields For Classifier Role</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the classifier role. By 
                convention classifier role names start with a lower 
                case letter and use bumpy caps to divide words within 
                the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Classifier Role is provided 
                by default with the UML standard stereotypes for a 
                classifier (<literal>metaclass</literal>, <literal>
                powertype</literal>, <literal>process</literal>, 
                <literal>thread</literal> and <literal>
                utility</literal>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Text box. Records the namespace for the 
                classifier role, which is always the containing 
                Collaboration.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the collaboration.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Multiplicity</literal></term>

              <listitem>

                <para>Editable drop down selector. The default value is 
                <literal>*</literal>, which means that there are any 
                number of instances of this classifierrole that play a 
                role in the collaboration. The drop down provides some 
                different multiplicities. E.g. <literal>1..1</literal> 
                would mean that only one instance plays a role in this 
                collaboration.</para>

                <para>ArgoUML does not restrict you to the predefined 
                ranges for multiplicity. You can edit this field 
                freely.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Base</literal></term>

              <listitem>

                <para>List. The names of the classifiers of which this 
                is a classifierrole. Button&nbsp;1 double click navigates to 
                the classifier. Button&nbsp;2 click gives a pop up menu with 
                the following entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Add</literal>. Allows adding or 
                    removeing classifiers to the list. To this end, a 
                    dialog box pops up, as shown in the figure 
                    below.</para>

                    <figure id="fig.ref.signal_add_classifierrole_base">

                      <title>The <quote>add context</quote> dialog 
                      box</title>

                      <screenshot><mediaobject><imageobject>
                      <imagedata align="center"
                       fileref="images/reference/signal_add_classifierrole_base.png"
                       format="PNG"/></imageobject></mediaobject></screenshot>
                    </figure>

                  </listitem>

                  <listitem>

                    <para><literal>Remove</literal>. Allows removeing 
                    classifiers to the list, without making use of the 
                    dialog box.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalizations</literal></term>

              <listitem>

                <para>Text area. Lists any classifierrole that 
                <emphasis>generalizes</emphasis> this 
                classifierrole.</para>

                <para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Specializations</literal></term>

              <listitem>

                <para>Text box. Lists any specialized classifierrole 
                (i.e. for which this classifierrole is a 
                generalization).</para>

                <para>button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Association End Role</literal></term>

              <listitem>

                <para>Text area. Lists the association-end roles that 
                are linked to this classifier role.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Available Contents</literal></term>

              <listitem>

                <para>Text area. Lists the subset of modelelements 
                contained in the base classifier which is used in the 
                collaboration.</para>

                <para>Button&nbsp;1 double click navigates to the 
                modelelement and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Available Features</literal></term>

              <listitem>

                <para>Text box. Lists the subset of features of the 
                base classifier which is used in the 
                collaboration.</para>

                <para>button&nbsp;1 double click navigates to the feature 
                and opens its property tab.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.association_role">

        <title>Association Role</title>

        <para>An association role is a specialization of an 
        association, used to describe an associations behavior in a 
        particular context. In the UML metamodel <literal>Association 
        Role</literal> is a sub-class of <literal>
        Association</literal>.</para>

        <para>An association role is represented on a collaboration 
        diagram in ArgoUML as a line connecting the instances 
        concerned. However on a sequence diagram the representation is 
        modified to reflect the type of action associated with the 
        stimulus carried on the link (see 
        <xref linkend="s1.ref.stimulus"/>).</para>

        <para>The association role is labeled with the association role 
        name (if any).</para>

        <para>

          An association role shows its name and the association name 
          according the following syntax:
          <blockquote>

            <para>/ AssociationRoleName : AssociationName</para>

          </blockquote>

          in the same manner as a classifier role. The more generic 
          syntax is:
          <blockquote>

            <para>I / R : C</para>

          </blockquote>

          which stands for an Instance named I originating from the 
          Classifier C playing the role R.
        </para>

        <sect2>

          <title>Association Role Details Tabs</title>

          <para>The details tabs that are active for association roles 
          are as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.association_role_property_toolbar"/>
                 and 
                <xref linkend="s2.ref.association_role_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                association role are downlighted, since they are 
                determined by what they connect.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, but with no contents.</para>

                <caution>

                  <para>An association role should not generate any 
                  code, so having this tab active is probably a 
                  mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                AssociationRole</literal> has the following standard 
                tagged values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Association</literal>). Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    association is redundant&mdash;it can be formally derived 
                    from other elements, or <literal>false</literal> 
                    meaning it cannot.</para>

                    <note>

                      <para>Derived association roles still have their 
                      value in analysis to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for an Association Role.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_role_property_toolbar">

          <title>Association Role Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the association role from the 
                model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an association role from the diagram, but keep it 
                  within the model, use the main menu <literal>Remove 
                  From Diagram</literal> (or press the Delete 
                  key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_role_property_fields">

          <title>Property Fields For Association Role</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the association role, which 
                is shown on the diagram. By convention association role 
                names start with a lower case letter and use bumpy caps 
                to divide words within the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Association role is provided 
                by default with the UML standard stereotype from the 
                superclass Association: <literal>
                implicit</literal>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype_class"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Text box. Records the namespace for the 
                association role. This is the package hierarchy.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the item showm.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Base</literal></term>

              <listitem>

                <para>Drop down selector. Records the association that 
                is the base for the association role.</para>

                <para>The drop down selector shows all associations 
                that exist between the classifiers that correspond with 
                the connected classifier roles.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Association End Roles</literal></term>

              <listitem>

                <para>Text area. Lists the ends of this association 
                role. An association role can have any number of ends, 
                but two is generally the only useful number (link 
                objects can led to a third end on instance level 
                diagrams, but this is not supported by ArgoUML). For 
                more on association end roles see 
                <xref linkend="s1.ref.association_end_role"/>.</para>

                <para>The names are listed, unless the association end 
                role has no name, then it is shown as <literal>(Unnamed 
                AssociationEndRole)</literal>.</para>

                <para>Button&nbsp;1 double click on an association end role 
                will navigate to that end.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Messages</literal></term>

              <listitem>

                <para>Text area. Lists the messages that are associated 
                with this association role.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.association_end_role">

        <title>Association End Role</title>

        <para>An association end role is a specialization of an 
        association end, used to describe an association end&apos;s 
        behavior in a particular context. In the UML metamodel <literal>
        AssociationEndRole</literal> is a sub-class of <literal>
        AssociationEnd</literal>.</para>

        <para>Two or more association end roles are associated with 
        each association role (see 
        <xref linkend="s1.ref.association_role"/>), although for 
        ArgoUML, the number of ends can only be two.</para>

        <para>The association end role has no direct access on any 
        diagram, although its stereotype, name and multiplicity is 
        shown at the relevant end of the parent association role (see 
        <xref linkend="fig.ref.collaboration_diagram"/>), and some of 
        its properties can be directly adjusted with button&nbsp;2 click. 
        Where shared or composite aggregation is selected for one 
        association end role, the opposite end is shown as a solid 
        diamond (composite aggregation) or hollow diamond (shared 
        aggregation).</para>

        <note>

          <para>ArgoUML does not currently (V0.18) support showing 
          qualifiers on the diagram, as described in the UML&nbsp;1.4 
          standard.</para>

        </note>

        <caution>

          <para>An association end role should have the same, or 
          <quote>stricter</quote> attribute values than its base 
          association end. In particular its navigability should be no 
          more general. There is as yet no critic in ArgoUML to offer 
          advice on this rule.</para>

        </caution>

        <sect2>

          <title>Association End Role Details Tabs</title>

          <para>The details tabs that are active for association end 
          roles are as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.association_end_role_property_toolbar"/>
                 and 
                <xref linkend="s2.ref.association_end_role_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab. There is no code generated for an 
                association end role.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                AssociationEndRole</literal> has the following standard 
                tagged values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the 
                    association end role is redundant&mdash;it can be 
                    formally derived from other elements, or <literal>
                    false</literal> meaning it cannot.</para>

                    <tip>

                      <para>Derived association end roles still have 
                      their value in analysis to introduce useful names 
                      or concepts, and in design to avoid 
                      re-computation. However the tag only makes sense 
                      for an association end role if it is also applied 
                      to the parent association role.</para>

                    </tip>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_end_role_property_toolbar">

          <title>Association End Role Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up to the association role to which this 
                end role belongs.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/association_end_role.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go Opposite</literal></term>

              <listitem>

                <para>This navigates to the other end of the 
                association role.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/attribute.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Qualifier</literal></term>

              <listitem>

                <indexterm><primary>Add Qualifier</primary></indexterm>
                <indexterm><primary>New Qualifier</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Qualifier</secondary></indexterm>
                <para>This creates a new Qualifier for the selected 
                association-end role, navigating immediately to the 
                properties tab for that qualifier.</para>

                <warning>

                  <para>Qualifiers are only partly supported in ArgoUML 
                  V0.18. Hence, activating this button creates a 
                  qualifier in the model, which is not shown on the 
                  diagram. Also, the properties panel for a qualifier 
                  equals that of a regular attribute.</para>

                </warning>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                association-end role, navigating immediately to the 
                properties tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the selected association-end from 
                the model.</para>

                <note>

                  <para>This button is downlighted for binary 
                  association roles, since an association needs at 
                  least <emphasis>two</emphasis> ends. Only for N-ary 
                  associations, this button is accessable, and deletes 
                  just one end from the association.</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.association_end_role_property_fields">

          <title>Property Fields For Association End Role</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the association end role, 
                which provides a <emphasis>role name</emphasis> for 
                this end of the association role. This role name can be 
                used for navigation, and in an implementation context, 
                provides a name by which the source end of an 
                association role can reference the target end.</para>

                <note>

                  <para>ArgoUML does not enforce any naming convention 
                  for association end roles.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Association end role is 
                provided by default with the UML standard stereotypes 
                for AssociationEndRole (<literal>association</literal>, 
                <literal>global</literal>, <literal>local</literal>, 
                <literal>parameter</literal>, <literal>
                self</literal>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Base</literal></term>

              <listitem>

                <para>Text field that shows the name of the 
                corresponding association end. Button&nbsp;1 double click 
                navigates to the association end.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>AssociationRole</literal></term>

              <listitem>

                <para>Text box. Records the parent association role for 
                this association end role. Button&nbsp;1 double click 
                navigates to the association role.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Type</literal></term>

              <listitem>

                <para>Drop down selector providing access to all 
                standard UML types provided by ArgoUML and all new 
                classes created within the current model.</para>

                <para>This is the type of the entity attached to this 
                end of the association role.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Multiplicity</literal></term>

              <listitem>

                <para>Editable drop down text entry. Allows to alter 
                the multiplicity of this association end role (with 
                respect to the other end), i.e. how many instances of 
                this end may be associated with an instance of the 
                other end. The multiplicity is shown on the diagram at 
                that end of the association role.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>All remaining properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.association_end_property_fields"/>
                . Since these are completely equal to the fields of an 
                association end, they are not repeated here.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1>

        <title>Message</title>

        <para>A message is a communication between two instances of an 
        association role on a specification level collaboration 
        diagram. It describes an action which will generate the 
        stimulus associated with the message. On a collaboration 
        diagram a message is associated with an association role. In 
        the UML metamodel <literal>Message</literal> is a sub-class of 
        <literal>ModelElement</literal>.</para>

        <para>The message is represented on a collaboration diagram in 
        ArgoUML by its sequence number separated by a colon from the 
        expression defining the associated action. It is accompagnied 
        by an arrow pointing in the direction of the communication, 
        i.e. the direction of the AssociationRole. By convention the 
        name of a message is not shown on the diagram. Instead the 
        diagram displays the message sequence number, either as an 
        integer or as a decimal number to show hierarchy.</para>

        <warning>

          <para>The current release of ArgoUML does not retaining 
          message positioning after reloading the project, i.e. as if 
          the positions were not stored in the project file.</para>

        </warning>

        <sect2>

          <title>Message Details Tabs</title>

          <para>The details tabs that are active for messages are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.message_property_toolbar"/> and 
                <xref linkend="s2.ref.message_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                message define the bounding box of the message. The 
                <literal>Line</literal> field defines the arrow color. 
                Increasing the <literal>Shadow</literal> size has an 
                esthetically questionable effect.</para>

                <caution>

                  <para>In the V0.18 release of ArgoUML changing the 
                  position of the message by editing the values of the 
                  <literal>Bounds</literal> field is possible, but will 
                  make only a temporary change to the position of the 
                  message, as described above.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, showing the message number and 
                action expression separated by a colon (when UML 1.4 is 
                selected in the drop-down).</para>

                <caution>

                  <para>A message probably should not generated any 
                  code of itself. That should be left to the action and 
                  possibly stimulus associated with it. In any case 
                  changes to this tab are ignored.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Message</literal> has the following standard tagged 
                values defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the message 
                    is redundant&mdash;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

                    <note>

                      <para>Derived messages still have their value in 
                      analysis and design to introduce useful names or 
                      concepts, and in design to avoid 
                      re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.message_property_toolbar">

          <title>Message Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/call_action.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Action</literal></term>

              <listitem>

                <indexterm><primary>Add Action</primary></indexterm>
                <indexterm><primary>New Action</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Action</secondary></indexterm>
                <para>This creates a new Action (see 
                <xref linkend="s1.ref.action_state"/>) for the selected 
                object, navigating immediately to the properties tab 
                for that action.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                message, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the message from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an message from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.message_property_fields">

          <title>Property Fields For Message</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of a message is usually its 
                sequence number, either an integer, or a decimal 
                (allowing alternative message hierarchies to be clearly 
                described). ArgoUML will supply an integer sequence 
                number by default.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Message has no stereotypes by 
                default in the UML standard.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Interaction</literal></term>

              <listitem>

                <para>Text box. Records the Interaction of which the 
                message is a part.</para>

                <para>Button&nbsp;1 double click on the entry will navigate 
                to the interaction.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Sender</literal></term>

              <listitem>

                <para>Text box. Identifies the classifier role which 
                sent this message.</para>

                <para>Button&nbsp;1 double click navigates to the sender 
                classifier role.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Receiver</literal></term>

              <listitem>

                <para>Text box. Identifies the classifier role which 
                receives this message.</para>

                <para>Button&nbsp;1 double click navigates to the receiver 
                classifier role.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Activator</literal></term>

              <listitem>

                <para>Drop down selector. Identifies the message which 
                invokes the behavior that causes the sending of this 
                message.</para>

                <para>Button&nbsp;1 click allows selecting the 
                message.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Action</literal></term>

              <listitem>

                <para>Text box. Lists the action (see 
                <xref linkend="s1.ref.action_state"/>) this message 
                invokes to raise a stimulus.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                action, button&nbsp;2 gives a pop up menu with the following 
                entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new 
                    action.</para>

                    <para>This item is downlighted if an action already 
                    exists.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Predecessors</literal></term>

              <listitem>

                <para>Text area. Identifies the messages, the 
                completion of whose execution enables this 
                message.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                message, button&nbsp;2 gives a pop up menu with one 
                entry.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Add</literal>. Opens a dialog box 
                    that allows to select any number of messages. See 
                    figure below.</para>

                    <para>This entry is grayed out when no messages 
                    exist.</para>

                    <figure id="fig.ref.message_add_predecessors">

                      <title>The <quote>add predecessors</quote> dialog 
                      box</title>

                      <screenshot><mediaobject><imageobject>
                      <imagedata align="center"
                       fileref="images/reference/message_add_predecessors.png"
                       format="PNG"/></imageobject></mediaobject></screenshot>
                    </figure>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entactiv">

      <title>Activity Diagram Model Element Reference</title>

      <sect1>

        <title>Introduction</title>

        <para>This chapter describes each model element that can be created 
        within an Activity diagram. Note that some sub-model elements of 
        model elements may not actually themselves appear on the 
        diagram.</para>

        <para>There is a close relationship between this material and 
        the Properties Tab of the Details Pane (see 
        <xref linkend="s1.ref.proptab"/>). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

        <para><xref linkend="fig.ref.activity_diagram"/> shows an 
        Activity Diagram with all possible model elements displayed.</para>

        <figure id="fig.ref.activity_diagram">

          <title>Possible model elements on an activity diagram.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/activity_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <sect2>

          <title>Limitations Concerning Activity Diagrams in 
          ArgoUML</title>

          <para>Activity diagrams are not fully developed yet in 
          ArgoUML. Some aspects are not fully implemented, or may not 
          behave as expected. In particular lacking are call states, 
          swim lanes, control icons (signals), sub-activities, synch 
          states. Interactions with other classifiers are provided by 
          an object-flow-state which is only partly implemented.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Action State</title>

        <para>An action state represents execution of an atomic action, 
        usually the invocation of an action. Within the UML metamodel, 
        <literal>ActionState</literal> is a sub-class of <literal>
        SimpleState</literal>. It is a specialized simple state that 
        only has an entry action, and with an implicit trigger as soon 
        as that action is completed.</para>

        <caution>

          <para>As a consequence any outgoing transitions from an 
          action state should not have explicit triggers defined 
          (ArgoUML will not currently check for this). They may have 
          guards to provide a choice where there is more than one 
          transition.</para>

        </caution>

        <note>

          <para>Unlike an ordinary state, an internal transition, an 
          exit action and a Do activity are not permitted for action 
          states.</para>

        </note>

        <para>An action state is represented on an activity diagram in 
        ArgoUML as a rectangle with rounded corners containing the name 
        of the action state.</para>

        <caution>

          <para>The UML standard specifies that the text shown in the 
          action state on the activity diagram should contain the 
          expression associated with the entry action - which is 
          implemented as such since ArgoUML V0.18. In past versions of 
          ArgoUML (0.16.1 and before), the diagram used to show the 
          action state name. Loading a project created by one of the 
          older versions, causes the project file to be converted to 
          the correct format to conform to the UML standard. This process is 
          designed to be transparent for the user, and the only 
          drawback is, that the activity diagram in the project will 
          not show correctly when reloaded in an old version of ArgoUML 
          again.</para>

        </caution>

        <sect2>

          <title>Action State Details Tabs</title>

          <para>The details tabs that are active for action states are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.action_state_property_toolbar"/> 
                and 
                <xref linkend="s2.ref.action_state_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The values for the bounds of the 
                action state define the bounding box of the action 
                state.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Standard tab that shows the stereotypes of the action 
                state. 
                In the UML metamodel, 
                there are no stereotypes defined 
                by default for a action state.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                ActionState</literal> has no standard tagged 
                values defined.</para>

                  </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.action_state_property_toolbar">

          <title>Action State Property ToolBar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the containment structure.
                Action states are contained by the 
                (otherwise invisible) top state.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                action state, navigating immediately to the properties 
                tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete from Model</literal></term>

              <listitem>

                <para>This deletes the action state from the 
                model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. It is not 
                  possible to delete an action state from the diagram, 
                  since that concept does not fit the UML 
                  standard.</para>

                  <para>Hence ArgoUML does also not show the <literal>
                  Add to Diagram</literal> pop-up menu for action 
                  states.</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.action_state_property_fields">

          <title>Property fields for action state</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the action state. By 
                convention action state names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Container</literal></term>

              <listitem>

                <para>Text box. The container of the action state.
                This shows the otherwise invisible composite state
                at the top of the containment hierarchy.
                </para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Entry-Action</literal></term>

              <listitem>

                <para>Text box. Shows the name of the action to be 
                invoked on entry to this action state. According the 
                UML standard, an Action State is obliged to have an 
                Entry-Action.</para>

                <para>Button&nbsp;1 double-click navigates to the shown 
                entry, button&nbsp;2 gives a pop up menu with two 
                entries.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>New</literal>. Add a new Entry 
                    action of a certain kind. This menu has the 
                    following 7 submenus to select the kind of action: 
                    Call Action, Create Action, Destroy Action, Return 
                    Action, Send Action, Terminate Action, 
                    Uninterpreted Action.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Delete From Model</literal>. Delete 
                    the Entry-Action.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>
            <varlistentry>

              <term><literal>Deferrable events</literal></term>

              <listitem>

                <para>Text box. The deferrable events of the action state. 
                <!-- This seems to be a bug. Should this be here? -->
                </para>

              </listitem>

            </varlistentry>
            
            <varlistentry>

              <term><literal>Incoming</literal></term>

              <listitem>

                <para>Text area. Lists the transitions that enter this 
                action state.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Outgoing</literal></term>

              <listitem>

                <para>Text area. Lists the transitions that leave this 
                action state.</para>

                <para>Button&nbsp;1 double-click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1>

        <title>Action</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.action_state"/>).</para>

      </sect1>

      <sect1>

        <title>Transition</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.transition_state"/>).</para>

        <caution>

          <para>Remember that action states do not have explicit 
          triggers. The transition is implicitly triggered as soon as 
          the entry event of the action state is complete. An explicit 
          trigger should not therefore be set.</para>

          <para>The current release of ArgoUML will not check that this 
          constraint is met.</para>

        </caution>

        <note>

          <para>Transitions to and from an ObjectFlowState are dashed, 
          to distinguish <emphasis>object flow</emphasis> from 
          <emphasis>control flow</emphasis>.</para>

        </note>

      </sect1>

      <sect1>

        <title>Guard</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.guard_state"/>).</para>

      </sect1>

      <sect1>

        <title>Initial State</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.initial_state"/>).</para>

      </sect1>

      <sect1>

        <title>Final State</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.final_state"/>).</para>

      </sect1>

      <sect1>

        <title>Junction (Decision)</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.junction_state"/>).</para>

      </sect1>

      <sect1>

        <title>Fork</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.fork_state"/>).</para>

      </sect1>

      <sect1>

        <title>Join</title>

        <para>This model element is described in the context of statechart 
        diagrams (see <xref linkend="s1.ref.join_state"/>).</para>

      </sect1>

      <sect1>

        <title>ObjectFlowState</title>

        <para>(To Be Written)</para>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entdeploy">

      <title>Deployment Diagram Model Element Reference</title>

      <sect1>

        <title>Introduction</title>

        <para>This chapter describes each model element that can be created 
        within a Deployment Diagram. Note that some sub-model elements of 
        model elements on the diagram may not actually themselves appear on 
        the diagram.</para>

        <para>There is a close relationship between this material and 
        the Properties Tab of the Details Pane (see 
        <xref linkend="s1.ref.proptab"/>). That section covers 
        Properties in general, in this chapter they are linked to 
        specific model elements.</para>

        <para>Within ArgoUML, the deployment diagram is used for both 
        component diagrams (i.e. without instances, showing static 
        dependencies of components) and deployment diagrams (showing 
        how instances of components are handled by instances of nodes 
        at run-time).</para>

        <caution>

          <para>Deployment diagrams are not fully developed yet in 
          ArgoUML. Some aspects are not fully implemented or may not 
          behave as expected. Notable omissions are the possibility to 
          draw new interfaces and proper stereotyping of the various 
          dependency relationships.</para>

        </caution>

        <para><xref linkend="fig.ref.component_diagram"/> shows a 
        component diagram with all possible model elements displayed.</para>

        <figure id="fig.ref.component_diagram">

          <title>Possible model elements on a component diagram.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/component_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <para><xref linkend="fig.ref.deployment_diagram"/> shows a 
        deployment diagram with all possible model elements displayed.</para>

        <figure id="fig.ref.deployment_diagram">

          <title>Possible model elements on a deployment diagram.</title>

          <screenshot><mediaobject><imageobject>
          <imagedata align="center"
           fileref="images/reference/deployment_diagram.gif"
           format="GIF"/></imageobject></mediaobject></screenshot>
        </figure>

        <sect2>

          <title>Limitations Concerning Deployment Diagrams in 
          ArgoUML</title>

          <para>The deployment diagram is generally well drawn, but 
          there are only a subset of the relationships that should be 
          shown available, which restricts the ability to show dynamic 
          behavior of deployed code.</para>

          <para>It is not possible to create new interfaces directly on 
          this diagram; they can only be added if they are first 
          created in the model (by drawing them on a class 
          diagram).</para>

          <para>It is an inconvenience that the alternative 
          representation of an interface (as a small circle) is not 
          supported.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Node</title>

        <para>A node is a run-time physical object on which components 
        may be deployed. In the UML metamodel it is a sub-class of 
        <literal>Classifier</literal>.</para>

        <para>A node is represented on a class diagram as a three 
        dimensional box, labeled with its name.</para>

        <sect2>

          <title>Node Details Tabs</title>

          <para>The details tabs that are active for nodes are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See <xref linkend="s2.ref.node_property_toolbar"/>
                 and <xref linkend="s2.ref.node_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the node on the 
                diagram.</para>

                <warning>

                  <para>Beware that in the 0.18 release of ArgoUML, the 
                  bounding box just refers to the front face of the 
                  cube. This means that the three dimensional top and 
                  side may be ignored, for example when determining the 
                  limits of a diagram for saving graphics.</para>

                </warning>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, but with no contents.</para>

                <caution>

                  <para>A node should not generate any code, so having 
                  this tab active is probably a mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab. In the UML metamodel, <literal>
                Node</literal> has the following standard tagged values 
                defined.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>persistence</literal> (from the 
                    superclass, <literal>Classifier</literal>). Values 
                    <literal>transitory</literal>, indicating state is 
                    destroyed when an instance is destroyed or <literal>
                    persistent</literal>, marking state is preserved 
                    when an instance is destroyed.</para>

                  </listitem>

                  <listitem>

                    <para><literal>semantics</literal> (from the 
                    superclass, <literal>Classifier</literal>). The 
                    value is a specification of the semantics of the 
                    node.</para>

                  </listitem>

                  <listitem>

                    <para><literal>derived</literal> (from the 
                    superclass, <literal>ModelElement</literal>). 
                    Values <literal>true</literal>, meaning the node is 
                    redundant&mdash;it can be formally derived from other 
                    elements, or <literal>false</literal> meaning it 
                    cannot.</para>

                    <note>

                      <para>Derived nodes still have their value in 
                      analysis to introduce useful names or concepts, 
                      and in design to avoid re-computation.</para>

                    </note>

                  </listitem>

                </itemizedlist>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.node_property_toolbar">

          <title>Node Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/reception.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New reception</literal></term>

              <listitem>

                <para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                node, navigating immediately to the properties tab for 
                that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the node from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a node from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.node_property_fields">

          <title>Property Fields For Node</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the node. The name of a 
                node has a leading capital letter, with words separated 
                by <quote>bumpy caps</quote>.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Node is a type of classifier, 
                and so it has the default stereotypes of a classifier 
                as defined in the UML standard. ArgoUML provides the 
                standard stereotypes for a classifier: <literal>
                metaclass</literal>, <literal>powertype</literal>, 
                <literal>process</literal>, <literal>thread</literal> 
                and <literal>utility</literal>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Allows altering the namespace 
                for the node. This is the package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <para>Check box, with entries <literal>
                abstract</literal>, <literal>leaf</literal> and 
                <literal>root</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>abstract</literal> is used to 
                    declare that this node cannot be instantiated, but 
                    must always be specialized. The name of an abstract 
                    node is displayed in italics on the diagram.</para>

                  </listitem>

                  <listitem>

                    <para><literal>leaf</literal> indicates that this 
                    node cannot be further specialized.</para>

                  </listitem>

                  <listitem>

                    <para><literal>root</literal> indicates the node 
                    can have no generalization.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalizations</literal></term>

              <listitem>

                <para>Text area. Lists any node that 
                <emphasis>generalizes</emphasis> this node.</para>

                <para>Button&nbsp;1 double click navigates to the 
                generalization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Specializations</literal></term>

              <listitem>

                <para>Text box. Lists any specialized node (i.e. for 
                which this node is a generalization.</para>

                <para>Button&nbsp;1 double click navigates to the 
                specialization and opens its property tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Residents</literal></term>

              <listitem>

                <para>Text box. Lists any residents (see 
                <xref linkend="s1.ref.component"/>) designed to be 
                deployed on this type of node.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.node_instance">

        <title>Node Instance</title>

        <para>A node instance is an instance of a node where component 
        instances (see <xref linkend="s1.ref.component_instance"/>) may 
        reside. In the UML metamodel <literal>NodeInstance</literal> is 
        a sub-class of <literal>Instance</literal> and is specifically 
        an instance that is derived from a node.</para>

        <para>A node instance is represented on a deployment diagram in 
        ArgoUML as a three dimensional box labeled with the node 
        instance name (if any) and node type, separated by a colon (
        <literal>:</literal>).</para>

        <tip>

          <para>It is the presence of the colon (<literal>:</literal>) 
          and the underlining of the name and type that distinguishes a 
          node instance from a node.</para>

        </tip>

        <sect2>

          <title>Node Instance Details Tabs</title>

          <para>The details tabs that are active for node instances are 
          as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.node_instance_property_toolbar"/> 
                and 
                <xref linkend="s2.ref.node_instance_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the node instance on 
                the diagram.</para>

                <warning>

                  <para>Beware that in the current release of ArgoUML, 
                  the bounding box just refers to the front face of the 
                  cube. This means that the three dimensional top and 
                  side may be ignored, for example when determining the 
                  limits of a diagram for saving graphics.</para>

                </warning>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, containing just the name of the 
                node instance.</para>

                <caution>

                  <para>A node instance should not generate any code, 
                  so having this tab active is probably a 
                  mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab.</para>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for an Instance.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.node_instance_property_toolbar">

          <title>Node Instance Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                node instance, navigating immediately to the properties 
                tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the node instance from the 
                model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  an node instance from the diagram, but keep it within 
                  the model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.node_instance_property_fields">

          <title>Property Fields For Node Instance</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the node instance. By 
                convention node instance names start with a lower case 
                letter and use bumpy caps to divide words within the 
                name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Node instance has no 
                stereotypes by default in the UML standard.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Records the namespace for the 
                node instance. This is the package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stimuli sent</literal></term>

              <listitem>

                <para>(To Be Written).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stimuli Received</literal></term>

              <listitem>

                <para>(To Be Written).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Residents</literal></term>

              <listitem>

                <para>Text box. Lists any residents (see 
                <xref linkend="s1.ref.component"/>) designed to be 
                deployed on this type of node.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Classifiers</literal></term>

              <listitem>

                <para>Text field. A Node instance type can be selected 
                here.</para>

                <caution>

                  <para>ArgoUML V0.18 lists many more items in the 
                  dropdown list then solely Nodes. Beware to select 
                  Nodes only.</para>

                </caution>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.component">

        <title>Component</title>

        <para>A component type represents a distributable piece of 
        implementation of a system, including software code (source, 
        binary, or executable) but also including business documents, 
        etc., in a human system. Components may be used to show 
        dependencies, such as compiler and run-time dependencies or 
        information dependencies in a human organization. In the UML 
        metamodel it is a sub-class of <literal>
        Classifier</literal>.</para>

        <para>A component is represented on a class diagram as a box 
        with two small rectangles protruding from its left side, 
        labeled with its name.</para>

        <sect2>

          <title>Component Details Tabs</title>

          <para>The details tabs that are active for components are as 
          follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.component_property_toolbar"/> and 
                <xref linkend="s2.ref.component_property_fields"/> 
                below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the component on the 
                diagram.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, but with no contents.</para>

                <caution>

                  <para>A component should not generate any code, so 
                  having this tab active is probably a mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab.</para>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.component_property_toolbar">

          <title>Component Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/reception.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New reception</literal></term>

              <listitem>

                <para>This creates a new reception, navigating 
                immediately to the properties tab for that 
                reception.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                component, navigating immediately to the properties tab 
                for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the component from the model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a component from the diagram, but keep it within the 
                  model, use the main menu <literal>Remove From 
                  Diagram</literal> (or press the Delete key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.component_property_fields">

          <title>Property Fields For Component</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the component. The name of 
                a component has a leading capital letter, with words 
                separated by <quote>bumpy caps</quote>.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Component is provided by 
                default with the UML standard stereotypes <literal>
                document</literal>, <literal>executable</literal>, 
                <literal>file</literal>, <literal>library</literal> and 
                <literal>table</literal>. ArgoUML also provides the 
                standard Classifier stereotypes, <literal>
                metaclass</literal>, <literal>powertype</literal>, 
                <literal>process</literal>, <literal>thread</literal> 
                and <literal>utility</literal>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Records and allows altering 
                the namespace for the component. This is the package 
                hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Modifiers</literal></term>

              <listitem>

                <para>Check box, with entries <literal>
                abstract</literal>, <literal>leaf</literal> and 
                <literal>root</literal>.</para>

                <itemizedlist>

                  <listitem>

                    <para><literal>Abstract</literal> is used to 
                    declare that this component cannot be instantiated, 
                    but must always be specialized.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Leaf</literal> indicates that this 
                    component cannot be further specialized.</para>

                  </listitem>

                  <listitem>

                    <para><literal>Root</literal> indicates the node 
                    can have no generalization.</para>

                  </listitem>

                </itemizedlist>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Generalizations</literal></term>

              <listitem>

                <para>Text box. Lists any component that generalizes 
                this component.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Specializations</literal></term>

              <listitem>

                <para>Text area. Lists any derived components, i.e 
                those for which this component is a 
                generalization.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Client Dependencies</literal></term>

              <listitem>

                <para>Text area. Lists outgoing dependencies. Button&nbsp;1 
                double click navigates to the dependency.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Supplier Dependencies</literal></term>

              <listitem>

                <para>Text area. Lists incoming dependencies. Button&nbsp;1 
                double click navigates to the dependency.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Residents</literal></term>

              <listitem>

                <para>Text box. Lists any residents (see 
                <xref linkend="s1.ref.component"/>) designed to be 
                deployed on this type of node.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1 id="s1.ref.component_instance">

        <title>Component Instance</title>

        <para>A component instance is an instance of a component (see 
        <xref linkend="s1.ref.component"/>) which may reside on a node 
        instance (see <xref linkend="s1.ref.node_instance"/>). In the 
        UML metamodel <literal>ComponentInstance</literal> is a 
        sub-class of <literal>Instance</literal> and is specifically an 
        instance that is derived from a component.</para>

        <para>A component is represented on a class diagram as a box 
        with two small rectangles protruding from its left side, 
        labeled with its name.</para>

        <para>A component instance is represented on a sequence diagram 
        in ArgoUML as a box with two small rectangles protruding from 
        its left side labeled with the component instance name (if any) 
        and component type, separated by a colon (
        <literal>:</literal>).</para>

        <tip>

          <para>It is the presence of the colon (<literal>:</literal>) 
          and the underlining of the name and type that distinguishes a 
          component instance from a component.</para>

        </tip>

        <sect2>

          <title>Component Instance Details Tabs</title>

          <para>The details tabs that are active for component 
          instances are as follows.</para>

          <variablelist>

            <varlistentry>

              <term><literal>ToDoItem</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Properties</literal></term>

              <listitem>

                <para>See 
                <xref linkend="s2.ref.component_instance_property_toolbar"/>
                 and 
                <xref linkend="s2.ref.component_instance_property_fields"/>
                 below.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Documentation</literal></term>

              <listitem>

                <para>Standard tab.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Presentation</literal></term>

              <listitem>

                <para>Standard tab. The <literal>Bounds:</literal> 
                field defines the bounding box for the component on the 
                diagram.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Source</literal></term>

              <listitem>

                <para>Standard tab, containing just the name of the 
                component instance.</para>

                <caution>

                  <para>A component instance should not generate any 
                  code, so having this tab active is probably a 
                  mistake.</para>

                </caution>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Tagged Values</literal></term>

              <listitem>

                <para>Standard tab.</para>

                <note>

                  <para>The UML <literal>Element</literal> metaclass 
                  from which all other model elements are derived includes 
                  the tagged element <literal>documentation</literal> 
                  which is handled by the <emphasis>documentation 
                  tab</emphasis> under ArgoUML</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Checklist</literal></term>

              <listitem>

                <para>Standard tab for an Instance.</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.component_instance_property_toolbar">

          <title>Component Instance Property Toolbar</title>

          <variablelist>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/navigate_up.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Go up</literal></term>

              <listitem>

                <para>Navigate up through the package structure.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/stereotype.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>New Stereotype</literal></term>

              <listitem>

                <indexterm><primary>Add Stereotype</primary></indexterm>
                <indexterm><primary>New Stereotype</primary></indexterm>
                <indexterm><primary>Create 
                New</primary><secondary>Stereotype</secondary></indexterm>
                <para>This creates a new Stereotype (see 
                <xref linkend="s1.ref.stereotype"/>) for the selected 
                component instance, navigating immediately to the 
                properties tab for that stereotype.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><guiicon><inlinemediaobject><imageobject>
              <imagedata align="center"
               fileref="images/icons/property_delete.gif"
               format="GIF"/></imageobject></inlinemediaobject></guiicon> 
              <literal>Delete</literal></term>

              <listitem>

                <para>This deletes the component instance from the 
                model</para>

                <warning>

                  <para>This is a deletion from the model 
                  <emphasis>not</emphasis> just the diagram. To delete 
                  a component instance from the diagram, but keep it 
                  within the model, use the main menu <literal>Remove 
                  From Diagram</literal> (or press the Delete 
                  key).</para>

                </warning>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

        <sect2 id="s2.ref.component_instance_property_fields">

          <title>Property Fields For Component Instance</title>

          <variablelist>

            <varlistentry>

              <term><literal>Name</literal></term>

              <listitem>

                <para>Text box. The name of the component instance. By 
                convention component instance names start with a lower 
                case letter and use bumpy caps to divide words within 
                the name.</para>

                <note>

                  <para>ArgoUML does not enforce this naming 
                  convention.</para>

                </note>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stereotype</literal></term>

              <listitem>

                <para>Drop down selector. Component instance has no 
                stereotypes by default in the UML standard.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Navigate Stereotype</literal></term>

              <listitem>

                <para><guiicon><inlinemediaobject><imageobject>
                <imagedata align="center"
                 fileref="images/icons/navigate_stereotype.gif"
                 format="GIF"/></imageobject></inlinemediaobject></guiicon> 
                icon. If a stereotype has been selected, this will 
                navigate to the stereotype property panel (see 
                <xref linkend="s1.ref.stereotype"/>).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Namespace</literal></term>

              <listitem>

                <para>Drop down selector. Records and allows to change 
                the namespace for the component instance. This is the 
                package hierarchy.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stimuli sent</literal></term>

              <listitem>

                <para>(To Be Written).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Stimuli Received</literal></term>

              <listitem>

                <para>(To Be Written).</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Residents</literal></term>

              <listitem>

                <para>Text box. Lists any residents (see 
                <xref linkend="s1.ref.component"/>) designed to be 
                deployed on this component.</para>

                <para>Button&nbsp;1 double click navigates to the selected 
                entry.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>Classifiers</literal></term>

              <listitem>

                <para>Drop down selector. A Component instance type can 
                be selected here.</para>

                <caution>

                  <para>ArgoUML V0.18 lists many more items in the 
                  dropdown list then solely Components. Beware to 
                  select Components only.</para>

                </caution>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect2>

      </sect1>

      <sect1>

        <title>Dependency</title>

        <para>A key part of any component or deployment diagram is to 
        show dependencies. For details see 
        <xref linkend="s1.ref.dependency_class"/>.</para>

        <caution>

          <para>UML relies on stereotyping of dependencies on component 
          and deployment diagrams to characterize the types of 
          relationship. In the current release of ArgoUML there are 
          limitations in the implementation of dependencies which limit 
          this functionality.</para>

        </caution>

      </sect1>

      <sect1>

        <title>Class</title>

        <para>A component diagram may show the key internal structure 
        of components, including classes within the component. For 
        details see <xref linkend="s1.ref.class_class"/>.</para>

        <caution>

          <para>Classes can only be added to a component diagram if 
          they already exist in the model (by selecting them in the 
          explorer and executing the &quot;Add to diagram&quot; 
          button&nbsp;2 command). There is no way to create a new class on a 
          component diagram.</para>

        </caution>

      </sect1>

      <sect1>

        <title>Interface</title>

        <para>A component or deployment diagram may show components or 
        component instances which implement interfaces. For details see 
        <xref linkend="s1.ref.interface_class"/>.</para>

        <caution>

          <para>The V0.18 release of ArgoUML uses the same 
          representation of an interface as a class diagram. The UML 
          standard suggests that an interface on a component or 
          deployment diagram should just be shown as a small open 
          circle, connected to the component which realizes that 
          interface.</para>

        </caution>

        <warning>

          <para>There is no way to show the linking of an interface to 
          a component or component instance in the V0.18 release of 
          ArgoUML.</para>

        </warning>

      </sect1>

      <sect1>

        <title>Association</title>

        <para>Components may be associated to each other. For details 
        about associations, see 
        <xref linkend="s1.ref.association_class"/>.</para>

        <para>Where classes or interfaces are shown within components 
        on component diagrams, they may be shown linked by 
        associations.</para>

      </sect1>

      <sect1>

        <title>Object</title>

        <para>Just as components may show the classifiers that make up 
        their internal structure, component instances on deployment 
        diagrams may show the classifier instances that make up their 
        internal structure. In practice the only instance that is of 
        use is an object (an instance of a class). For details see 
        <xref linkend="s1.ref.object_sequence"/>.</para>

      </sect1>

      <sect1>

        <title>Link</title>

        <para>Where objects (Node Instances or Class Instances) are 
        shown within component instances on deployment diagrams, their 
        inter-relationships may be shown as links (instances of an 
        association). See <xref linkend="s1.ref.link_sequence"/> for 
        details.</para>

      </sect1>

    </chapter>

    <chapter id="ch.ref.entbuiltin">

      <title>Built In DataTypes, Classes, Interfaces and 
      Stereotypes</title>

      <sect1>

        <title>Introduction</title>

        <para>This chapter describes the datatypes, classes, interfaces 
        and stereotypes, which by default, are built in to 
        ArgoUML.</para>

        <para>Datatypes, classes and interfaces are generally available 
        for use anywhere a class may be selected in the properties tab. 
        The most common use is for return type and parameter types in 
        method signatures.</para>

        <sect2>

          <title>Package Structure</title>

          <para>ArgoUML datatypes, classes and interfaces are 
          effectively organized as a hierarchy beneath the overall 
          model itself. They are grouped in four packages, <literal>
          lang</literal>, <literal>math</literal>, <literal>
          net</literal> and <literal>util</literal>, themselves 
          subpackages of <literal>java</literal>, which is a subpackage 
          of the model itself. <xref linkend="fig.ref.entclasshier"/> 
          shows this structure.</para>

          <figure id="fig.ref.entclasshier">

            <title>Hierarchy of datatypes, classes and interfaces 
            within ArgoUML</title>

            <screenshot><mediaobject><imageobject>
            <imagedata align="center"
             fileref="images/reference/entclasshier.gif"
             format="GIF"/></imageobject></mediaobject></screenshot>
          </figure>

        </sect2>

        <sect2>

          <title>Exposure in the model</title>

          <para>You will not find build-in DataTypes, Classes, and 
          Interfaces exposed within the model by default (i.e. they are 
          not present in the explorer). However, once you select one of 
          the built-in DataTypes, Classes, or Interfaces (in the 
          &quot;Type&quot; combo-box on the property sheet of a 
          parameter of an operation of a class), then it becomes 
          visible: you will find that the DataType, Class, or Interface 
          has appeared in the model, in its correct package stucture 
          for the latter 2.</para>

        </sect2>

      </sect1>

      <sect1>

        <title>Built In Datatypes</title>

        <para>These are the built in atomic types. You can change them 
        if you wish. However this is not good practice.</para>

        <para>All these can be found in the <literal>
        java.lang</literal> subpackage of the main model.</para>

        <caution>

          <para>You should be aware that these are Java datatypes. They 
          are not mandated by the UML standard.</para>

        </caution>

        <para>These are the standard datatypes. For their definition 
        refer to the Java standard.</para>

        <itemizedlist>

          <listitem>

            <para><literal>boolean</literal></para>

          </listitem>

          <listitem>

            <para><literal>byte</literal></para>

          </listitem>

          <listitem>

            <para><literal>char</literal></para>

          </listitem>

          <listitem>

            <para><literal>double</literal></para>

          </listitem>

          <listitem>

            <para><literal>float</literal></para>

          </listitem>

          <listitem>

            <para><literal>int</literal></para>

          </listitem>

          <listitem>

            <para><literal>long</literal></para>

          </listitem>

          <listitem>

            <para><literal>short</literal></para>

          </listitem>

          <listitem>

            <para><literal>void</literal></para>

          </listitem>

        </itemizedlist>

        <note>

          <para><literal>void</literal> is not strictly speaking a 
          type, but the absence of type. ArgoUML knows about void and 
          allows it as an option where a datatype may be 
          selected.</para>

        </note>

      </sect1>

      <sect1>

        <title>Built In Classes</title>

        <para>These are the common classes, corresponding to classes 
        defined within the standard Java environment. It is up to you 
        if you wish to change them.</para>

        <para>These are found in all four subpackages of the <literal>
        java</literal> subpackage.</para>

        <para>For a definition of these classes see the Java language 
        and library definitions.</para>

        <sect2>

          <title>Built In Classes From <literal>
          java.lang</literal></title>

          <para>These are the classes within the <literal>
          java.lang</literal> package.</para>

          <itemizedlist>

            <listitem>

              <para><literal>Boolean</literal></para>

            </listitem>

            <listitem>

              <para><literal>Byte</literal></para>

            </listitem>

            <listitem>

              <para><literal>Char</literal></para>

            </listitem>

            <listitem>

              <para><literal>Double</literal></para>

            </listitem>

            <listitem>

              <para><literal>Float</literal></para>

            </listitem>

            <listitem>

              <para><literal>Integer</literal></para>

            </listitem>

            <listitem>

              <para><literal>Long</literal></para>

            </listitem>

            <listitem>

              <para><literal>Object</literal></para>

            </listitem>

            <listitem>

              <para><literal>Short</literal></para>

            </listitem>

            <listitem>

              <para><literal>String</literal></para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Built In Classes From <literal>
          java.math</literal></title>

          <para>These are the classes within the <literal>
          java.math</literal> package.</para>

          <itemizedlist>

            <listitem>

              <para><literal>Big Decimal</literal></para>

            </listitem>

            <listitem>

              <para><literal>Big Integer</literal></para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Built In Classes From <literal>
          java.net</literal></title>

          <para>These are the classes within the <literal>
          java.net</literal> package.</para>

          <itemizedlist>

            <listitem>

              <para><literal>URL</literal></para>

            </listitem>

          </itemizedlist>

        </sect2>

        <sect2>

          <title>Built In Classes From <literal>
          java.util</literal></title>

          <para>These are the classes within the <literal>
          java.util</literal> package.</para>

          <itemizedlist>

            <listitem>

              <para><literal>Vector</literal></para>

            </listitem>

            <listitem>

              <para><literal>Date</literal></para>

            </listitem>

            <listitem>

              <para><literal>Time</literal></para>

            </listitem>

          </itemizedlist>

        </sect2>

      </sect1>

      <sect1>

        <title>Built In Interfaces</title>

        <para>These are some useful interfaces, corresponding to 
        classes defined within the standard Java environment. 
        Interfaces have many of the properties of classes (like all 
        types) and you can change them if you wish.</para>

        <para>All these can be found in the <literal>
        java.util</literal> subpackage of the main model.</para>

        <para>These are the interfaces defined within the <literal>
        java.util</literal> package. For their definition consult the 
        Java language and library references.</para>

        <itemizedlist>

          <listitem>

            <para><literal>Collection</literal></para>

          </listitem>

          <listitem>

            <para><literal>Iterator</literal></para>

          </listitem>

          <listitem>

            <para><literal>List</literal></para>

          </listitem>

          <listitem>

            <para><literal>Set</literal></para>

          </listitem>

          <listitem>

            <para><literal>Sorted Set</literal></para>

          </listitem>

        </itemizedlist>

      </sect1>

      <sect1>

        <title>Built In Stereotypes</title>

        <para>UML 1.4 defines a large number of stereotypes 
        of which most are 
        supported by ArgoUML.</para>

        <caution>

          <para>Not all stereotypes defined by UML&nbsp;1.4 appear in 
          ArgoUML V0.20 due to 
          the fact that they were not yet updated 
          from previous versions of ArgoUML 
          that only supported UML 1.3.
          Also, there are
          limitations in the current implementation of 
          some base elements. The table below lists all stereotypes defined 
          in UML 1.4 and if they are supported in 
          ArgoUML or not.</para>

        </caution>

        <caution>

          <para>The UML&nbsp;1.4 standard also specifies many stereotypes in 
          the chapters <quote>Example Profiles</quote>: one for 
          <quote>Software Development</quote> and one for 
          <quote>Business Modeling</quote>. Due to the specialized 
          nature of these profiles, implementation in ArgoUML is 
          postponed until a yet undetermined moment.</para>

        </caution>

        <table frame="all">

          <title>Stereotypes defined in UML 1.4 and ArgoUML</title>

          <tgroup cols="3">

            <thead>

              <row><entry><para><emphasis>StereoType</emphasis></para></entry><entry><para><emphasis>Base 
              Element</emphasis></para></entry><entry><para><emphasis>ArgoUML 
              support</emphasis></para></entry></row>

            </thead>

            <tbody>

              <row><entry><para>access</para></entry><entry><para>Permission</para></entry><entry><para>yes</para></entry></row>
              <row><entry><para>appliedProfile</para></entry><entry><para>Package</para></entry><entry><para>no</para></entry></row>
              <row><entry><para>association</para></entry><entry><para>AssociationEnd</para></entry><entry><para>yes</para></entry></row>
              <row><entry><para>auxiliary</para></entry><entry><para>Class</para></entry><entry><para>no</para></entry></row>
              <row><entry><para>become</para></entry><entry><para>Flow</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>call</para></entry><entry><para>Usage</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>copy</para></entry><entry><para>Flow</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>create</para></entry><entry><para>BehavioralFeature</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>create</para></entry><entry><para>CallEvent</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>create</para></entry><entry><para>Usage</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>derive</para></entry><entry><para>Abstraction</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>destroy</para></entry><entry><para>BehavioralFeature</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>destroy</para></entry><entry><para>CallEvent</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>document</para></entry><entry><para>Abstraction</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>executable</para></entry><entry><para>Abstraction</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>facade</para></entry><entry><para>Package</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>file</para></entry><entry><para>Abstraction</para></entry><entry><para>no</para></entry></row>
              <row><entry><para>focus</para></entry><entry><para>Class</para></entry><entry><para>no</para></entry></row>
              <row><entry><para>framework</para></entry><entry><para>Package</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>friend</para></entry><entry><para>Permission</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>global</para></entry><entry><para>AssociationEnd</para></entry><entry><para>yes</para></entry></row>
              <row><entry><para>implementation</para></entry><entry><para>Class</para></entry><entry><para>no</para></entry></row>
              <row><entry><para>implementation</para></entry><entry><para>Generalization</para></entry><entry><para>yes</para></entry></row>

              
              <row><entry><para>implicit</para></entry><entry><para>Association</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>import</para></entry><entry><para>Permission</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>instantiate</para></entry><entry><para>Usage</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>invariant</para></entry><entry><para>Constraint</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>library</para></entry><entry><para>Abstraction</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>local</para></entry><entry><para>AssociationEnd</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>metaclass</para></entry><entry><para>Class</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>metamodel</para></entry><entry><para>Package</para></entry><entry><para>yes</para></entry></row>
              <row><entry><para>modelLibrary</para></entry><entry><para>Package</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>parameter</para></entry><entry><para>AssociationEnd</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>postcondition</para></entry><entry><para>Constraint</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>powertype</para></entry><entry><para>Class</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>precondition</para></entry><entry><para>Constraint</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>process</para></entry><entry><para>Classifier</para></entry><entry><para>yes</para></entry></row>
              <row><entry><para>profile</para></entry><entry><para>Package</para></entry><entry><para>no</para></entry></row>
              
              <row><entry><para>realize</para></entry><entry><para>Abstraction</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>refine</para></entry><entry><para>Abstraction</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>requirement</para></entry><entry><para>Comment</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>responsibility</para></entry><entry><para>Comment</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>self</para></entry><entry><para>AssociationEnd</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>send</para></entry><entry><para>Usage</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>signalflow</para></entry><entry><para>ObjectFlowState</para></entry><entry><para>yes</para></entry></row>
              <row><entry><para>source</para></entry><entry><para>Abstraction</para></entry><entry><para>no</para></entry></row>
              <row><entry><para>stateInvariant</para></entry><entry><para>Constraint</para></entry><entry><para>no</para></entry></row>
              
              <row><entry><para>stub</para></entry><entry><para>Package</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>systemModel</para></entry><entry><para>Package</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>table</para></entry><entry><para>Abstraction</para></entry><entry><para>no</para></entry></row>

              <row><entry><para>thread</para></entry><entry><para>Classifier</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>topLevel</para></entry><entry><para>Package</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>trace</para></entry><entry><para>Abstraction</para></entry><entry><para>yes</para></entry></row>

              <row><entry><para>type</para></entry><entry><para>Class</para></entry><entry><para>yes</para></entry></row>


            </tbody>

          </tgroup>

        </table>

      </sect1>

    </chapter>

  </part>

  <glossary id="glossary">

    <title>Glossary</title>

    <glossdiv>

      <title>A</title>

      <glossentry id="gl.activitydiag">

        <glossterm>Activity Diagram</glossterm>

        <glossdef>

          <indexterm><primary>Activity Diagram</primary></indexterm>
          <indexterm>
          <primary>Diagram</primary><secondary>Activity</secondary></indexterm>
          <para>A UML diagram capturing the dynamic behavior of a 
          system or sub-system. See 
          <xref linkend="s1.umlactivitydiags"/> for more 
          information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.action">

        <glossterm>Action</glossterm>

        <glossdef>

          <indexterm><primary>Action</primary></indexterm>
          <para>Behavior associated with <emphasis>States</emphasis> or 
          <emphasis>Transitions</emphasis> in <emphasis>State 
          Diagram</emphasis>. These actions are invocations of 
          <emphasis>Methods</emphasis> and appear on 
          <emphasis>Sequence</emphasis> and <emphasis>Collaboration 
          Diagrams</emphasis>.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.actor">

        <glossterm>Actor</glossterm>

        <glossdef>

          <indexterm><primary>Actor</primary></indexterm>
          <para>A representation of an agent (animate or inanimate) on 
          a <emphasis>Use Case Diagram</emphasis> external to the 
          system being designed.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.analysis">

        <glossterm>Analysis</glossterm>

        <glossdef>

          <indexterm><primary>Analysis</primary></indexterm>
          <para>Analysis is the process of taking the 
          <quote>customer</quote> requirements and re-casting them in 
          the language of, and from the perspective of, a putative 
          solution.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.assocclass">

        <glossterm>Association Class</glossterm>

        <glossdef>

          <indexterm><primary>Association Class</primary></indexterm>
          <para>A class that characterizes the association between two 
          other classes.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.association">

        <glossterm>Association</glossterm>

        <glossdef>

          <indexterm><primary>Association</primary></indexterm>
          <para>A relationship between two classes in a Class Diagram 
          or between Use Cases or Use Cases and Actors in a Use Case 
          Diagram.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.attribute">

        <glossterm>Attribute (of a Class or Object)</glossterm>

        <glossdef>

          <indexterm><primary>Attribute</primary><secondary>of a 
          Class</secondary></indexterm>
          <indexterm><primary>Attribute</primary><secondary>of an 
          Object</secondary></indexterm>
          <para>An attribute of a class or object is a specification of 
          a data element encapsulated by that object.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>C</title>

      <glossentry id="gl.case">

        <glossterm>CASE</glossterm>

        <glossdef>

          <indexterm><primary>CASE</primary></indexterm>
          <para>Computer Aided Software Engineering.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.class">

        <glossterm>Class</glossterm>

        <glossdef>

          <indexterm><primary>Class</primary></indexterm>
          <para>The encapsulation of the data associated with a 
          model element (its <emphasis>attributes</emphasis>) and the 
          actions associated with the model element (its 
          <emphasis>methods</emphasis>).</para>

          <para>A class specifies the characteristics of a model element. 
          An <emphasis>object</emphasis> represents an instance of the 
          model element.</para>

          <para>Classes and objects in UML are represented on 
          <emphasis>Activity Diagrams</emphasis>, <emphasis>Class 
          Diagrams</emphasis>, <emphasis>Collaboration 
          Diagrams</emphasis> and <emphasis>Sequence 
          Diagrams</emphasis>.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.classdiag">

        <glossterm>Class Diagram</glossterm>

        <glossdef>

          <indexterm><primary>Class Diagram</primary></indexterm>
          <indexterm>
          <primary>Diagram</primary><secondary>Class</secondary></indexterm>
          <para>A UML Diagram showing the structural relationship 
          between classes. See <xref linkend="s1.umlclassdiags"/> for 
          more information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.collaboration">

        <glossterm>Collaboration</glossterm>

        <glossdef>

          <indexterm><primary>Collaboration</primary></indexterm>
          <para>
            The process whereby several objects cooperate to provide some
            higher level behavior that is greater than the sum of the
            behaviors of the objects.
          </para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.collabdiag">

        <glossterm>Collaboration Diagram</glossterm>

        <glossdef>

          <indexterm><primary>Collaboration 
          Diagram</primary></indexterm>
          <indexterm>
          <primary>Diagram</primary><secondary>Collaboration</secondary></indexterm>
          <para>A UML Diagram showing the dynamic behavior as messages 
          are passed between objects. Equivalent to a 
          <emphasis>Sequence Diagram</emphasis>. Which representation 
          is appropriate depends on the problem under 
          consideration.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.collaborator">

        <glossterm>Collaborator</glossterm>

        <glossdef>

          <indexterm><primary>Collaborator</primary></indexterm>
          <para>
            An object that participates in a Collaboration.
          </para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.comprehension">

        <glossterm>Comprehension and Problem Solving</glossterm>

        <glossdef>

          <indexterm><primary>Comprehension</primary></indexterm>
          <indexterm><primary>Problem Solving</primary></indexterm>
          <para>A design visualization theory within cognitive 
          psychology. The theory notes that designers must bridge a gap 
          between their mental model of the problem or situation and 
          the formal model of a solution or system.</para>

          <para>This theory suggests that programmers will benefit 
          from:</para>

          <orderedlist>

            <listitem>

              <para>Multiple representations such as program syntactic 
              decomposition, state transitions, control flow, and data 
              flow. These allow the programmer to better identify 
              elements and relationships in the problem and solution 
              and thus more readily create a mapping between their 
              situation models and working system models.</para>

            </listitem>

            <listitem>

              <para>Familiar aspects of a situation model, which 
              improve designers&apos; abilities to formulate 
              solutions.</para>

            </listitem>

          </orderedlist>

        </glossdef>

      </glossentry>

      <glossentry id="gl.conceptclassdiag">

        <glossterm>Concept Class Diagram</glossterm>

        <glossdef>

          <indexterm><primary>Concept Class 
          Diagram</primary></indexterm>
          <para>A Class Diagram constructed during the Analysis Phase 
          to show the main structural components of the problem 
          identified in the Requirements Phase. See 
          <xref linkend="ch.tut.analysis"/> for more information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.critic">

        <glossterm>Critic</glossterm>

        <glossdef>

          <indexterm><primary>Critic</primary></indexterm>
          <para>A process within ArgoUML that provides suggestions as 
          to how the design might be improved. Suggestions are based on 
          principles within three theories of cognitive psychology, 
          <emphasis>reflection-in action</emphasis>, 
          <emphasis>opportunistic design</emphasis> and 
          <emphasis>comprehension and problem solving</emphasis>.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>E</title>

      <glossentry id="gl.extends">

        <glossterm>Extend Relationship</glossterm>

        <glossdef>

          <indexterm><primary>Extend Relationship</primary></indexterm>
          <indexterm>
          <primary>Relationship</primary><secondary>Extend</secondary></indexterm>
          <para>A relationship between two Use Cases, where the 
          <emphasis>extended</emphasis> Use Case describes a special 
          variant of the <emphasis>extending</emphasis> Use Case.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>G</title>

      <glossentry id="gl.generalization">

        <glossterm>Generalization Relationship</glossterm>

        <glossdef>

          <indexterm><primary>Generalization 
          Relationship</primary></indexterm>
          <indexterm>
          <primary>Relationship</primary><secondary>Generalization</secondary></indexterm>
          <para>A relationship between one 
          <emphasis>generalizing</emphasis> Use Cases and one or more 
          <emphasis>generalized</emphasis> Use Cases, where the 
          <emphasis>generalized</emphasis> Use Cases are particular 
          examples of the <emphasis>generalizing</emphasis> Use 
          Case.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.gui">

        <glossterm>GUI</glossterm>

        <glossdef>

          <indexterm><primary>GUI</primary></indexterm>
          <para>Graphical User Interface.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>H</title>

      <glossentry id="gl.hierstatediag">

        <glossterm>Hierarchical Statechart Diagram</glossterm>

        <glossdef>

          <indexterm><primary>Hierarchical Statechart 
          Diagram</primary></indexterm>
          <indexterm><primary>Statechart Diagram, 
          Hierarchical</primary></indexterm>
          <para>A <emphasis>Statechart Diagram</emphasis> that contains 
          subsidiary statechart diagrams within individual 
          <emphasis>States</emphasis>.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>I</title>

      <glossentry id="gl.includes">

        <glossterm>Include Relationship</glossterm>

        <glossdef>

          <indexterm><primary>Include Relationship</primary></indexterm>
          <indexterm>
          <primary>Relationship</primary><secondary>Include</secondary></indexterm>
          <para>A relationship between two Use Cases, where the 
          <emphasis>included</emphasis> Use Case describes part of the 
          functionality of the <emphasis>including</emphasis> Use 
          Case.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.iterative">

        <glossterm>Iterative Design Process</glossterm>

        <glossdef>

          <indexterm><primary>Iterative Design 
          Process</primary></indexterm>
          <indexterm><primary>Design 
          Process</primary><secondary>Iterative</secondary></indexterm>
          <para>A design process where each all phases (requirements, 
          analysis, design, build, test) are tackled partially in a 
          series of iterations. See <xref linkend="s2.proctypes"/> for 
          more information.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>J</title>

      <glossentry id="gl.java">

        <glossterm>Java</glossterm>

        <glossdef>

          <indexterm><primary>Java</primary></indexterm>
          <para>A fully object oriented programming language introduced 
          by Sun Microsystems. More strongly typed than C++, it 
          compiles to an interpreted code, the Java Virtual Machine 
          (JVM). The JVM means that Java code should run on any machine 
          that has implemented the JVM.</para>

          <para>The most significant component of Java was integration 
          of the JVM into web browsers, allowing code (Applets) to be 
          download and run over the web.</para>

          <para>ArgoUML is written in Java.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>M</title>

      <glossentry id="gl.mealy">

        <glossterm>Mealy Machine</glossterm>

        <glossdef>

          <indexterm><primary>Mealy Machine</primary></indexterm>
          <para>A <emphasis>Statechart Diagram</emphasis> where actions 
          are associated with <emphasis>States</emphasis>.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.method">

        <glossterm>Method (of a Class or Object)</glossterm>

        <glossdef>

          <indexterm><primary>Method</primary><secondary>of a 
          Class</secondary></indexterm>
          <indexterm><primary>Method</primary><secondary>of an 
          Object</secondary></indexterm>
          <indexterm><primary>Class Method</primary></indexterm>
          <indexterm><primary>Object Method</primary></indexterm>
          <para>A method of a class or object is a specification of 
          behavior encapsulated by that object.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.moore">

        <glossterm>Moore Machine</glossterm>

        <glossdef>

          <indexterm><primary>Moore Machine</primary></indexterm>
          <para>A <emphasis>Statechart Diagram</emphasis> where actions 
          are associated with <emphasis>Transitions</emphasis>.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>O</title>

      <glossentry id="gl.object">

        <glossterm>Object</glossterm>

        <glossdef>

          <indexterm><primary>Object</primary></indexterm>
          <para>An instance of a <emphasis>Class</emphasis>.</para>

          <para>Classes and objects in UML are represented on 
          <emphasis>Activity Diagrams</emphasis>, <emphasis>Class 
          Diagrams</emphasis>, <emphasis>Collaboration 
          Diagrams</emphasis> and <emphasis>Sequence 
          Diagrams</emphasis>.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.ocl">

        <glossterm>OCL</glossterm>

        <glossdef>

          <indexterm><primary>OCL</primary></indexterm>
          <indexterm><primary>Object Constraint 
          Language</primary></indexterm>
          <para>Object Constraint Language. A language for describing 
          constraints within UML.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.omg">

        <glossterm>OMG</glossterm>

        <glossdef>

          <indexterm><primary>OMG</primary></indexterm>
          <indexterm><primary>Object Management 
          Group</primary></indexterm>
          <para>The Object Management Group. An international industry 
          standardization body. Best known for CORBA and UML.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.ooad">

        <glossterm>OOA&amp;D</glossterm>

        <glossdef>

          <indexterm><primary>OOA&amp;D</primary></indexterm>
          <indexterm><primary>Design</primary><secondary>Object 
          Oriented</secondary></indexterm>
          <indexterm><primary>Analysis</primary><secondary>Object 
          Oriented</secondary></indexterm>
          <para>Object Oriented Analysis and Design. An approach to 
          software problem analysis and design based on objects, which 
          encapsulate both data and code. See See 
          <xref linkend="s2.ooad"/> or any standard textbook on 
          Software Engineering.</para>

          <para>UML is a notation to support OOA&amp;D.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.oppdesign">

        <glossterm>Opportunistic Design</glossterm>

        <glossdef>

          <indexterm><primary>Opportunistic Design</primary></indexterm>
          <indexterm>
          <primary>Design</primary><secondary>Opportunistic</secondary></indexterm>
          <para>A theory within cognitive psychology suggesting that 
          although designers plan and describe their work in an 
          ordered, hierarchical fashion, in actuality, they choose 
          successive tasks based on the criteria of cognitive cost. 
          Simply stated, designers do not follow even their own plans 
          in order, but choose steps that are mentally least expensive 
          among alternatives.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>P</title>

      <glossentry id="gl.pane">

        <glossterm>Pane</glossterm>

        <glossdef>

          <indexterm><primary>Pane</primary></indexterm>
          <para>A sub-window within the main window of the ArgoUML user 
          interface.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>R</title>

      <glossentry id="gl.relusecase">

        <glossterm>Realization Use Case</glossterm>

        <glossdef>

          <indexterm><primary>Realization Use Case</primary></indexterm>
          <indexterm><primary>Use Case Realization</primary></indexterm>
          <para>A <emphasis>Use Case</emphasis> where the <emphasis>Use 
          Case Diagram</emphasis> and <emphasis>Use Case 
          Specification</emphasis> are in the language of the solution 
          domain, rather than the problem domain.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.reflection">

        <glossterm>Reflection-in-Action</glossterm>

        <glossdef>

          <indexterm><primary>Reflection-in-Action</primary></indexterm>
          <para>A theory within cognitive psychology which observes 
          that designers of complex systems do not conceive a design 
          fully-formed. Instead, they must construct a partial design, 
          evaluate, reflect on, and revise it, until they are ready to 
          extend it further. As developers work hands-on with the 
          design, their mental model of the problem situation improves, 
          hence improving their design.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.requirements">

        <glossterm>Requirement Capturing</glossterm>

        <glossdef>

          <indexterm><primary>Requirement 
          Capturing</primary></indexterm>
          <para>Requirement capturing is the process of identifying 
          what the <quote>customer</quote> wants from the proposed 
          system. See <xref linkend="ch.tut.reqs"/> for a fuller 
          description.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.responsibility">

        <glossterm>Responsibility</glossterm>

        <glossdef>

          <indexterm><primary>Responsibility</primary></indexterm>
          <para>S
            ome behavior for which an object is held accountable.
            A responsibility denotes the obligation of an object to provide a
            certain behavior.
          </para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>S</title>

      <glossentry id="gl.scenario">

        <glossterm>Scenario</glossterm>

        <glossdef>

          <indexterm><primary>Scenario</primary></indexterm>
          <para>
            A specific sequence of actions that illustrates behavior.
          </para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.seqdiag">

        <glossterm>Sequence Diagram</glossterm>

        <glossdef>

          <indexterm><primary>Sequence Diagram</primary></indexterm>
          <indexterm>
          <primary>Diagram</primary><secondary>Sequence</secondary></indexterm>
          <para>A UML Diagram showing the dynamic behavior as messages 
          are passed between objects. Equivalent to a 
          <emphasis>Collaboration Diagram</emphasis>. Which 
          representation is appropriate depends on the problem under 
          consideration. See <xref linkend="s1.umlseqdiags"/> for more 
          information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.sgml">

        <glossterm>SGML</glossterm>

        <glossdef>

          <indexterm><primary>SGML</primary></indexterm>
          <indexterm><primary>Standard Graphical Markup 
          Language</primary></indexterm>
          <para>Standard Graphical Markup Language. Defined by ISO 
          8879:1986.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.simula67">

        <glossterm>Simula&nbsp;67</glossterm>

        <glossdef>

          <indexterm><primary>Simula&nbsp;67</primary></indexterm>
          <para>A procedural programming language intended for 
          simulation. Noted for its introduction of 
          <emphasis>objects</emphasis> and 
          <emphasis>coroutines</emphasis>.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.state">

        <glossterm>State</glossterm>

        <glossdef>

          <indexterm><primary>State</primary></indexterm>
          <para>Within a <emphasis>Statechart Diagram</emphasis> a one 
          of the possible configurations of the machine.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.statediag">

        <glossterm>Statechart Diagram</glossterm>

        <glossdef>

          <indexterm><primary>State Diagram</primary></indexterm>
          <indexterm><primary>Statechart Diagram</primary></indexterm>
          <indexterm>
          <primary>Diagram</primary><secondary>State</secondary></indexterm>
          <para>A UML Diagram showing the dynamic behavior of an active 
          <emphasis>Object</emphasis>. See 
          <xref linkend="s1.umlstatediags"/> for more 
          information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.stereotype">

        <glossterm>Stereotypes and Stereotyping</glossterm>

        <glossdef>

          <indexterm><primary>Stereotype</primary></indexterm>
          <indexterm><primary>Stereotyping</primary></indexterm>
          <para>Any model element within UML can be given a 
          <emphasis>stereotype</emphasis> to indicate its association 
          with a particular role in the design. A stereotype <literal>
          spqr</literal> is generally indicated with the notation 
          <literal>&lt;&lt;spqr&gt;&gt;</literal>.</para>

          <para>A stereotype defines a Namespace within the design. 
          Examples of stereotypes are <literal>
          &lt;&lt;business&gt;&gt;</literal> and <literal>
          &lt;&lt;realization&gt;&gt;</literal> for Use Cases, used to 
          distinguish between Use Cases at the requirements phase 
          defined in terms of the problem domain, and Use Cases at the 
          analysis phase defined in terms of the solution domain.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.supspec">

        <glossterm>Supplementary Requirement Specification</glossterm>

        <glossdef>

          <indexterm><primary>Supplementary Requirement 
          Specification</primary></indexterm>
          <para>The document capturing non-functional requirements that 
          cannot be associated with Use Cases.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.svg">

        <glossterm>SVG</glossterm>

        <glossdef>

          <indexterm><primary>SVG</primary></indexterm>
          <para>Scalable Vector Graphics format. A standard 
          representation of graphics diagrams that use vectors. ArgoUML 
          can export diagrams in SVG.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.sysseqdiag">

        <glossterm>System Sequence Diagram</glossterm>

        <glossdef>

          <indexterm><primary>System Sequence 
          Diagram</primary></indexterm>
          <indexterm><primary>Diagram</primary><secondary>System 
          Sequence</secondary></indexterm>
          <para>A <emphasis>Sequence Diagram</emphasis> used in the 
          <emphasis>Analysis</emphasis> Phase showing the dynamic 
          behavior of the overall system. See 
          <xref linkend="ch.tut.analysis"/> for more information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.sysstatediag">

        <glossterm>System Statechart Diagram</glossterm>

        <glossdef>

          <indexterm><primary>System Statechart 
          Diagram</primary></indexterm>
          <indexterm><primary>Diagram</primary><secondary>System 
          State</secondary></indexterm>
          <para>A <emphasis>Statechart Diagram</emphasis> used in the 
          <emphasis>Analysis</emphasis> Phase showing the dynamic 
          behavior of an active top level system objects. See 
          <xref linkend="ch.tut.analysis"/> for more information.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>T</title>

      <glossentry id="gl.todo">

        <glossterm>To-Do List</glossterm>

        <glossdef>

          <indexterm><primary>To-Do List</primary></indexterm>
          <para>A feature of ArgoUML allowing the user to record 
          activities that are yet to be completed.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.transition">

        <glossterm>Transition</glossterm>

        <glossdef>

          <indexterm><primary>Transition</primary></indexterm>
          <para>The change between <emphasis>States</emphasis> in a 
          <emphasis>Statechart Diagram</emphasis>..</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>U</title>

      <glossentry id="gl.uml">

        <glossterm>UML</glossterm>

        <glossdef>

          <indexterm><primary>UML</primary></indexterm>
          <para>Universal Modeling Language. A graphical notation for 
          OOA&amp;D processes, standardized by the OMG. ArgoUML supports 
          UML 1.4. UML 2.0 is in the final stages of standardization
          and should be complete during 2006.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.usecase">

        <glossterm>Use Case</glossterm>

        <glossdef>

          <indexterm><primary>Use Case</primary></indexterm>
          <para>A UML notation for capturing requirements of a system 
          or sub-system. See <xref linkend="s1.tut.req_process_output"/>
           for more information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.usecasediag">

        <glossterm>Use Case Diagram</glossterm>

        <glossdef>

          <indexterm><primary>Use Case Diagram</primary></indexterm>
          <indexterm><primary>Diagram</primary><secondary>Use 
          Case</secondary></indexterm>
          <para>A UML diagram showing the relationships between Actors 
          and Use Cases. See <xref linkend="s1.tut.req_process_output"/>
           for more information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.ucspec">

        <glossterm>Use Case Specification</glossterm>

        <glossdef>

          <indexterm><primary>Use Case 
          Specification</primary></indexterm>
          <para>The document capturing the detailed requirements behind 
          a Use Case.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>V</title>

      <glossentry id="gl.vision">

        <glossterm>Vision Document</glossterm>

        <glossdef>

          <indexterm><primary>Vision Document</primary></indexterm>
          <para>The top level document describing what the system being 
          developed is to achieve.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>W</title>

      <glossentry id="gl.w3c">

        <glossterm>W3C</glossterm>

        <glossdef>

          <indexterm><primary>W3C</primary></indexterm>
          <para>The World Wide Web Consortium, 
          <ulink url="http://www.w3c.org">www.w3c.org</ulink>. An 
          international standardization body for all things to do with 
          the World Wide Web.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.waterfall">

        <glossterm>Waterfall Design Process</glossterm>

        <glossdef>

          <indexterm><primary>Waterfall Design 
          Process</primary></indexterm>
          <indexterm><primary>Design 
          Process</primary><secondary>Waterfall</secondary></indexterm>
          <para>A design process where each phase (requirements, 
          analysis, design, build, test) is completed before the next 
          starts. See <xref linkend="s2.proctypes"/> for more 
          information.</para>

        </glossdef>

      </glossentry>

    </glossdiv>

    <glossdiv>

      <title>X</title>

      <glossentry id="gl.xmi">

        <glossterm>XMI</glossterm>

        <glossdef>

          <indexterm><primary>XMI</primary></indexterm>
          <para>XML Model Interchange format. A format for file storage 
          of UML models. Currently incomplete, since it does not carry 
          all graphical layout information, so must be supplemented by 
          files carrying that information.</para>

        </glossdef>

      </glossentry>

      <glossentry id="gl.xml">

        <glossterm>XML</glossterm>

        <glossdef>

          <indexterm><primary>XML</primary></indexterm>
          <para>eXtensible Markup Language. A simplified derivative of 
          SGML defined by W3C</para>

        </glossdef>

      </glossentry>

    </glossdiv>

  </glossary>

  <appendix id="app.casestudy">

    <title>Supplementary Material for the Case Study</title>

    <sect1>

      <title>Introduction</title>

      <para>The case study requires various material (mostly documents) 
      that live alongside the design diagram</para>

    </sect1>

    <sect1>

      <title>Requirements Documents (To be written)</title>

      <remark>To be written...</remark>
      <sect2>

        <title>Vision Document (To be written)</title>

        <remark>To be written...</remark>
      </sect2>

      <sect2>

        <title>Use Case Specifications (To be written)</title>

        <remark>To be written...</remark>
        <sect3>

          <title>UC Specification 1 (To be written)</title>

          <remark>To be written...</remark>
        </sect3>

      </sect2>

      <sect2>

        <title>Supplementary Requirements Specification (To be 
        written)</title>

        <remark>To be written...</remark>
      </sect2>

    </sect1>

  </appendix>

  <appendix id="app.umlres">

    <title>UML resources</title>

    <sect1>

      <title>The UML specs (To be written)</title>

      <para>To be written...</para>

    </sect1>

    <sect1>

      <title>UML related papers (To be written)</title>

      <para>To be written...</para>

      <sect2>

        <title>UML action specifications (To be written)</title>

        <para>To be written...</para>

      </sect2>

    </sect1>

    <sect1>

      <title>UML related websites (To be written)</title>

      <para>To be written...</para>

    </sect1>

  </appendix>

  <appendix id="app.umlcase">

    <title>UML Conforming CASE Tools</title>

    <sect1>

      <title>Other Open Source Projects (To be written)</title>

      <para>To be written...</para>

    </sect1>

    <sect1>

      <title>Commercial Tools (To be written)</title>

      <para>To be written...</para>

    </sect1>

  </appendix>

  <appendix id="app.cppmod">

    <title>The C++ Module</title>

    <para>The ArgoUML C++ Module (C++ Mod.) provides C++ code 
    generation functionalities and C++ notation within ArgoUML. It 
    works the same way as the other languages&apos; modules.</para>

    <sect1>

      <title>Modeling for C++</title>

      <para>The C++ programming language has constructs that 
      aren&apos;t contained by default in UML. Examples are pointers, 
      global functions and variables, references and operator 
      overloading. To enable us to apply these constructs in our models 
      and be capable of taking advantage of it for code generation and 
      C++ notation in UML diagrams, the C++ module uses conventions in 
      the use of the extension features of UML, such as tagged values, 
      stereotypes and data types.</para>

      <para>Since UML and C++ are object oriented, there is an obvious 
      correspondence between the UML model elements and C++ structural 
      constructs, e.g, the UML <literal>Class</literal> is related to 
      the C++ <literal>class</literal>. These obvious relations will 
      not be described here, since it is assumed that an ArgoUML user 
      that wants to model for C++ has basic knowledge of both C++ and 
      UML.</para>
      
      <para>The C++ module comes with a UML profile for C++, which defines 
      <link linkend="s1.ref.stereotype"><literal>Stereotypes</literal></link> 
      and <link linkend="s1.ref.tagdefinition"><literal>Tagged 
      Definitions</literal></link> 
      which enable the modeling of C++ specific constructs, such as pointers 
      and references.
      It also includes 
      <link linkend="s1.ref.datatype"><literal>Data Types</literal></link> 
      that model the C++ built-in types, such as 
      <literal>unsigned long int</literal>.
      </para>
      
      <para>To have these constructs available in our model, we need to 
      configure the UML profile for C++ in the model explicitly via the Project
      Properties dialog, in the Profiles tab
      (see <xref linkend="s2.ref.menu_properties"/>).
      </para>
      <para>Tagged values are one of the main means by which we can 
      define code generation behavior. They have a name - the tag - and 
      a value, and are applied to model elements.</para>

      <para>The tagged values in use for the C++ module have two 
      categories:</para>

      <itemizedlist>

        <listitem>

          <para>free format values - any <literal>String</literal> is 
          valid, except the empty <literal>String</literal></para>

        </listitem>

        <listitem>

          <para>formated values - the value must obey some 
          restrictions, e.g., be one of <literal>true</literal> or 
          <literal>false</literal> (abbreviated to <literal>true || 
          false</literal>)</para>

        </listitem>

      </itemizedlist>

      <para>For <literal>Boolean</literal> tagged values, only the 
      values &quot;<literal>true</literal>&quot; or &quot;
      <literal>false</literal>&quot; are applicable. If a <literal>
      Boolean</literal> tagged value does not exist or is invalid for 
      one model element, a default value is assumed by the code 
      generator. In the bellow documentation the default value is 
      marked.</para>

      <para>Free format tagged values are only significant if present 
      and if the value isn&apos;t an empty <literal>String</literal>. 
      When the value must follow some sort of format, that is 
      explicitly stated. In this case, there is the chance that the 
      value is invalid. If the value is invalid, no assumptions are 
      made; the generator will trace the problem and ignore the tagged 
      value.</para>

      <sect2>

        <title><literal>Class</literal> tagged values</title>

        <variablelist>

          <varlistentry>

            <term><literal>constructor</literal></term>

            <listitem>

              <para><literal>true</literal> - generates a default 
              constructor for the <literal>class</literal>.</para>

              <para><literal>false</literal> (default) - no default 
              constructor is generated, unless it is explicitly modeled 
              with the <literal>&laquo;create&raquo;</literal> stereotype.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>header_incl</literal></term>

            <listitem>

              <para>Name of the file to include in the header.</para>

              <note>

                <para>If we desire to have multiple headers included 
                this way, just use multiple tagged values with <literal>
                header_incl</literal> as the tag.</para>

                <para>Other tagged values used for C++ modeling may 
                also be used this way. This note won&apos;t be repeated 
                in those cases.</para>

              </note>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>source_incl</literal></term>

            <listitem>

              <para>Name of the file to include in the source (
              <literal>.cpp</literal> file).</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>typedef_public</literal></term>

            <listitem>

              <para><literal>&lt;source type&gt; 
              &lt;type_name&gt;</literal> - creates <literal>
              typedef</literal> line in the public area of the <literal>
              class</literal> with <literal>typedef &lt;source type&gt; 
              &lt;type name&gt;</literal>.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>typedef_protected</literal></term>

            <listitem>

              <para>Same as <literal>typedef_public</literal>, but, in 
              <literal>protected</literal> area.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>typedef_private</literal></term>

            <listitem>

              <para>Same as <literal>typedef_public</literal>, but, in 
              the <literal>private</literal> area.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>typedef_global_header</literal></term>

            <listitem>

              <para>Same as <literal>typedef_public</literal>, but, in 
              the global area of the header.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>typedef_global_source</literal></term>

            <listitem>

              <para>Same as <literal>typedef_global_source</literal>, 
              but, in the source file.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>TemplatePath</literal></term>

            <listitem>

              <para><literal>Directory</literal> - will search in the 
              specified directory for the template files 
              &quot;header_template&quot; and &quot;cpp_template&quot; 
              which are placed in top of the corresponding file. The 
              following tags in the template file are replaced by model 
              values: |FILENAME|, |DATE|, |YEAR|, |AUTHOR|, |EMAIL|. If 
              no such tag is specified, the templates are searched in 
              the subdirectory of the root directory for the code 
              generation.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>email</literal></term>

            <listitem>

              <para><literal>name@domain.country</literal> - replaces 
              the tag |EMAIL| of the template file.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>author</literal></term>

            <listitem>

              <para><literal>name</literal> - replaces the tag |AUTHOR| 
              of the template file.</para>

              <note>

                <para>You may simply use the Author property in the 
                documentation property panel.</para>

              </note>

            </listitem>

          </varlistentry>

        </variablelist>

      </sect2>

      <sect2>

        <title><literal>Attribute</literal> tagged values</title>

        <para>UML <literal>Attributes</literal> are mapped to <literal>
        class member variables</literal>.</para>

        <variablelist>

          <varlistentry>

            <term><literal>pointer</literal></term>

            <listitem>

              <para><literal>true</literal> - the type of the member 
              variable will be a pointer to the attribute type.</para>

              <para>For example, if you have the UML <literal>
              Attribute</literal>: <literal>name: 
              std::string</literal>, with the <literal>
              pointer</literal> tagged value set to true, the generated 
              member variable would be: <literal>std::string* 
              name;</literal></para>

              <para><literal>false</literal> (default) - no pointer 
              modifier is applied.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>reference</literal></term>

            <listitem>

              <para><literal>true</literal> - the type of the member 
              variable will be a reference to the attribute type.</para>

              <para><literal>false</literal> (default) - no reference 
              modifier is applied.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>usage</literal></term>

            <listitem>

              <para><literal>header</literal> - will lead for class 
              types to a pre-declaration in the header, and the include 
              of the remote class header in the header of the generated 
              class.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>MultiplicityType</literal></term>

            <listitem>

              <para><literal>list || slist || vector || map || stack || 
              stringmap</literal> - will define a multiplicity as the 
              corresponding STL container, if the <literal>
              Multiplicity</literal> range of the attribute is variable 
              (for fixed size ranges this setting is ignored).</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>set</literal></term>

            <listitem>

              <para><literal>private || protected || public</literal> - 
              creates a simple function to set the attribute by a 
              function (call by reference is used for class-types, else 
              call by value); place the function in the given 
              visibility area.</para>

            </listitem>

          </varlistentry>

          <varlistentry>

            <term><literal>get</literal></term>

            <listitem>

              <para><literal>private || protected || public</literal> - 
              as for <literal>set</literal>.</para>

            </listitem>

          </varlistentry>

        </variablelist>

      </sect2>

      <sect2>

        <title><literal>Parameters</literal></title>

        <sect3>

          <title>Variable passing semantics</title>

          <para>If a <literal>Parameter</literal> for an <literal>
          Operation</literal> is marked as <literal>out</literal> or 
          <literal>inout</literal> the variable will be passed by 
          reference (default) or pointer (needs tagged value <literal>
          pointer</literal> - see above), otherwise by value.</para>

          <para>Return values in UML are simply <literal>
          Parameters</literal> marked as <literal>return</literal>, 
          therefore everything here applies to them, except where 
          explicitly noted.</para>

          <warning>

            <para>Note that UML allows multiple return values. This is 
            possible to support in C++ as out parameters, but, 
            currently the generator doesn&apos;t supports it.</para>

            <para>This problem is being handled in 
            <ulink url="http://argouml.tigris.org/issues/show_bug.cgi?id=3553">
            issue #3553 - handle multiple return 
            parameters</ulink>.</para>

          </warning>

        </sect3>

        <sect3>

          <title><literal>Parameter</literal> tagged values</title>

          <variablelist>

            <varlistentry>

              <term><literal>pointer</literal></term>

              <listitem>

                <para><literal>true || false</literal> (default) - same 
                as for <literal>Attributes</literal>.</para>

              </listitem>

            </varlistentry>

            <varlistentry>

              <term><literal>reference</literal></term>

              <listitem>

                <para>ditto</para>

              </listitem>

            </varlistentry>

          </variablelist>

        </sect3>

      </sect2>

      <sect2>

        <title>Preserved sections</title>

        <para>With each code generation, special comments around the 
        member function definitions will be generated like this:</para>

        <programlisting>
  function Testclass::Testclass()
  // section -64--88-0-40-76f2e8:ec37965ae0:-7fff begin
 {
 }
  // section -64--88-0-40-76f2e8:ec37965ae0:-7fff end
      </programlisting>
        <para>All code you put within the &quot;begin&quot; and 
        &quot;end&quot; lines will be preserved when you generate the 
        code again. Please do not change anything within these lines 
        because the sections are recognized by this comment syntax. As 
        the curly braces are placed within the preserved area, 
        attribute initializers are preserved on constructors.</para>

        <para>This also works if you change Method Names after the 
        generation.</para>

        <programlisting>
  void newOperation(std::string test = &quot;fddsaffa&quot;)
  // section 603522:ec4c7ff768:-7ffc begin
 {
 }
  // section 603522:ec4c7ff768:-7ffc end
      </programlisting>
        <para>If you delete an Operation in the model. The next time 
        the class is generated, the lost code - i.e., the whole member 
        function definition - will be added as comment to the end of 
        the file.</para>

      </sect2>

    </sect1>

  </appendix>

  <appendix id="app.hardlimits">

    <title>Limits and Shortcomings</title>

    <para>As all products, ArgoUML has some limits. Those important to 
    the user are listed in this section.</para>

    <sect1>

      <title>Diagram Canvas Size</title>

      <para>Due to the underlying diagram editing software, the canvas 
      size for diagrams is limited to 6000 units in height and 
      width.</para>

    </sect1>

    <sect1>

      <title>Missing functions</title>
      <para></para>


    </sect1>

  </appendix>

  <appendix id="app.legal">

    <title>Open Publication License</title>

    <sect1>

      <title>Requirements On Both Unmodified And Modified 
      Versions</title>

      <para>The Open Publication works may be reproduced and 
      distributed in whole or in part, in any medium physical or 
      electronic, provided that the terms of this license are adhered 
      to, and that this license or an incorporation of it by reference 
      (with any options elected by the author(s) and/or publisher) is 
      displayed in the reproduction.</para>

      <para>Proper form for an incorporation by reference is as 
      follows:</para>

      <blockquote>

        <para>Copyright (c) &lt;year&gt; by &lt;author&apos;s name or 
        designee&gt;. This material may be distributed only subject to 
        the terms and conditions set forth in the Open Publication 
        License, vX.Y or later (the latest version is presently 
        available at <ulink url="http://www.opencontent.org/openpub/">
        http://www.opencontent.org/openpub/</ulink>).</para>

      </blockquote>

      <para>The reference must be immediately followed with any options 
      elected by the author(s) and/or publisher of the document (see 
      section VI).</para>

      <para>Commercial redistribution of Open Publication-licensed 
      material is permitted.</para>

      <para>Any publication in standard (paper) book form shall require 
      the citation of the original publisher and author. The publisher 
      and author&apos;s names shall appear on all outer surfaces of the 
      book. On all outer surfaces of the book the original 
      publisher&apos;s name shall be as large as the title of the work 
      and cited as possessive with respect to the title.</para>

    </sect1>

    <sect1>

      <title>Copyright</title>

      <para>The copyright to each Open Publication is owned by its 
      author(s) or designee.</para>

    </sect1>

    <sect1>

      <title>Scope Of License</title>

      <para>The following license terms apply to all Open Publication 
      works, unless otherwise explicitly stated in the document.</para>

      <para>Mere aggregation of Open Publication works or a portion of 
      an Open Publication work with other works or programs on the same 
      media shall not cause this license to apply to those other works. 
      The aggregate work shall contain a notice specifying the 
      inclusion of the Open Publication material and appropriate 
      copyright notice.</para>

      <para>SEVERABILITY. If any part of this license is found to be 
      unenforceable in any jurisdiction, the remaining portions of the 
      license remain in force.</para>

      <para>NO WARRANTY. Open Publication works are licensed and 
      provided <quote>as is</quote> without warranty of any kind, 
      express or implied, including, but not limited to, the implied 
      warranties of merchantability and fitness for a particular 
      purpose or a warranty of non-infringement.</para>

    </sect1>

    <sect1>

      <title>Requirements On Modified Works</title>

      <para>All modified versions of documents covered by this license, 
      including translations, anthologies, compilations and partial 
      documents, must meet the following requirements:</para>

      <orderedlist>

        <listitem>

          <para>The modified version must be labeled as such.</para>

        </listitem>

        <listitem>

          <para>The person making the modifications must be identified 
          and the modifications dated.</para>

        </listitem>

        <listitem>

          <para>Acknowledgement of the original author and publisher if 
          applicable must be retained according to normal academic 
          citation practices.</para>

        </listitem>

        <listitem>

          <para>The location of the original unmodified document must 
          be identified.</para>

        </listitem>

        <listitem>

          <para>The original author&apos;s (or authors&apos;) name(s) 
          may not be used to assert or imply endorsement of the 
          resulting document without the original author&apos;s (or 
          authors&apos;) permission.</para>

        </listitem>

      </orderedlist>

    </sect1>

    <sect1>

      <title>Good-Practice Recommendations</title>

      <para>In addition to the requirements of this license, it is 
      requested from and strongly recommended of redistributors 
      that:</para>

      <orderedlist>

        <listitem>

          <para>If you are distributing Open Publication works on 
          hardcopy or CD-ROM, you provide email notification to the 
          authors of your intent to redistribute at least thirty days 
          before your manuscript or media freeze, to give the authors 
          time to provide updated documents. This notification should 
          describe modifications, if any, made to the document.</para>

        </listitem>

        <listitem>

          <para>All substantive modifications (including deletions) be 
          either clearly marked up in the document or else described in 
          an attachment to the document.</para>

        </listitem>

        <listitem>

          <para>Finally, while it is not mandatory under this license, 
          it is considered good form to offer a free copy of any 
          hardcopy and CD-ROM expression of an Open 
          Publication-licensed work to its author(s).</para>

        </listitem>

      </orderedlist>

    </sect1>

    <sect1>

      <title>License Options</title>

      <para>The author(s) and/or publisher of an Open 
      Publication-licensed document may elect certain options by 
      appending language to the reference to or copy of the license. 
      These options are considered part of the license instance and 
      must be included with the license (or its incorporation by 
      reference) in derived works.</para>

      <para>A. To prohibit distribution of substantively modified 
      versions without the explicit permission of the author(s). 
      <quote>Substantive modification</quote> is defined as a change to 
      the semantic content of the document, and excludes mere changes 
      in format or typographical corrections.</para>

      <para>To accomplish this, add the phrase <quote>Distribution of 
      substantively modified versions of this document is prohibited 
      without the explicit permission of the copyright holder.</quote> 
      to the license reference or copy.</para>

      <para>B. To prohibit any publication of this work or derivative 
      works in whole or in part in standard (paper) book form for 
      commercial purposes is prohibited unless prior permission is 
      obtained from the copyright holder.</para>

      <para>To accomplish this, add the phrase <quote>Distribution of 
      the work or derivative of the work in any standard (paper) book 
      form is prohibited unless prior permission is obtained from the 
      copyright holder.</quote> to the license reference or copy.</para>

    </sect1>

    <sect1>

      <title>Open Publication Policy Appendix:</title>

      <para>(This is not considered part of the license.)</para>

      <para>Open Publication works are available in source format via 
      the Open Publication home page at 
      <ulink url="http://works.opencontent.org/">
      http://works.opencontent.org/</ulink>.</para>

      <para>Open Publication authors who want to include their own 
      license on Open Publication works may do so, as long as their 
      terms are not more restrictive than the Open Publication 
      license.</para>

      <para>If you have questions about the Open Publication License, 
      please contact <ulink url="mailto:dw2@opencontent.org">David 
      Wiley</ulink>, and/or the Open Publication Authors&apos; List at 
      <ulink url="mailto:opal@opencontent.org">
      opal@opencontent.org</ulink>, via email.</para>

      <para>To <emphasis>subscribe</emphasis> to the Open Publication 
      Authors&apos; List: Send E-mail to opal-request@opencontent.org 
      with the word <quote>subscribe</quote> in the body.</para>

      <para>To <emphasis>post</emphasis> to the Open Publication 
      Authors&apos; List: Send E-mail to opal@opencontent.org or simply 
      reply to a previous post.</para>

      <para>To <emphasis>unsubscribe</emphasis> from the Open 
      Publication Authors&apos; List: Send E-mail to 
      opal-request@opencontent.org with the word 
      <quote>unsubscribe</quote> in the body.</para>

    </sect1>

  </appendix>

  <appendix id="app.crc">

    <title>The CRC Card Methodology</title>

    <para>
      A CRC card is ostensibly an index card that is used to represent
      classes, their responsibilities, and the interactions between them.
      The term CRC card is also used to refer to a methodology for object
      oriented modeling based on their use.
    </para>

    <para>
      Kent Beck and Ward Cunningham introduced CRC cards in a paper
      "A Laboratory for Teaching Object-Oriented Thinking" that was presented at
      the OOPSLA (Object-Oriented Programming, Systems, Languages &amp; Applications)
      conference in 1989.
      A tutorial on the subject can be found at
      <ulink url="http://www.csc.calpoly.edu/~dbutler/tutorials/winter96/crc_b/"/>.
      The CRC card methodology was originally designed as a teaching tool but
      has proved useful as a modeling tool as well.
    </para>

    <para>
      The three parts of the CRC acronym were felt by the authors of the
      paper to represent the essential dimensions of object oriented modeling.
      The term Responsibilities refers to the contract that the class
      under discussion offers to the rest of the world (Interface and
      Contract are similar concepts).
      Responsibilities model the things that a class can do.
      Services, Methods, or Operations will result from these.
      The term Collaborators refers to the classes whose services
      the class under discussion will use.
      Kent Beck tried unsuccessfully to use ther term Helpers instead of
      Collaborators to indicate classes that were supporting the class under
      discussion.
      It is widely believed that the terminology was chosen because CRC are
      the initials of Ward Cunningham's son.
    </para>

    <para>
      Why use CRC cards?
      <itemizedlist>
        <listitem><para>
          They are portable.
          No computers are required so they can be used anywhere.
          Even away from the office.</para>
        </listitem>
        <listitem><para>
          They allow the participants to experience first hand
          how the system will work.
          No computer tool can replace the interaction that happens by
          physically picking up the cards and playing the role of that object.</para>
        </listitem>
        <listitem><para>
          They are a useful tool for teaching people the object-oriented
          paradigm.</para>
        </listitem>
        <listitem><para>
          They can be used as a methodology themselves or as a front end to a
          more formal methodology such as Booch, Wirfs-Brock, Jacobson, etc.
          Although CRC cards were created for teaching, they have proven
          useful for much more.</para>
        </listitem>
        <listitem><para>
          They have become an accepted method for analysis and design.
          The biggest contributing factor to their success is the fact that they
          provide an informal and non threatening environment that is
          productive to working and learning.</para>
        </listitem>
      </itemizedlist>
    </para>

    <sect1>

      <title>The Card</title>

      <para>
        The exact format of the card can be customized to the preferences of
        the group, but the minimal required information is the name of the
        class, it's subclasses and superclasses, it's responsibilities
        and the collaborators for each of those responsibilities.
        The back of the card can be used for a description of the class.
        During the design phase attributes of the class can be recorded on
        the back as well.
        One way to think of the card is that the front contains
        the public information, and the back contains the encapsulated,
        implementation details.
        As a class is defined a card is made for that class with
        its name entered.
        When a class is assigned to an individual that has only a class name
        on it, the individual (or the group) selects an initial set of
        responsibilities for the class.
        This initial set should be whatever (if anything) is
        immediately obvious.
      </para>

    </sect1>

    <sect1>

      <title>The Group</title>

      <para>
        Whether they are implicitly or explicitly defined the requirements
        for the system need to be familiar to the people participating
        in the group.
      </para>

      <para>
        The ideal group size for a CRC card session is five or six people.
        This size generally allows everyone to productively participate.
        In groups of larger size productivity is cut by more disagreements and
        the amount of participation by each is lower.
        If there are more than six people, one solution is to have the extra
        people be present strictly as observers.
      </para>

      <para>
        The group five or six people in the core group should be composed of
        developers, domain experts, and an object-oriented
        technology facilitator.
      </para>

    </sect1>

    <sect1>

      <title>The Session</title>

      <para>
        Before starting a session a part of the problem needs to be selected
        for the session to focus on.
        Essentially, this means picking the set of classes that are
        to be used.
      </para>

      <para>
        Pick the scenarios that are to be walked through that use the classes
        picked above.
        Start with scenarios that are part of the systems normal operation
        first, and then exceptional scenarios, like error recover, later.
      </para>

      <para>
        Assign each class to a member of the group.
        Each person should be responsible for at least one class.
        They are the owner of that class for the session.
        Each person records the name of their class on a card.
        One class per card.
      </para>

      <para>
        Walk-throughs are the heart of the CRC card session.
        To walk through a scenario address each action in it one at a time.
        First decide which class is responsible for this function.
        The owner of the class then picks up his card and
        holds it up in the air.
        When a card is up in the air it is an object and can do things.
        The owner announces that he needs to fulfill his responsibility.
        The responsibility is refined into smaller tasks if possible.
        These smaller tasks can be fulfilled by the object is appropriate or
        they can be fulfilled by interacting with other objects
        (collaborators).
        If no other appropriate class exists, you may need to make one
        and assign it to someone.
        This is the fundamental procedure of the scenario execution.
      </para>

    </sect1>

    <sect1>

      <title>The Process</title>


      <para>
        CRC Cards are used in the Analysis and Design phases.
        The process for these phases differ primarily in how the classes
        and scenarios are chosen.
      </para>

      <para>
        In the Analysis phase the classes and scenarios are in the problem
        space and generally derive from the requirements.
        In the Design phase solution space classes and scenarios are added.
        Additionally in the Analysis phase the very first session starts with
        no classes or scenarios to select from so a special session creates
        them.
      </para>

    </sect1>

  </appendix>

  <index>

    <para>The use of the index in the document is done a little at 
    random and cannot be trusted. Please help in suggesting new index 
    entries!</para>

  </index>

</book>

