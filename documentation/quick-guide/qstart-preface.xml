<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: qstart-preface.xml 7471 2005-01-07 13:20:26Z linus $ -->
<!--
// Copyright (c) 1996-2005 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
-->
<preface lang="de">
	<title lang="de">Vorwort</title>
	<para lang="de">
		1. April 2001
	</para>
	<para lang="de">
		Im letzten Jahrzehnt des letzten Jahrhunderts vollbrachte die objektorientierte (OO) Technologie 
		den Übergang von einer Laborkuriosität der 1960er zum überwiegend eingesetzten Softwareentwicklungs-
		Paradigma. Es war eine lange, schwierige Reise, die fast in der Dunkelheit endete. Hauptsächlich, weil 
		die OO-Technologie eine Änderung der Denkweise von Systemdesignern, -entwicklern und anderen, in den 
		Softwareentwicklungsprozess involvierten Personen erforderte.
	</para>
	<para lang="de">
		Erst die Einführung von OO-Hybrid-Sprachen wie C++, klassisches Ada und Object Pascal in den Achtzigern löste 
		diese Entwicklung aus und bot die Möglichkeit mit der OO-Technologie zu experimentieren. Diese Sprachen 
		kombinierten die OO-Programmierung mit der Unterstützung für traditioniellen prozeduralen Programmierung.
		Das Fehlen der Unterstützung der prozeduralen Programmierung innerhalb der reinen OO-Sprachen verhinderte 
		für viele Jahre die Anwendung der OO-Technologie. Die Reise begann mit der Einführung von <emphasis>Objekten</emphasis> 
		in Simula in den 1960ern und ist nun abgeschlossen. Die OO-Technologie war nun für die Entwicklung verfügbar...
		gut, die OO-Programmierung war das Mindeste.
	</para>
	<para lang="de">
		Die Simulation ist die grundlegene Prämisse, die der OO-Technologie zugrunde liegt. Ein OO-System wird als 
		Simulation der realen Welt mit Hilfe von Softwarebausteinen entworfen und entwickelt. Diese Prämisse ist so 
		leistungsfähig wie auch einfach. Durch diese Art Softwaresysteme zu designen und zu bauen, können die gleichen 
		Sprachen und Ideen in der Analyse, dem Design und in der Implementierung des OO-Systems verwendet werden. Dies 
		erlaubt es, ein System zu entwerfen und zu testen (oder korrekter: erlaubt es das System zu simulieren), ohne 
		das System zuvor bauen zu müssen. Diese Eigenschaft, gekoppelt mit der Fähigkeit Systeme auf einer sehr hohen 
		Ebene zu designen, versetzt erfahrene OO-Praktiker in die Lage, sehr viel komplexere Systeme als vorher zu 
		designen und erfolgreich zu implementieren.
	</para>
	<para lang="de">
		Die Verfügbarkeit verschiedener OO-Methoden und die Aufnahme der Unified Modelling Language (UML) als 
		Standardsprache für die Kommunikation von OO-Konzepten vertiefte den Vorteil der OO-Technologie. Die 
		Popularität der objektbasierten Sprache Visual Basic und die parallele Entwicklung und das schnelle Aufkommen 
		der vollständig objektorientierten Sprache Java war der endgültige Katalysator, der die abschliessenden 
		Schritte für die rasante Übernahme der OO-Technologie in die Hauptentwicklungsrichtung vorantrieb.
	</para>
	<para lang="de">
		ArgoUML ist als Tool und Umgebung für die Analyse und das Desgin objektorientierter Softwaresysteme gedacht. In 
		diesem Sinne ist es vielen kommerziellen CASE-Tools ähnlich, die als Tools für die Modellierung von Softwaresystemen
		verkauft werden. ArgoUML weist aber eine Anzahl sehr wichtiger Unterschiede zu vielen dieser Tools auf:
		<itemizedlist>
			<listitem>
				<para lang="de">
					ArgoUML enthält eine Anzahl von Eigenschaften, die kognitive Bedürfnisse objektorientierter Software-
					Designern und Architekten unterstützen.
				</para>
			</listitem>
			<listitem>
				<para lang="de">
					ArgoUML unterstützt sehr ausgeprägt offene Standards - UML, XMI, SVG, OCL und andere. In dieser Hinsicht 
					ist ArgoUML sehr viel weiter (auch fünf Jahre nach seiner erstmaligen Einführung) als viele kommerzielle Tools.
				</para>
			</listitem>
			<listitem>
				<para lang="de">
					ArgoUML ist eine 100%ige Javaanwendung. Damit kann ArgoUML auf allen Plattformen ausgeführt werden, auf 
					denen der ausführbare Teil der Java2-Plattform verfügbar ist.
				</para>
			</listitem>
			<listitem>
				<para lang="de">
					ArgoUML ist ein Open Source-Produkt. Die Verfügbarkeit des Quellcodes stellt sicher, dass eine 
					neue Generation von Software-Designern und Forscher nun ein geprüftes Framework haben, von dem Sie die 
					Entwicklung und Evolution der CASE-Tool-Technologie weiter vorantreiben können.
				</para>
			</listitem>
		</itemizedlist>
	</para>
	<para lang="de">
		Durch die Entwicklung des ArgoUML Entwicklungstools und Umgebung, vereinigte Jason Robbins und der Rest seines 
		Forscherteams bei UCL die Vorteile von UML als bevorzugte OO-Modellierungssprache und Java als eine der produktivsten 
		OO Entwicklungsplattformen, um ein solides
		In creating the ArgoUML development tool and environment, Jason Robbins and the rest of his research team at 
		UCL leveraged the benefits of UML as the most prevalent OO modelling language and Java as one of the most 
		productive OO development platforms to produce a solid tool for OO systems design and, further a testbed for
		the evolution of OO CASE tools development and research.
	</para>
	<para lang="de">
		Kunle Odutola
	</para>
</preface>
